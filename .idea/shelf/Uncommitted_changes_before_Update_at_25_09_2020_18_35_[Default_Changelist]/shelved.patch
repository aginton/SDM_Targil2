Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMainController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo;\r\n\r\nimport Logic.Order.Order;\r\nimport Logic.Order.OrderChangeInterface;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.Pane;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class ViewMainController implements Initializable {\r\n    @FXML\r\n    private GridPane rootGridpane;\r\n\r\n    @FXML\r\n    private Button viewStoresButton;\r\n\r\n    @FXML\r\n    private Button viewItemsButton;\r\n\r\n    @FXML\r\n    private Button viewOrdersButton;\r\n\r\n    @FXML\r\n    private Button viewCustomersButton;\r\n\r\n    @FXML\r\n    private Button viewMapButton;\r\n\r\n    @FXML\r\n    private AnchorPane childAnchorPane;\r\n\r\n    private Node viewMapRef, viewOrderHistoryRef, viewStoresRef, viewInventoryItemsRef, storesListRef;\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        try {\r\n\r\n            System.out.println(\"Inside MainAppController initialize().\");\r\n            viewStoresRef = FXMLLoader.load(getClass().getResource(\"/components/ViewInfo/ViewStore/ViewStore.fxml\"));\r\n            viewInventoryItemsRef = FXMLLoader.load(getClass().getResource(\"/components/ViewInfo/ViewItems/ViewItems.fxml\"));\r\n            viewOrderHistoryRef = FXMLLoader.load(getClass().getResource(\"/components/ViewInfo/ViewOrders/ViewOrders.fxml\"));\r\n            viewMapRef = FXMLLoader.load(getClass().getResource(\"/components/ViewInfo/ViewMap/ViewMap.fxml\"));\r\n\r\n            loadNewPane(viewStoresRef);\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void viewCustomersAction(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void viewItemsAction(ActionEvent event) {\r\n        loadNewPane(viewInventoryItemsRef);\r\n    }\r\n\r\n    @FXML\r\n    void viewMapAction(ActionEvent event) {\r\n        loadNewPane(viewMapRef);\r\n    }\r\n\r\n    @FXML\r\n    void viewOrdersAction(ActionEvent event) {\r\n        loadNewPane(viewOrderHistoryRef);\r\n    }\r\n\r\n    @FXML\r\n    void viewStoresAction(ActionEvent event) {\r\n        loadNewPane(viewStoresRef);\r\n    }\r\n\r\n    private void loadNewPane(Node paneToLoad) {\r\n        childAnchorPane.getChildren().clear();\r\n        childAnchorPane.getChildren().add(paneToLoad);\r\n        AnchorPane.setBottomAnchor(paneToLoad, 0.0);\r\n        AnchorPane.setLeftAnchor(paneToLoad, 0.0);\r\n        AnchorPane.setRightAnchor(paneToLoad, 0.0);\r\n        AnchorPane.setTopAnchor(paneToLoad, 0.0);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMainController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMainController.java	(date 1601046324085)
@@ -1,7 +1,5 @@
 package components.ViewInfo;
 
-import Logic.Order.Order;
-import Logic.Order.OrderChangeInterface;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.fxml.FXMLLoader;
@@ -10,7 +8,6 @@
 import javafx.scene.control.Button;
 import javafx.scene.layout.AnchorPane;
 import javafx.scene.layout.GridPane;
-import javafx.scene.layout.Pane;
 
 import java.io.IOException;
 import java.net.URL;
@@ -48,7 +45,10 @@
             viewStoresRef = FXMLLoader.load(getClass().getResource("/components/ViewInfo/ViewStore/ViewStore.fxml"));
             viewInventoryItemsRef = FXMLLoader.load(getClass().getResource("/components/ViewInfo/ViewItems/ViewItems.fxml"));
             viewOrderHistoryRef = FXMLLoader.load(getClass().getResource("/components/ViewInfo/ViewOrders/ViewOrders.fxml"));
-            viewMapRef = FXMLLoader.load(getClass().getResource("/components/ViewInfo/ViewMap/ViewMap.fxml"));
+            viewMapRef = FXMLLoader.load(getClass().getResource("/components/ViewInfo/ViewMap/Map.fxml"));
+//            viewMapRef = FXMLLoader.load(getClass().getResource("/components/ViewInfo/ViewMap/TilePaneMap.fxml"));
+
+
 
             loadNewPane(viewStoresRef);
 
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsBackup.fxml
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsBackup.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsBackup.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
@@ -1,78 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import javafx.geometry.Insets?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.control.Label?>
-<?import javafx.scene.control.ListView?>
-<?import javafx.scene.control.TableColumn?>
-<?import javafx.scene.control.TableView?>
-<?import javafx.scene.layout.AnchorPane?>
-<?import javafx.scene.layout.ColumnConstraints?>
-<?import javafx.scene.layout.GridPane?>
-<?import javafx.scene.layout.HBox?>
-<?import javafx.scene.layout.RowConstraints?>
-
-<AnchorPane prefHeight="472.0" prefWidth="734.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.PlaceAnOrder.ChooseDiscounts.ChooseDiscountsController">
-    <children>
-        <GridPane AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
-            <columnConstraints>
-                <ColumnConstraints hgrow="SOMETIMES" maxWidth="294.0" minWidth="10.0" percentWidth="30.0" prefWidth="203.0" />
-                <ColumnConstraints hgrow="SOMETIMES" maxWidth="421.0" minWidth="10.0" prefWidth="397.0" />
-            </columnConstraints>
-            <rowConstraints>
-                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-            </rowConstraints>
-            <children>
-                <AnchorPane prefHeight="200.0" prefWidth="200.0">
-                    <GridPane.margin>
-                        <Insets top="15.0" />
-                    </GridPane.margin>
-                    <children>
-                        <ListView fx:id="discountsListView" prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
-                    </children>
-                </AnchorPane>
-                <AnchorPane prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1">
-                    <GridPane.margin>
-                        <Insets top="15.0" />
-                    </GridPane.margin>
-                    <children>
-                        <GridPane layoutX="45.0" layoutY="208.0" prefHeight="451.0" prefWidth="515.0" AnchorPane.bottomAnchor="6.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="-94.0" AnchorPane.topAnchor="0.0">
-                            <columnConstraints>
-                                <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" maxWidth="229.0" minWidth="10.0" prefWidth="216.0" />
-                                <ColumnConstraints hgrow="SOMETIMES" maxWidth="308.0" minWidth="10.0" prefWidth="27.0" />
-                                <ColumnConstraints hgrow="SOMETIMES" maxWidth="341.0" minWidth="10.0" prefWidth="341.0" />
-                                <ColumnConstraints hgrow="SOMETIMES" maxWidth="308.0" minWidth="10.0" prefWidth="48.0" />
-                            </columnConstraints>
-                            <rowConstraints>
-                                <RowConstraints maxHeight="92.0" minHeight="10.0" vgrow="SOMETIMES" />
-                                <RowConstraints maxHeight="124.0" minHeight="10.0" prefHeight="124.0" vgrow="SOMETIMES" />
-                                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-                                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-                            </rowConstraints>
-                            <children>
-                                <Label fx:id="ifyoubuyLabel" text="If you buy:" />
-                                <Label fx:id="ifyoubuyValueLabel" text="Label" GridPane.columnIndex="2" />
-                                <Label fx:id="thenyougetLabel" text="Then you get" GridPane.rowIndex="1" GridPane.valignment="TOP" />
-                                <TableView fx:id="offersTableView" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="2" GridPane.rowIndex="1">
-                                    <columns>
-                                        <TableColumn fx:id="itemIdColumn" prefWidth="32.0" text="id" />
-                                        <TableColumn fx:id="itemNameColumn" prefWidth="84.0" text="item-name" />
-                                        <TableColumn fx:id="itemQuantityColumn" prefWidth="60.0" text="quantity" />
-                                        <TableColumn fx:id="forAdditionalCoumn" prefWidth="124.0" text="for additional" />
-                                    </columns>
-                                </TableView>
-                                <Label fx:id="remainingTimesLabel" text="Label" GridPane.rowIndex="2" />
-                                <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" GridPane.columnIndex="2" GridPane.rowIndex="2">
-                                    <children>
-                                        <Button fx:id="addButton" mnemonicParsing="false" onAction="#addButtonAction" text="Add Item(s)" />
-                                    </children>
-                                </HBox>
-                                <Label fx:id="discountTypeLabel" text="Label" GridPane.rowIndex="1" />
-                            </children>
-                        </GridPane>
-                    </children>
-                </AnchorPane>
-            </children>
-        </GridPane>
-    </children>
-</AnchorPane>
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsControllerBackup.java
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsControllerBackup.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsControllerBackup.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
@@ -1,490 +0,0 @@
-//package components.PlaceAnOrder.ChooseDiscounts;
-//
-//import Logic.Customers.Customer;
-//import Logic.Inventory.InventoryItem;
-//import Logic.Inventory.ePurchaseCategory;
-//import Logic.Order.Cart;
-//import Logic.Order.CartItem;
-//import Logic.Order.eOrderType;
-//import Logic.Store.*;
-//import javafx.beans.property.*;
-//import javafx.beans.value.ChangeListener;
-//import javafx.collections.FXCollections;
-//import javafx.collections.ObservableList;
-//import javafx.event.ActionEvent;
-//import javafx.fxml.FXML;
-//import javafx.fxml.Initializable;
-//import javafx.scene.control.*;
-//import javafx.scene.control.cell.PropertyValueFactory;
-//
-//import java.net.URL;
-//import java.util.HashMap;
-//import java.util.Observable;
-//import java.util.ResourceBundle;
-//
-//public class ChooseDiscountsController extends Observable implements Initializable {
-//
-//
-//    @FXML
-//    private Label cartSubtotalLabel;
-//
-//    @FXML
-//    private Label deliveryFeeLabel;
-//
-//    @FXML
-//    private Label totalCostLabel;
-//    @FXML
-//    private Label customerLabel;
-//
-//    @FXML
-//    private Label customerLocationLabel;
-//
-//    @FXML
-//    private ListView<DiscountWrapper> discountsListView;
-//
-//    @FXML
-//    private Label ifyoubuyLabel;
-//
-//    @FXML
-//    private Label discountTypeLabel;
-//
-//    @FXML
-//    private Label ifyoubuyValueLabel;
-//
-//    @FXML
-//    private Label thenyougetLabel;
-//
-//    @FXML
-//    private TableView<DiscountOffer> offersTableView;
-//
-//    @FXML
-//    private TableColumn<DiscountOffer, Integer> itemIdColumn;
-//
-//    @FXML
-//    private TableColumn<DiscountOffer, String> itemNameColumn;
-//
-//    @FXML
-//    private TableColumn<DiscountOffer, Double> itemQuantityColumn;
-//
-//    @FXML
-//    private TableColumn<DiscountOffer, Integer> forAdditionalCoumn;
-//
-//    @FXML
-//    private TableView<CartItem> cartTable;
-//
-//    @FXML
-//    private TableColumn<CartItem, Integer> cartItemIdColumn;
-//
-//    @FXML
-//    private TableColumn<CartItem, String> cartItemNameColumn;
-//
-//    @FXML
-//    private TableColumn<CartItem, Double> cartQuantityColumn;
-//
-//    @FXML
-//    private TableColumn<CartItem, Integer> cartForAdditionalColumn;
-//
-//    @FXML
-//    private TableColumn<CartItem, Double> costColumn;
-//
-//    @FXML
-//    private TableColumn<CartItem, String> cartDiscountNameColumn;
-//
-//    @FXML
-//    private Button addButton;
-//
-//    private final ObservableList<DiscountWrapper> discountWrappers = FXCollections.observableArrayList();
-//
-//    private final ObservableList<DiscountOffer> discountOffersObservableList = FXCollections.observableArrayList();
-//    private ChangeListener<DiscountWrapper> discountWrapperChangeListener;
-//    private DiscountWrapper selectedDiscountWrapper;
-//    private BooleanProperty isDiscountApplicable = new SimpleBooleanProperty(false);
-//    private Store selectedStore;
-//
-//    private HashMap<Integer, Double> dummyCartRepresentation;
-//    private HashMap<Integer, CartItem> mapIdsToDiscountCartItems;
-//
-//    private HashMap<Store, HashMap<Integer,Double>> dummyCartsRepresentation;
-//    private HashMap<Store,HashMap<Integer,CartItem>> mapOfMapIdsToDiscountItem;
-//
-//
-//
-//    TableView.TableViewSelectionModel<DiscountOffer> defaultSelectionModel;
-//    private DoubleProperty subtotal;
-//    private FloatProperty deliveryFee;
-//    private DoubleProperty total;
-//    private ObservableList<CartItem> cartItems;
-//    private eOrderType orderType;
-//
-//    public ChooseDiscountsController(){
-//        cartItems = FXCollections.observableArrayList();
-//        dummyCartsRepresentation = new HashMap<>();
-//        mapIdsToDiscountCartItems = new HashMap<>();
-//        mapOfMapIdsToDiscountItem = new HashMap<>();
-//    }
-//
-//
-//    @FXML
-//    void addButtonAction(ActionEvent event) {
-//        String operator = selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator();
-//        System.out.println("addButton called for " + operator + " discount");
-//        if (operator.equals("ONE-OF")){
-//            DiscountOffer selectedOffer = offersTableView.getSelectionModel().getSelectedItem();
-//            System.out.println("Adding " + selectedOffer.getItemName() + "to chosenDiscountOffers");
-//            if (orderType==eOrderType.STATIC_ORDER){
-//                addSelectedOfferToMapStatic(selectedOffer);
-//                updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());
-//            } else if (orderType == eOrderType.DYNAMIC_ORDER){
-//                addSelectedOfferToMapDynamic(selectedOffer,selectedDiscountWrapper.store);
-//                updateDummyCartsAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition(),selectedDiscountWrapper.store);
-//            }
-//            updateDiscountWrappers();
-//        }
-//
-//        if (operator.equals("ALL-OR-NOTHING")){
-//            offersTableView.getItems().forEach(item->{
-//                System.out.println("Adding " + item.getItemName() + "to chosenDiscountOffers");
-//                if (orderType == eOrderType.STATIC_ORDER)
-//                    addSelectedOfferToMapStatic(item);
-//                if (orderType == eOrderType.DYNAMIC_ORDER)
-//                    addSelectedOfferToMapDynamic(item, selectedDiscountWrapper.store);
-//
-//
-//            });
-//            updateDiscountWrappers();
-//
-//            updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());
-//        }
-//
-//        setChanged();
-//        notifyObservers();
-//    }
-//
-//
-//
-//    private void updateDiscountWrappers() {
-//        for (DiscountWrapper discountWrapper: discountsListView.getItems()){
-//            int val =0;
-//            if (orderType == eOrderType.DYNAMIC_ORDER)
-//                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartsRepresentation.get(discountWrapper.store));
-//            else if (orderType==eOrderType.STATIC_ORDER)
-//                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartRepresentation);
-//
-//            if (selectedDiscountWrapper == discountWrapper){
-//                discountWrapper.setTimesDiscountCanBeApplied(val);
-//                setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);
-//
-//            }
-//        }
-//    }
-//
-//    private void updateDummyCartsAfterUsingDiscount(DiscountCondition discountCondition, Store store) {
-//        Double oldAmount = dummyCartsRepresentation.get(store).get(discountCondition.getIfYouBuyItem().getItemId());
-//        double amountToSubtract = discountCondition.getQuantity();
-//        Double newAmount = (oldAmount - amountToSubtract);
-//        dummyCartsRepresentation.get(store).put(discountCondition.getIfYouBuyItem().getItemId(), newAmount);
-//        System.out.println("New dummy cart for store:" + store.getStoreName() +":" + dummyCartsRepresentation.get(store));
-//    }
-//
-//    private void updateDummyCartAfterUsingDiscount(DiscountCondition discountCondition) {
-//        Double oldAmount = dummyCartRepresentation.get(discountCondition.getIfYouBuyItem().getItemId());
-//        double amountToSubtract = discountCondition.getQuantity();
-//        Double newAmount = (oldAmount - amountToSubtract);
-//        dummyCartRepresentation.put(discountCondition.getIfYouBuyItem().getItemId(), newAmount);
-//        System.out.println("New dummy cart:" + dummyCartRepresentation);
-//    }
-//
-//
-//    private void addSelectedOfferToMapStatic(DiscountOffer selectedItem) {
-//        //if the item has not yet been added to map...
-//        if (mapIdsToDiscountCartItems.get(selectedItem.getItemId()) == null){
-//            System.out.println(selectedItem + " was not yet in chosenDiscountOffers");
-//            CartItem item = new CartItem(selectedItem.getOfferItem()
-//                    ,selectedItem.getQuantity(),selectedItem.getForAdditional()
-//                    ,true, selectedDiscountWrapper.getStoreDiscount().getName(), selectedStore);
-//            mapIdsToDiscountCartItems.put(item.getItemId(), item);
-//            cartItems.add(item);
-//        } else{
-//            System.out.println("This item was already in dummyCart");
-//            CartItem item = mapIdsToDiscountCartItems.get(selectedItem.getItemId());
-//            item.addToItemAmount(selectedItem.getQuantity());
-//        }
-//        double subtotal = getSubtotal();
-//        subtotal += (selectedItem.getQuantity()*selectedItem.getForAdditional());
-//        setSubtotal(subtotal);
-//
-//        discountsListView.refresh();
-//        cartTable.refresh();
-//        System.out.println("discountItemsToAddToCart is now: " + mapIdsToDiscountCartItems);
-//    }
-//
-//    private void addSelectedOfferToMapDynamic(DiscountOffer selectedItem, Store store) {
-//        if (mapOfMapIdsToDiscountItem.get(store) == null){
-//            HashMap<Integer,CartItem> map = new HashMap<>();
-//            mapOfMapIdsToDiscountItem.put(store,map);
-//        }
-//        if (mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId()) == null){
-//            System.out.println(selectedItem + " was not yet in chosenDiscountOffers");
-//            CartItem item = new CartItem(selectedItem.getOfferItem()
-//                    ,selectedItem.getQuantity(),selectedItem.getForAdditional()
-//                    ,true, selectedDiscountWrapper.getStoreDiscount().getName(), store);
-//
-//            mapOfMapIdsToDiscountItem.get(store).put(item.getItemId(), item);
-//            cartItems.add(item);
-//        } else{
-//            System.out.println("This item was already in dummyCart");
-//            CartItem item = mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId());
-//            item.addToItemAmount(selectedItem.getQuantity());
-//        }
-//        double subtotal = getSubtotal();
-//        subtotal += (selectedItem.getQuantity()*selectedItem.getForAdditional());
-//        setSubtotal(subtotal);
-//
-//        discountsListView.refresh();
-//        cartTable.refresh();
-//        System.out.println("discountItemsToAddToCart is now: " + mapOfMapIdsToDiscountItem);
-//    }
-//
-//
-//    private void updateOfferDetails() {
-//        ifyoubuyValueLabel.setText(getIfYouBuyString(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition()));
-//        discountTypeLabel.setText(selectedDiscountWrapper.storeDiscount.getDiscountOffers().getOperator());
-//        updateOffersTableView(selectedDiscountWrapper.getStoreDiscount().getDiscountOffers());
-//    }
-//
-//    private String getIfYouBuyString(DiscountCondition discountCondition) {
-//        InventoryItem ifYouBuyItem = discountCondition.getIfYouBuyItem();
-//
-//        StringBuilder res = new StringBuilder(String.valueOf(discountCondition.getQuantity()));
-//        if (ifYouBuyItem.getPurchaseCategory() == ePurchaseCategory.QUANTITY)
-//            res.append(" pcks");
-//        if (ifYouBuyItem.getPurchaseCategory() == ePurchaseCategory.WEIGHT)
-//            res.append("kgs");
-//
-//        res.append(" of item ").append(ifYouBuyItem.getItemId()).append( "(").append(ifYouBuyItem.getItemName()).append(")");
-//        return res.toString();
-//
-//    }
-//
-//    private void updateOffersTableView(DiscountOffers discountOffers) {
-//        discountOffersObservableList.clear();
-//        discountOffersObservableList.addAll(discountOffers.getDiscountOffers());
-//
-//        offersTableView.setItems(discountOffersObservableList);
-//        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals("ONE-OF")){
-//            offersTableView.setSelectionModel(defaultSelectionModel);
-//            System.out.println("Do something for ONE-OF type");
-//            offersTableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
-//            offersTableView.getSelectionModel().selectFirst();
-//        }
-//        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals("ALL-OR-NOTHING")){
-//            System.out.println("Do something for ALL-OR-NOTHING type");
-//            offersTableView.setSelectionModel(null);
-//        }
-//    }
-//
-//    public void setIsDiscountApplicable(boolean isDiscountApplicable) {
-//        this.isDiscountApplicable.set(isDiscountApplicable);
-//    }
-//
-//    @Override
-//    public void initialize(URL location, ResourceBundle resources) {
-//
-//
-//        subtotal = new SimpleDoubleProperty(this, "subtotal",0);
-//        cartSubtotalLabel.textProperty().bind(subtotal.asString("%.2f"));
-//        total = new SimpleDoubleProperty(this, "total",0);
-//        deliveryFee = new SimpleFloatProperty(this, "deliveryFee",0);
-//        deliveryFeeLabel.textProperty().bind(deliveryFee.asString("%.2f"));
-//        totalCostLabel.textProperty().bind((subtotal.add(deliveryFee)).asString("%.2f"));
-//        addButton.disableProperty().bind(isDiscountApplicable.not());
-//        itemIdColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Integer>("ItemId"));
-//        itemNameColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,String>("ItemName"));
-//        itemQuantityColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Double>("quantity"));
-//        forAdditionalCoumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Integer>("forAdditional"));
-//        defaultSelectionModel = offersTableView.getSelectionModel();
-//
-//
-//        cartItemIdColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>("itemId"));
-//        cartItemNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>("itemName"));
-//        cartForAdditionalColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>("price"));
-//        cartQuantityColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>("itemAmount"));
-//        costColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>("cost"));
-//        cartDiscountNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>("discountName"));
-//
-//        cartTable.setItems(cartItems);
-//    }
-//
-//    public void fillViewsBasedOnDynamicOrder(HashMap<Store, Cart> mapStoresToCarts) {
-//        System.out.println("Filling info based on dynamic order");
-//        orderType = eOrderType.DYNAMIC_ORDER;
-//        mapStoresToCarts.forEach((k,v)->{
-//            dummyCartsRepresentation.put(k, createDummyCartRepresentation(v));
-//        });
-//
-//        boolean atLeastOneSale = false;
-//        for (Store store: dummyCartsRepresentation.keySet()){
-//            if (store.getStoreDiscounts().size()==0){
-//                System.out.println("Store " + store.getStoreName() + " has no discounts!");
-//            } else{
-//                System.out.println("Store " + store.getStoreName() + " has following discounts: " + store.getStoreDiscounts());
-//                atLeastOneSale=true;
-//            }
-//        }
-//        if (!atLeastOneSale)
-//            setIsDiscountApplicable(false);
-//
-//
-//        dummyCartsRepresentation.keySet().forEach(store->{
-//            System.out.println("");
-//            store.getStoreDiscounts().forEach(discount-> discountWrappers.add(new DiscountWrapper(discount)));
-//        });
-//
-//        for (DiscountWrapper discountWrapper : discountWrappers){
-//            StoreDiscount discount = discountWrapper.getStoreDiscount();
-//            Store store = discountWrapper.store;
-//            int timesDiscountCanBeApplied = discount.countTimesConditionIsMet(dummyCartsRepresentation.get(store));
-//            System.out.println("Based on current cart, discount: " + discount.getName() + " can be applied " + timesDiscountCanBeApplied + " times");
-//            discountWrapper.setTimesDiscountCanBeApplied(timesDiscountCanBeApplied);
-//        }
-//        setUpDiscountsListView();
-//    }
-//
-//    public void fillViewsBasedOnStoreAndCart(Store selectedStore, Cart inputCart) {
-//        orderType = eOrderType.STATIC_ORDER;
-//        System.out.println("Filling info based on static order");
-//        dummyCartRepresentation = createDummyCartRepresentation(inputCart);
-//        mapIdsToDiscountCartItems = new HashMap<>();
-//        this.selectedStore = selectedStore;
-//        clearItemsFromScreen();
-//
-//
-//        if (selectedStore.getStoreDiscounts().size()==0){
-//            System.out.println("This store has no discounts!");
-//            setIsDiscountApplicable(false);
-//            return;
-//        }
-//
-//        selectedStore.getStoreDiscounts().forEach(discount-> discountWrappers.add(new DiscountWrapper(discount)));
-//        for (DiscountWrapper discountWrapper : discountWrappers){
-//            StoreDiscount discount = discountWrapper.getStoreDiscount();
-//            int timesDiscountCanBeApplied = discount.countTimesConditionIsMet(dummyCartRepresentation);
-//            System.out.println("Based on current cart, discount: " + discount.getName() + " can be applied " + timesDiscountCanBeApplied + " times");
-//            discountWrapper.setTimesDiscountCanBeApplied(timesDiscountCanBeApplied);
-//        }
-//
-//        setUpDiscountsListView();
-//    }
-//
-//    private void setUpDiscountsListView() {
-//        discountsListView.setItems(discountWrappers);
-//        discountsListView.getSelectionModel().selectedItemProperty().addListener(
-//                discountWrapperChangeListener = (((observable, oldValue, newValue) -> {
-//                    System.out.println("Change Listener called!");
-//                    selectedDiscountWrapper = newValue;
-//                    if (newValue != null){
-//                        System.out.println("isDiscountApplicable will be set to: " + (newValue.getTimesDiscountCanBeApplied() >0));
-//                        setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);
-//                        updateOfferDetails();
-//                        //remainingTimesLabel.setText("This offer can be applied " + selectedDiscountWrapper.getTimesDiscountCanBeApplied() + " times");
-//                    }
-//                }))
-//        );
-//        discountsListView.getSelectionModel().selectFirst();
-//    }
-//
-//    private void clearItemsFromScreen() {
-//        discountsListView.getItems().clear();
-//        discountWrappers.clear();
-//        offersTableView.getItems().clear();
-//        //remainingTimesLabel.setText("");
-//    }
-//
-//    private HashMap<Integer, Double> createDummyCartRepresentation(Cart inputCart) {
-//        HashMap res = new HashMap<Integer, Double>();
-//        for (CartItem cartItem: inputCart.getCart().values()){
-//            res.put(cartItem.getItemId(), cartItem.getItemAmount());
-//        }
-//        return res;
-//    }
-//
-//
-//
-//    public HashMap<Integer, CartItem> getMapIdsToDiscountCartItems() {
-//        return mapIdsToDiscountCartItems;
-//    }
-//    public HashMap<Store, HashMap<Integer,CartItem>> getMapIdsToDiscountCartItemsDynamic() {
-//        return mapOfMapIdsToDiscountItem;
-//    }
-//
-//    public void fillCustomerLabels(Customer customer) {
-//        customerLabel.setText("Customer: "+customer.getCustomerName());
-//        customerLocationLabel.setText("Customer Location: " + customer.getLocation());
-//    }
-//
-//    public void fillOrderLabels(double cartTotalPrice, float deliveryFee) {
-//        setDeliveryFee(deliveryFee);
-//        setSubtotal(cartTotalPrice);
-//    }
-//
-//    public double getSubtotal() {
-//        return subtotal.get();
-//    }
-//
-//    public DoubleProperty subtotalProperty() {
-//        return subtotal;
-//    }
-//
-//    public void setSubtotal(double subtotal) {
-//        this.subtotal.set(subtotal);
-//    }
-//
-//    public float getDeliveryFee() {
-//        return deliveryFee.get();
-//    }
-//
-//    public FloatProperty deliveryFeeProperty() {
-//        return deliveryFee;
-//    }
-//
-//    public void setDeliveryFee(float deliveryFee) {
-//        this.deliveryFee.set(deliveryFee);
-//    }
-//
-//
-//
-//    private class DiscountWrapper {
-//        private Store store;
-//        private StoreDiscount storeDiscount;
-//        private IntegerProperty timesDiscountCanBeApplied;
-//
-//        public DiscountWrapper(StoreDiscount discount){
-//            this.storeDiscount = discount;
-//            timesDiscountCanBeApplied = new SimpleIntegerProperty(0);
-//            this.store = discount.getStore();
-//        }
-//
-//        public IntegerProperty timesDiscountCanBeAppliedProperty() {
-//            return timesDiscountCanBeApplied;
-//        }
-//
-//        public StoreDiscount getStoreDiscount() {
-//            return storeDiscount;
-//        }
-//
-//        public int getTimesDiscountCanBeApplied() {
-//            return timesDiscountCanBeApplied.get();
-//        }
-//
-//        public void setTimesDiscountCanBeApplied(int timesDiscountCanBeApplied) {
-//            this.timesDiscountCanBeApplied.set(timesDiscountCanBeApplied);
-//        }
-//
-//        @Override
-//        public String toString() {
-//            return storeDiscount.getName() + "x (" + getTimesDiscountCanBeApplied() + ")";
-//        }
-//
-//    }
-//
-//}
Index: out/production/SDM_Targil2/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsBackup.fxml
===================================================================
--- out/production/SDM_Targil2/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsBackup.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ out/production/SDM_Targil2/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsBackup.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
@@ -1,78 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-
-<?import javafx.geometry.Insets?>
-<?import javafx.scene.control.Button?>
-<?import javafx.scene.control.Label?>
-<?import javafx.scene.control.ListView?>
-<?import javafx.scene.control.TableColumn?>
-<?import javafx.scene.control.TableView?>
-<?import javafx.scene.layout.AnchorPane?>
-<?import javafx.scene.layout.ColumnConstraints?>
-<?import javafx.scene.layout.GridPane?>
-<?import javafx.scene.layout.HBox?>
-<?import javafx.scene.layout.RowConstraints?>
-
-<AnchorPane prefHeight="472.0" prefWidth="734.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.PlaceAnOrder.ChooseDiscounts.ChooseDiscountsController">
-    <children>
-        <GridPane AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0">
-            <columnConstraints>
-                <ColumnConstraints hgrow="SOMETIMES" maxWidth="294.0" minWidth="10.0" percentWidth="30.0" prefWidth="203.0" />
-                <ColumnConstraints hgrow="SOMETIMES" maxWidth="421.0" minWidth="10.0" prefWidth="397.0" />
-            </columnConstraints>
-            <rowConstraints>
-                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-            </rowConstraints>
-            <children>
-                <AnchorPane prefHeight="200.0" prefWidth="200.0">
-                    <GridPane.margin>
-                        <Insets top="15.0" />
-                    </GridPane.margin>
-                    <children>
-                        <ListView fx:id="discountsListView" prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
-                    </children>
-                </AnchorPane>
-                <AnchorPane prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1">
-                    <GridPane.margin>
-                        <Insets top="15.0" />
-                    </GridPane.margin>
-                    <children>
-                        <GridPane layoutX="45.0" layoutY="208.0" prefHeight="451.0" prefWidth="515.0" AnchorPane.bottomAnchor="6.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="-94.0" AnchorPane.topAnchor="0.0">
-                            <columnConstraints>
-                                <ColumnConstraints halignment="RIGHT" hgrow="SOMETIMES" maxWidth="229.0" minWidth="10.0" prefWidth="216.0" />
-                                <ColumnConstraints hgrow="SOMETIMES" maxWidth="308.0" minWidth="10.0" prefWidth="27.0" />
-                                <ColumnConstraints hgrow="SOMETIMES" maxWidth="341.0" minWidth="10.0" prefWidth="341.0" />
-                                <ColumnConstraints hgrow="SOMETIMES" maxWidth="308.0" minWidth="10.0" prefWidth="48.0" />
-                            </columnConstraints>
-                            <rowConstraints>
-                                <RowConstraints maxHeight="92.0" minHeight="10.0" vgrow="SOMETIMES" />
-                                <RowConstraints maxHeight="124.0" minHeight="10.0" prefHeight="124.0" vgrow="SOMETIMES" />
-                                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-                                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
-                            </rowConstraints>
-                            <children>
-                                <Label fx:id="ifyoubuyLabel" text="If you buy:" />
-                                <Label fx:id="ifyoubuyValueLabel" text="Label" GridPane.columnIndex="2" />
-                                <Label fx:id="thenyougetLabel" text="Then you get" GridPane.rowIndex="1" GridPane.valignment="TOP" />
-                                <TableView fx:id="offersTableView" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="2" GridPane.rowIndex="1">
-                                    <columns>
-                                        <TableColumn fx:id="itemIdColumn" prefWidth="32.0" text="id" />
-                                        <TableColumn fx:id="itemNameColumn" prefWidth="84.0" text="item-name" />
-                                        <TableColumn fx:id="itemQuantityColumn" prefWidth="60.0" text="quantity" />
-                                        <TableColumn fx:id="forAdditionalCoumn" prefWidth="124.0" text="for additional" />
-                                    </columns>
-                                </TableView>
-                                <Label fx:id="remainingTimesLabel" text="Label" GridPane.rowIndex="2" />
-                                <HBox alignment="CENTER" prefHeight="100.0" prefWidth="200.0" GridPane.columnIndex="2" GridPane.rowIndex="2">
-                                    <children>
-                                        <Button fx:id="addButton" mnemonicParsing="false" onAction="#addButtonAction" text="Add Item(s)" />
-                                    </children>
-                                </HBox>
-                                <Label fx:id="discountTypeLabel" text="Label" GridPane.rowIndex="1" />
-                            </children>
-                        </GridPane>
-                    </children>
-                </AnchorPane>
-            </children>
-        </GridPane>
-    </children>
-</AnchorPane>
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ .idea/workspace.xml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
@@ -1,824 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="AutoImportSettings">
-    <option name="autoReloadType" value="SELECTIVE" />
-  </component>
-  <component name="BranchesTreeState">
-    <expand>
-      <path>
-        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
-        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
-      </path>
-    </expand>
-    <select>
-      <path>
-        <item name="ROOT" type="e8cecc67:BranchNodeDescriptor" />
-        <item name="LOCAL_ROOT" type="e8cecc67:BranchNodeDescriptor" />
-        <item name="BRANCH:master" type="e8cecc67:BranchNodeDescriptor" />
-      </path>
-    </select>
-  </component>
-  <component name="ChangeListManager">
-    <list default="true" id="12079fe1-433f-4321-8686-68adaa6eba3a" name="Default Changelist" comment="trying to use regular pages instead of accordion">
-      <change beforePath="$PROJECT_DIR$/.idea/cssdialects.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/cssdialects.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_09_2020_19_24__Default_Changelist_.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Checkout_at_22_09_2020_19_24__Default_Changelist_.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/CSS/MainAppCSS.css" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/MainAppCSS.css" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/CSS/styles.css" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/CSS/styles.css" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/MainAppN.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/MainAppN.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/MainAppNController.java" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/MainAppNController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/SDMApp.java" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/Main/SDMApp.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/UpdateInventory/UpdateInventoryContainer.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/UpdateInventory/UpdateInventoryContainer.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Piece.java" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Piece.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/PieceController.java" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/PieceController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/ViewMapController.java" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/ViewMapController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/resources/logo.png" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/resources/logo.png" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/resources/person.png" beforeDir="false" afterPath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/resources/person.png" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/resources/shop.png" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/SDM_Targil2/JavaFX/src/resources/storecute.jpg" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/SDM_Targil2/components/Main/MainAppN.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/SDM_Targil2/components/Main/MainAppN.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/SDM_Targil2/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderContainerController.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/SDM_Targil2/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderContainerController.class" afterDir="false" />
-    </list>
-    <option name="SHOW_DIALOG" value="false" />
-    <option name="HIGHLIGHT_CONFLICTS" value="true" />
-    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
-    <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="ChangesViewManager">
-    <option name="groupingKeys">
-      <option value="module" />
-    </option>
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="CSS File" />
-        <option value="Enum" />
-        <option value="Interface" />
-        <option value="JavaFXApplication" />
-        <option value="FxmlFile" />
-        <option value="Class" />
-      </list>
-    </option>
-  </component>
-  <component name="Git.Settings">
-    <option name="RECENT_BRANCH_BY_REPOSITORY">
-      <map>
-        <entry key="$PROJECT_DIR$" value="master" />
-      </map>
-    </option>
-    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
-  </component>
-  <component name="ProjectId" id="1h3mHuUt7liYW5r4xGeNcsURWdN" />
-  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
-    <ConfirmationsSetting value="1" id="Add" />
-  </component>
-  <component name="ProjectViewState">
-    <option name="hideEmptyMiddlePackages" value="true" />
-    <option name="showLibraryContents" value="true" />
-  </component>
-  <component name="PropertiesComponent">
-    <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
-    <property name="WebServerToolWindowFactoryState" value="false" />
-    <property name="aspect.path.notification.shown" value="true" />
-    <property name="last_directory_selection" value="$PROJECT_DIR$/SDM_Engine/src" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
-    <property name="list.type.of.created.stylesheet" value="CSS" />
-    <property name="node.js.detected.package.eslint" value="true" />
-    <property name="node.js.detected.package.tslint" value="true" />
-    <property name="node.js.path.for.package.eslint" value="project" />
-    <property name="node.js.path.for.package.tslint" value="project" />
-    <property name="node.js.selected.package.eslint" value="(autodetect)" />
-    <property name="node.js.selected.package.tslint" value="(autodetect)" />
-    <property name="project.structure.last.edited" value="Modules" />
-    <property name="project.structure.proportion" value="0.15559895" />
-    <property name="project.structure.side.proportion" value="0.2" />
-    <property name="restartRequiresConfirmation" value="false" />
-    <property name="run.code.analysis.last.selected.profile" value="pProject Default" />
-    <property name="settings.editor.selected.configurable" value="debugger.stepping" />
-  </component>
-  <component name="RecentsManager">
-    <key name="MoveFile.RECENT_KEYS">
-      <recent name="C:\java_course\SDM_Targil2\SDM_Targil2\JavaFX\src\components\Main" />
-      <recent name="C:\Users\Adam\Desktop\Java Course\SDM_Targil2\SDM_Targil2\JavaFX\src\components\PlaceAnOrder\SuccessOrError" />
-      <recent name="C:\Users\Adam\Desktop\Java Course\SDM_Targil2\SDM_Targil2\JavaFX\src\components\PlaceAnOrder\ChooseItems" />
-      <recent name="C:\Users\Adam\Desktop\Java Course\SDM_Targil2\SDM_Targil2\JavaFX\src\components\PlaceAnOrder\ChooseItems\ChooseForStaticOrder" />
-      <recent name="C:\Users\Adam\Desktop\Java Course\SDM_Targil2\SDM_Targil2\JavaFX\src\components\PlaceAnOrder\ChooseStores" />
-    </key>
-    <key name="CreateClassDialog.RecentsKey">
-      <recent name="components.ViewInfo.ViewMap" />
-      <recent name="Logic.Inventory" />
-      <recent name="components.ViewInfo.ViewStore" />
-    </key>
-  </component>
-  <component name="RunManager" selected="Application.SDMApp">
-    <configuration name="SDMApp" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="components.Main.SDMApp" />
-      <module name="SDM_Targil2" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="components.Main.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <configuration name="TestMain" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="Logic.Tests.TestMain" />
-      <module name="SDM_Engine" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="Logic.Tests.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <recent_temporary>
-      <list>
-        <item itemvalue="Application.SDMApp" />
-        <item itemvalue="Application.TestMain" />
-        <item itemvalue="Application.SDMApp" />
-        <item itemvalue="Application.TestMain" />
-      </list>
-    </recent_temporary>
-  </component>
-  <component name="SpellCheckerSettings" BundledDictionaries="0" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" Dictionaries="0" CorrectionsLimit="5" DefaultDictionary="application-level" UseSingleDictionary="true" />
-  <component name="SvnConfiguration">
-    <configuration />
-  </component>
-  <component name="TaskManager">
-    <task active="true" id="Default" summary="Default task">
-      <changelist id="12079fe1-433f-4321-8686-68adaa6eba3a" name="Default Changelist" comment="" />
-      <created>1599248066133</created>
-      <option name="number" value="Default" />
-      <option name="presentableId" value="Default" />
-      <updated>1599248066133</updated>
-      <workItem from="1599248067402" duration="709000" />
-      <workItem from="1599305334222" duration="75797000" />
-      <workItem from="1599638706719" duration="650000" />
-      <workItem from="1599728982959" duration="4411000" />
-      <workItem from="1599733475519" duration="13567000" />
-      <workItem from="1599758331165" duration="1242000" />
-      <workItem from="1599830745564" duration="6009000" />
-      <workItem from="1599899098052" duration="6681000" />
-      <workItem from="1599932484818" duration="2188000" />
-      <workItem from="1599979920597" duration="49196000" />
-      <workItem from="1600146330004" duration="40367000" />
-      <workItem from="1600244252218" duration="64879000" />
-      <workItem from="1600434251662" duration="20090000" />
-      <workItem from="1600524821060" duration="36305000" />
-      <workItem from="1600684394292" duration="59565000" />
-      <workItem from="1600975013523" duration="22079000" />
-    </task>
-    <task id="LOCAL-00001" summary="started trying to implement tableView, began changing class fields to properties">
-      <created>1599565972508</created>
-      <option name="number" value="00001" />
-      <option name="presentableId" value="LOCAL-00001" />
-      <option name="project" value="LOCAL" />
-      <updated>1599565972508</updated>
-    </task>
-    <task id="LOCAL-00002" summary="started trying to implement tableView, began changing class fields to properties">
-      <created>1599731898205</created>
-      <option name="number" value="00002" />
-      <option name="presentableId" value="LOCAL-00002" />
-      <option name="project" value="LOCAL" />
-      <updated>1599731898205</updated>
-    </task>
-    <task id="LOCAL-00003" summary="init commit">
-      <created>1599758398972</created>
-      <option name="number" value="00003" />
-      <option name="presentableId" value="LOCAL-00003" />
-      <option name="project" value="LOCAL" />
-      <updated>1599758398972</updated>
-    </task>
-    <task id="LOCAL-00004" summary="init commit">
-      <created>1599759350816</created>
-      <option name="number" value="00004" />
-      <option name="presentableId" value="LOCAL-00004" />
-      <option name="project" value="LOCAL" />
-      <updated>1599759350816</updated>
-    </task>
-    <task id="LOCAL-00005" summary="changed container types">
-      <created>1600009748586</created>
-      <option name="number" value="00005" />
-      <option name="presentableId" value="LOCAL-00005" />
-      <option name="project" value="LOCAL" />
-      <updated>1600009748586</updated>
-    </task>
-    <task id="LOCAL-00006" summary="inventoryTableView lets you edit amount value directly">
-      <created>1600083172486</created>
-      <option name="number" value="00006" />
-      <option name="presentableId" value="LOCAL-00006" />
-      <option name="project" value="LOCAL" />
-      <updated>1600083172486</updated>
-    </task>
-    <task id="LOCAL-00007" summary="created basic item tableview for item selection from individual store">
-      <created>1600156299889</created>
-      <option name="number" value="00007" />
-      <option name="presentableId" value="LOCAL-00007" />
-      <option name="project" value="LOCAL" />
-      <updated>1600156299889</updated>
-    </task>
-    <task id="LOCAL-00008" summary="begins adding item to cart on cartPane">
-      <created>1600163780962</created>
-      <option name="number" value="00008" />
-      <option name="presentableId" value="LOCAL-00008" />
-      <option name="project" value="LOCAL" />
-      <updated>1600163780962</updated>
-    </task>
-    <task id="LOCAL-00009" summary="started implementing viewOrders">
-      <created>1600173175643</created>
-      <option name="number" value="00009" />
-      <option name="presentableId" value="LOCAL-00009" />
-      <option name="project" value="LOCAL" />
-      <updated>1600173175644</updated>
-    </task>
-    <task id="LOCAL-00010" summary="save">
-      <created>1600244329244</created>
-      <option name="number" value="00010" />
-      <option name="presentableId" value="LOCAL-00010" />
-      <option name="project" value="LOCAL" />
-      <updated>1600244329244</updated>
-    </task>
-    <task id="LOCAL-00011" summary="removed some unnecessary code">
-      <created>1600251916648</created>
-      <option name="number" value="00011" />
-      <option name="presentableId" value="LOCAL-00011" />
-      <option name="project" value="LOCAL" />
-      <updated>1600251916648</updated>
-    </task>
-    <task id="LOCAL-00012" summary="removed some unnecessary code">
-      <created>1600251946134</created>
-      <option name="number" value="00012" />
-      <option name="presentableId" value="LOCAL-00012" />
-      <option name="project" value="LOCAL" />
-      <updated>1600251946134</updated>
-    </task>
-    <task id="LOCAL-00013" summary="started integrating with better fxml layouts">
-      <created>1600338148269</created>
-      <option name="number" value="00013" />
-      <option name="presentableId" value="LOCAL-00013" />
-      <option name="project" value="LOCAL" />
-      <updated>1600338148269</updated>
-    </task>
-    <task id="LOCAL-00014" summary="place an order fxmls work for static order">
-      <created>1600344004203</created>
-      <option name="number" value="00014" />
-      <option name="presentableId" value="LOCAL-00014" />
-      <option name="project" value="LOCAL" />
-      <updated>1600344004203</updated>
-    </task>
-    <task id="LOCAL-00015" summary="Static Order can be placed">
-      <created>1600345887757</created>
-      <option name="number" value="00015" />
-      <option name="presentableId" value="LOCAL-00015" />
-      <option name="project" value="LOCAL" />
-      <updated>1600345887757</updated>
-    </task>
-    <task id="LOCAL-00016" summary="updates amount sold for store">
-      <created>1600358088576</created>
-      <option name="number" value="00016" />
-      <option name="presentableId" value="LOCAL-00016" />
-      <option name="project" value="LOCAL" />
-      <updated>1600358088576</updated>
-    </task>
-    <task id="LOCAL-00017" summary="updates amount sold for store">
-      <created>1600358110372</created>
-      <option name="number" value="00017" />
-      <option name="presentableId" value="LOCAL-00017" />
-      <option name="project" value="LOCAL" />
-      <updated>1600358110372</updated>
-    </task>
-    <task id="LOCAL-00018" summary="InventoryView now updates after staticOrder">
-      <created>1600362650122</created>
-      <option name="number" value="00018" />
-      <option name="presentableId" value="LOCAL-00018" />
-      <option name="project" value="LOCAL" />
-      <updated>1600362650122</updated>
-    </task>
-    <task id="LOCAL-00019" summary="made map look nicer">
-      <created>1600367619999</created>
-      <option name="number" value="00019" />
-      <option name="presentableId" value="LOCAL-00019" />
-      <option name="project" value="LOCAL" />
-      <updated>1600367619999</updated>
-    </task>
-    <task id="LOCAL-00020" summary="started rewriting place An Order stages">
-      <created>1600625408147</created>
-      <option name="number" value="00020" />
-      <option name="presentableId" value="LOCAL-00020" />
-      <option name="project" value="LOCAL" />
-      <updated>1600625408147</updated>
-    </task>
-    <task id="LOCAL-00021" summary="got rid of summary on NewOrderMainContainer.fxml">
-      <created>1600754989697</created>
-      <option name="number" value="00021" />
-      <option name="presentableId" value="LOCAL-00021" />
-      <option name="project" value="LOCAL" />
-      <updated>1600754989698</updated>
-    </task>
-    <task id="LOCAL-00022" summary="CartSubtotal updates on chooseItems Page">
-      <created>1600780826778</created>
-      <option name="number" value="00022" />
-      <option name="presentableId" value="LOCAL-00022" />
-      <option name="project" value="LOCAL" />
-      <updated>1600780826778</updated>
-    </task>
-    <task id="LOCAL-00023" summary="fixed conflicts in workspace">
-      <created>1600793187637</created>
-      <option name="number" value="00023" />
-      <option name="presentableId" value="LOCAL-00023" />
-      <option name="project" value="LOCAL" />
-      <updated>1600793187637</updated>
-    </task>
-    <task id="LOCAL-00024" summary="fixed conflicts in workspace">
-      <created>1600793202231</created>
-      <option name="number" value="00024" />
-      <option name="presentableId" value="LOCAL-00024" />
-      <option name="project" value="LOCAL" />
-      <updated>1600793202231</updated>
-    </task>
-    <task id="LOCAL-00025" summary="FINALLY got scenes to fill in">
-      <created>1600855061096</created>
-      <option name="number" value="00025" />
-      <option name="presentableId" value="LOCAL-00025" />
-      <option name="project" value="LOCAL" />
-      <updated>1600855061096</updated>
-    </task>
-    <task id="LOCAL-00026" summary="ViewStore now updates its inventory when new item is added">
-      <created>1600865411851</created>
-      <option name="number" value="00026" />
-      <option name="presentableId" value="LOCAL-00026" />
-      <option name="project" value="LOCAL" />
-      <updated>1600865411851</updated>
-    </task>
-    <task id="LOCAL-00027" summary="ViewStore now updates after order is added">
-      <created>1600866164683</created>
-      <option name="number" value="00027" />
-      <option name="presentableId" value="LOCAL-00027" />
-      <option name="project" value="LOCAL" />
-      <updated>1600866164683</updated>
-    </task>
-    <task id="LOCAL-00028" summary="dynamic order updates up until confirm">
-      <created>1600885865537</created>
-      <option name="number" value="00028" />
-      <option name="presentableId" value="LOCAL-00028" />
-      <option name="project" value="LOCAL" />
-      <updated>1600885865538</updated>
-    </task>
-    <task id="LOCAL-00029" summary="trying to use regular pages instead of accordion">
-      <created>1600965453317</created>
-      <option name="number" value="00029" />
-      <option name="presentableId" value="LOCAL-00029" />
-      <option name="project" value="LOCAL" />
-      <updated>1600965453318</updated>
-    </task>
-    <task id="LOCAL-00030" summary="trying to use regular pages instead of accordion">
-      <created>1600965465419</created>
-      <option name="number" value="00030" />
-      <option name="presentableId" value="LOCAL-00030" />
-      <option name="project" value="LOCAL" />
-      <updated>1600965465419</updated>
-    </task>
-    <option name="localTasksCounter" value="31" />
-    <servers />
-  </component>
-  <component name="TypeScriptGeneratedFilesManager">
-    <option name="version" value="2" />
-  </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State>
-              <option name="FILTERS">
-                <map>
-                  <entry key="branch">
-                    <value>
-                      <list>
-                        <option value="master" />
-                      </list>
-                    </value>
-                  </entry>
-                </map>
-              </option>
-            </State>
-          </value>
-        </entry>
-      </map>
-    </option>
-    <option name="oldMeFiltersMigrated" value="true" />
-  </component>
-  <component name="VcsManagerConfiguration">
-    <ignored-roots>
-      <path value="$PROJECT_DIR$/SDM_Targil2" />
-    </ignored-roots>
-    <MESSAGE value="started trying to implement tableView, began changing class fields to properties" />
-    <MESSAGE value="init commit" />
-    <MESSAGE value="changed container types" />
-    <MESSAGE value="inventoryTableView lets you edit amount value directly" />
-    <MESSAGE value="created basic item tableview for item selection from individual store" />
-    <MESSAGE value="begins adding item to cart on cartPane" />
-    <MESSAGE value="started implementing viewOrders" />
-    <MESSAGE value="save" />
-    <MESSAGE value="removed some unnecessary code" />
-    <MESSAGE value="started integrating with better fxml layouts" />
-    <MESSAGE value="place an order fxmls work for static order" />
-    <MESSAGE value="Static Order can be placed" />
-    <MESSAGE value="updates amount sold for store" />
-    <MESSAGE value="InventoryView now updates after staticOrder" />
-    <MESSAGE value="made map look nicer" />
-    <MESSAGE value="started rewriting place An Order stages" />
-    <MESSAGE value="got rid of summary on NewOrderMainContainer.fxml" />
-    <MESSAGE value="CartSubtotal updates on chooseItems Page" />
-    <MESSAGE value="fixed conflicts in workspace" />
-    <MESSAGE value="FINALLY got scenes to fill in" />
-    <MESSAGE value="ViewStore now updates its inventory when new item is added" />
-    <MESSAGE value="ViewStore now updates after order is added" />
-    <MESSAGE value="dynamic order updates up until confirm" />
-    <MESSAGE value="trying to use regular pages instead of accordion" />
-    <option name="LAST_COMMIT_MESSAGE" value="trying to use regular pages instead of accordion" />
-  </component>
-  <component name="WindowStateProjectService">
-    <state x="578" y="183" key="#Inspections" timestamp="1599386944020">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="578" y="183" key="#Inspections/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1599386944020" />
-    <state x="1056" y="135" key="#com.intellij.ide.util.MemberChooser" timestamp="1600964022132">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="1056" y="135" key="#com.intellij.ide.util.MemberChooser/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600964022132" />
-    <state x="389" y="430" key="#com.intellij.refactoring.move.MoveHandler.SelectRefactoringDialog" timestamp="1600244333455">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="389" y="430" key="#com.intellij.refactoring.move.MoveHandler.SelectRefactoringDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600244333455" />
-    <state x="125" y="0" key="#com.intellij.refactoring.rename.AutomaticRenamingDialog" timestamp="1600941031541">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="125" y="0" key="#com.intellij.refactoring.rename.AutomaticRenamingDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600941031541" />
-    <state x="559" y="162" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog" timestamp="1600525519336">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="559" y="162" key="#com.intellij.refactoring.safeDelete.UnsafeUsagesDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600525519336" />
-    <state x="559" y="162" key="#com.intellij.refactoring.typeMigration.ui.FailedConversionsDialog" timestamp="1600881302096">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="559" y="162" key="#com.intellij.refactoring.typeMigration.ui.FailedConversionsDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600881302096" />
-    <state x="596" y="97" key="#xdebugger.evaluate" timestamp="1600691191088">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="596" y="97" key="#xdebugger.evaluate/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600691191088" />
-    <state x="574" y="304" key="ANALYSIS_DLG_com.intellij.analysis.BaseAnalysisAction$1" timestamp="1600537129530">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="574" y="304" key="ANALYSIS_DLG_com.intellij.analysis.BaseAnalysisAction$1/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600537129530" />
-    <state x="95" y="79" width="1736" height="896" key="DiffContextDialog" timestamp="1600862756134">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="95" y="79" width="1736" height="896" key="DiffContextDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600862756134" />
-    <state x="634" y="174" key="FileChooserDialogImpl" timestamp="1600691375777">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="634" y="174" key="FileChooserDialogImpl/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600691375777" />
-    <state x="423" y="0" key="FileChooserDialogImpl/0.0.1280.720@0.0.1280.720" timestamp="1599735782305" />
-    <state width="1046" height="91" key="GridCell.Tab.0.bottom" timestamp="1601046082709">
-      <screen x="0" y="0" width="1366" height="728" />
-    </state>
-    <state width="1853" height="229" key="GridCell.Tab.0.bottom/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600971532753" />
-    <state width="1213" height="146" key="GridCell.Tab.0.bottom/0.0.1280.720@0.0.1280.720" timestamp="1599754459453" />
-    <state width="1046" height="91" key="GridCell.Tab.0.bottom/0.0.1366.728@0.0.1366.728" timestamp="1601046082709" />
-    <state width="1046" height="91" key="GridCell.Tab.0.center" timestamp="1601046082708">
-      <screen x="0" y="0" width="1366" height="728" />
-    </state>
-    <state width="1853" height="229" key="GridCell.Tab.0.center/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600971532753" />
-    <state width="1213" height="146" key="GridCell.Tab.0.center/0.0.1280.720@0.0.1280.720" timestamp="1599754459453" />
-    <state width="1046" height="91" key="GridCell.Tab.0.center/0.0.1366.728@0.0.1366.728" timestamp="1601046082708" />
-    <state width="1046" height="91" key="GridCell.Tab.0.left" timestamp="1601046082708">
-      <screen x="0" y="0" width="1366" height="728" />
-    </state>
-    <state width="1853" height="229" key="GridCell.Tab.0.left/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600971532752" />
-    <state width="1213" height="146" key="GridCell.Tab.0.left/0.0.1280.720@0.0.1280.720" timestamp="1599754459452" />
-    <state width="1046" height="91" key="GridCell.Tab.0.left/0.0.1366.728@0.0.1366.728" timestamp="1601046082708" />
-    <state width="1046" height="91" key="GridCell.Tab.0.right" timestamp="1601046082709">
-      <screen x="0" y="0" width="1366" height="728" />
-    </state>
-    <state width="1853" height="229" key="GridCell.Tab.0.right/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600971532753" />
-    <state width="1213" height="146" key="GridCell.Tab.0.right/0.0.1280.720@0.0.1280.720" timestamp="1599754459453" />
-    <state width="1046" height="91" key="GridCell.Tab.0.right/0.0.1366.728@0.0.1366.728" timestamp="1601046082709" />
-    <state width="1853" height="272" key="GridCell.Tab.1.bottom" timestamp="1600942707019">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state width="1853" height="272" key="GridCell.Tab.1.bottom/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600942707019" />
-    <state width="1213" height="111" key="GridCell.Tab.1.bottom/0.0.1280.720@0.0.1280.720" timestamp="1599547133147" />
-    <state width="1853" height="272" key="GridCell.Tab.1.center" timestamp="1600942707019">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state width="1853" height="272" key="GridCell.Tab.1.center/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600942707019" />
-    <state width="1213" height="111" key="GridCell.Tab.1.center/0.0.1280.720@0.0.1280.720" timestamp="1599547133147" />
-    <state width="1853" height="272" key="GridCell.Tab.1.left" timestamp="1600942707019">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state width="1853" height="272" key="GridCell.Tab.1.left/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600942707019" />
-    <state width="1213" height="111" key="GridCell.Tab.1.left/0.0.1280.720@0.0.1280.720" timestamp="1599547133147" />
-    <state width="1853" height="272" key="GridCell.Tab.1.right" timestamp="1600942707019">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state width="1853" height="272" key="GridCell.Tab.1.right/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600942707019" />
-    <state width="1213" height="111" key="GridCell.Tab.1.right/0.0.1280.720@0.0.1280.720" timestamp="1599547133147" />
-    <state x="468" y="106" key="NewModule_or_Project.wizard" timestamp="1600150626535">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="468" y="106" key="NewModule_or_Project.wizard/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600150626535" />
-    <state x="218" y="0" key="SettingsEditor" timestamp="1600879825286">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="218" y="0" key="SettingsEditor/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600879825286" />
-    <state x="0" y="0" key="SettingsEditor/0.0.1280.720@0.0.1280.720" timestamp="1599733512838" />
-    <state x="545" y="154" width="810" height="786" key="StructurePopup" timestamp="1600528704528">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="545" y="154" width="810" height="786" key="StructurePopup/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600528704528" />
-    <state x="50" y="0" key="Vcs.Push.Dialog.v2" timestamp="1600970449654">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="50" y="0" key="Vcs.Push.Dialog.v2/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600970449654" />
-    <state x="33" y="0" key="Vcs.Push.Dialog.v2/0.0.1280.720@0.0.1280.720" timestamp="1599732580066" />
-    <state x="514" y="143" key="VcsDiffUtil.ChangesDialog" timestamp="1600862575409">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="514" y="143" key="VcsDiffUtil.ChangesDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600862575409" />
-    <state x="680" y="282" key="chooseDestDirectoryDialog" timestamp="1599398127334">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="680" y="282" key="chooseDestDirectoryDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1599398127334" />
-    <state x="92" y="92" width="1736" height="896" key="com.intellij.history.integration.ui.views.DirectoryHistoryDialog" timestamp="1600148388685">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="92" y="92" width="1736" height="896" key="com.intellij.history.integration.ui.views.DirectoryHistoryDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600148388685" />
-    <state x="0" y="0" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser" timestamp="1599558750691">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="0" y="0" key="com.intellij.openapi.editor.actions.MultiplePasteAction$ClipboardContentChooser/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1599558750691" />
-    <state x="688" y="414" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1600453435534">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="688" y="414" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600453435534" />
-    <state x="220" y="136" width="1480" height="858" key="com.intellij.xdebugger.impl.breakpoints.ui.BreakpointsDialogFactory$2" timestamp="1600082341257">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="220" y="136" width="1480" height="858" key="com.intellij.xdebugger.impl.breakpoints.ui.BreakpointsDialogFactory$2/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600082341257" />
-    <state x="510" y="107" width="738" height="569" key="find.popup" timestamp="1600999463898">
-      <screen x="0" y="0" width="1366" height="728" />
-    </state>
-    <state x="717" y="158" width="1036" height="844" key="find.popup/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600968456676" />
-    <state x="365" y="0" width="915" height="720" key="find.popup/0.0.1280.720@0.0.1280.720" timestamp="1599744459388" />
-    <state x="510" y="107" width="738" height="569" key="find.popup/0.0.1366.728@0.0.1366.728" timestamp="1600999463898" />
-    <state x="234" y="209" key="git4idea.remote.GitConfigureRemotesDialog" timestamp="1599732367479">
-      <screen x="0" y="0" width="1280" height="720" />
-    </state>
-    <state x="234" y="209" key="git4idea.remote.GitConfigureRemotesDialog/0.0.1280.720@0.0.1280.720" timestamp="1599732367479" />
-    <state x="500" y="0" key="new project wizard" timestamp="1600797935354">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="500" y="0" key="new project wizard/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600797935354" />
-    <state x="622" y="210" key="refactoring.ChangeSignatureDialog" timestamp="1600935648368">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="622" y="210" key="refactoring.ChangeSignatureDialog/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600935648368" />
-    <state x="448" y="242" key="run.anything.popup" timestamp="1600766447828">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="448" y="242" key="run.anything.popup/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600766447828" />
-    <state x="453" y="-2" width="1009" height="1470" key="search.everywhere.popup" timestamp="1600692242817">
-      <screen x="0" y="0" width="1920" height="1080" />
-    </state>
-    <state x="453" y="-2" width="1009" height="1470" key="search.everywhere.popup/-1920.0.1280.720/0.0.1920.1080@0.0.1920.1080" timestamp="1600692242817" />
-    <state x="302" y="-1" width="1009" height="980" key="search.everywhere.popup/0.0.1280.720@0.0.1280.720" timestamp="1599545842686" />
-  </component>
-  <component name="XDebuggerManager">
-    <breakpoint-manager>
-      <breakpoints>
-        <line-breakpoint type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/SDM/SDMManager.java</url>
-          <line>210</line>
-          <properties class="Logic.SDM.SDMManager">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="4" />
-        </line-breakpoint>
-        <line-breakpoint type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMainController.java</url>
-          <line>63</line>
-          <properties class="components.ViewInfo.ViewMainController">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="7" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewOrders/SingleOrder/SingleOrderViewController.java</url>
-          <line>66</line>
-          <properties class="components.ViewInfo.ViewOrders.SingleOrder.SingleOrderViewController" method="setOrder">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="38" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Order/Orders.java</url>
-          <line>37</line>
-          <properties class="Logic.Order.Orders" method="notifyListenersOrderWasAdded">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="44" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Order/Orders.java</url>
-          <line>31</line>
-          <properties class="Logic.Order.Orders" method="addOrder">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="45" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Store/Store.java</url>
-          <line>293</line>
-          <properties class="Logic.Store.Store" method="addOrder">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="46" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Store/Store.java</url>
-          <line>261</line>
-          <properties class="Logic.Store.Store" method="notifyStoreWasChanged">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="47" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Store/DiscountCondition.java</url>
-          <line>32</line>
-          <properties class="Logic.Store.DiscountCondition" method="toString">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="67" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Store/DiscountOffers.java</url>
-          <line>40</line>
-          <properties class="Logic.Store.DiscountOffers" method="toString">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="69" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/SDM/SDMManager.java</url>
-          <line>214</line>
-          <properties class="Logic.SDM.SDMManager" method="findCheapestCartForUser">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="93" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/SDM/SDMManager.java</url>
-          <line>227</line>
-          <properties class="Logic.SDM.SDMManager" method="findCheapestStoreForItem">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="94" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Inventory/Inventory.java</url>
-          <line>55</line>
-          <properties class="Logic.Inventory.Inventory" method="getMapItemsToStoresWithItem">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="96" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-method">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/ChooseItemsStaticOrderController.java</url>
-          <line>393</line>
-          <properties class="components.PlaceAnOrder.ChooseItems.ChooseItemsStaticOrderController" method="setUpCustomerBinding">
-            <option name="EMULATED" value="true" />
-          </properties>
-          <option name="timeStamp" value="131" />
-        </line-breakpoint>
-        <line-breakpoint type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Store/Store.java</url>
-          <line>364</line>
-          <option name="timeStamp" value="10" />
-        </line-breakpoint>
-        <line-breakpoint type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewStore/ViewStoreController.java</url>
-          <line>110</line>
-          <option name="timeStamp" value="14" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItemsView/ChooseFromEntireInventoryController.java</url>
-          <line>85</line>
-          <option name="timeStamp" value="33" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItemsView/ChooseFromEntireInventoryController.java</url>
-          <line>87</line>
-          <option name="timeStamp" value="34" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMainController.java</url>
-          <line>82</line>
-          <option name="timeStamp" value="41" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Store/Store.java</url>
-          <line>296</line>
-          <option name="timeStamp" value="51" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/NewOrderContainerController.java</url>
-          <line>308</line>
-          <option name="timeStamp" value="55" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/NewOrderContainerController.java</url>
-          <line>287</line>
-          <option name="timeStamp" value="57" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Engine/src/Logic/Customers/Customer.java</url>
-          <line>29</line>
-          <option name="timeStamp" value="58" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/PlaceAnOrderMainContainerController.java</url>
-          <line>73</line>
-          <option name="timeStamp" value="60" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/PlaceAnOrderMainContainerController.java</url>
-          <line>187</line>
-          <option name="timeStamp" value="61" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java</url>
-          <line>332</line>
-          <option name="timeStamp" value="115" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java</url>
-          <line>337</line>
-          <option name="timeStamp" value="117" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java</url>
-          <line>374</line>
-          <option name="timeStamp" value="118" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java</url>
-          <line>137</line>
-          <option name="timeStamp" value="120" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java</url>
-          <line>313</line>
-          <option name="timeStamp" value="121" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java</url>
-          <line>176</line>
-          <option name="timeStamp" value="122" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ConfirmOrder/ConfirmOrderController.java</url>
-          <line>147</line>
-          <option name="timeStamp" value="123" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ConfirmOrder/ConfirmOrderController.java</url>
-          <line>149</line>
-          <option name="timeStamp" value="126" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderAccordianContainerController.java</url>
-          <line>117</line>
-          <option name="timeStamp" value="129" />
-        </line-breakpoint>
-        <line-breakpoint enabled="true" type="java-line">
-          <url>file://$PROJECT_DIR$/SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderAccordianContainerController.java</url>
-          <line>213</line>
-          <option name="timeStamp" value="133" />
-        </line-breakpoint>
-      </breakpoints>
-    </breakpoint-manager>
-    <watches-manager>
-      <configuration name="Application">
-        <watch expression="mainAnchorPane" language="JAVA" />
-      </configuration>
-    </watches-manager>
-  </component>
-</project>
\ No newline at end of file
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/ViewMapController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo.ViewMap;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.SDM.SDMManager;\r\nimport Logic.Store.Store;\r\nimport Logic.Interfaces.hasLocationInterface;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.geometry.Bounds;\r\nimport javafx.scene.Group;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.ScrollPane;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.shape.Rectangle;\r\n\r\nimport java.net.URL;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\n\r\n\r\n//https://stackoverflow.com/questions/31095954/how-to-get-gridpane-row-and-colu\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n//\r\n// תץ-of-grid-in\r\n//https://www.google.com/search?q=javafx+add+label+gridpane+x+y+coordinates&rlz=1C1EKKP_enUS760IL760&sxsrf=ALeKk03VOboLNwLYypm-xRPIlKQqjKveNA:1600323798318&source=lnms&tbm=isch&sa=X&ved=2ahUKEwiIsZjcxu_rAhVO_aQKHbtoBZYQ_AUoAXoECBoQAw&biw=1920&bih=1007#imgrc=_t2oQARJUl4BiM&imgdii=bIACUuTGBnmNbM\r\n\r\n\r\n//READ\r\n//https://stackoverflow.com/questions/25403267/how-to-maintain-gridpanes-fixed-size-after-adding-elemnts-dynamically\r\n\r\npublic class ViewMapController implements Initializable {\r\n\r\n//    @FXML\r\n//    private GridPane gridpane;\r\n\r\n    @FXML\r\n    private AnchorPane scrollpChildAnchorPane;\r\n    @FXML\r\n    private ScrollPane scrollp;\r\n\r\n    @FXML\r\n    private GridPane gridpane;\r\n\r\n\r\n    private List<Customer> customers;\r\n    private List<Store> stores;\r\n    private int maxXValue;\r\n    private int maxYValue;\r\n\r\n    private static final double ELEMENT_SIZE = 100;\r\n    private static final double GAP = ELEMENT_SIZE / 10;\r\n    private ObjectProperty<Bounds> viewBounds;\r\n\r\n\r\n    //        private Group display = new Group(tilePane);\r\n    private int nRows;\r\n    private int nCols;\r\n\r\n    private GridPane grid;\r\n    public static int TILE_SIZE = 100;\r\n    public static int WIDTH = 10;\r\n    public static int HEIGHT = 10;\r\n    private Group tileGroup = new Group();\r\n    private Group pieceGroup = new Group();\r\n    Color[] colors = {Color.GRAY, Color.BLUE, Color.GREEN, Color.RED};\r\n\r\n    //https://stackoverflow.com/questions/55602778/how-to-add-objects-in-grid-from-bottom-up\r\n\r\n    public ViewMapController(){\r\n        maxXValue = 0;\r\n        maxYValue = 0;\r\n        customers = SDMManager.getInstance().getCustomers().getCustomers();\r\n        stores = SDMManager.getInstance().getStores();\r\n        updateMaxXandY(customers);\r\n        updateMaxXandY(stores);\r\n        WIDTH = maxYValue;\r\n        HEIGHT = maxXValue;\r\n        grid = new GridPane();\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        grid.setPrefSize(WIDTH*TILE_SIZE, HEIGHT*TILE_SIZE);\r\n\r\n        scrollpChildAnchorPane.getChildren().clear();\r\n        scrollpChildAnchorPane.getChildren().add(grid);\r\n        AnchorPane.setBottomAnchor(grid, 0.0);\r\n        AnchorPane.setLeftAnchor(grid, 0.0);\r\n        AnchorPane.setRightAnchor(grid, 0.0);\r\n        AnchorPane.setTopAnchor(grid, 0.0);\r\n\r\n\r\n        System.out.println(\"List of stores locations:\");\r\n        stores.forEach(i-> System.out.println(i.getLocation()));\r\n\r\n        //prepareMap();\r\n        createBoard();\r\n\r\n        addStoresToGrid();\r\n        addCustomersToGrid();\r\n        scrollp.setContent(grid);\r\n    }\r\n\r\n    private void createBoard() {\r\n        for (int row = 0; row < maxYValue; row++) {\r\n            for (int col = 0; col < maxXValue; col++) {\r\n                Tile tile = new Tile(col, row);\r\n                Color color;\r\n                if ((row + col) % 2 == 0) color = Color.WHITE;\r\n                else color = Color.BLACK;\r\n                tile.setFill(color);\r\n\r\n                grid.add(tile, col, row);\r\n                tile.getRectangle().widthProperty().bind(grid.widthProperty().divide(ELEMENT_SIZE));\r\n                tile.getRectangle().heightProperty().bind(grid.heightProperty().divide(ELEMENT_SIZE));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void addCustomersToGrid() {\r\n        for (Customer customer: customers){\r\n            int x = customer.getX();\r\n            int y = customer.getY();\r\n\r\n            Piece piece = new Piece(customer);\r\n            Tile n = (Tile) getNodeByRowColumnIndex(y-1,x-1, grid);\r\n            n.getChildren().add(piece);\r\n            //n.setOnMouseClicked(e->n.showInfo());\r\n            piece.setOnMouseClicked(e->piece.showInfo());\r\n        }\r\n    }\r\n\r\n    private void addStoresToGrid() {\r\n\r\n        for (Store store: stores){\r\n            int x = store.getX();\r\n            int y = store.getY();\r\n            Piece piece = new Piece(store);\r\n            Tile n = (Tile) getNodeByRowColumnIndex(y-1,x-1, grid);\r\n            piece.setOnMouseClicked(e->piece.showInfo());\r\n\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"Piece.fxml\"));\r\n            n.getChildren().add(piece);\r\n\r\n            //n.setFill(Color.RED);\r\n        }\r\n    }\r\n\r\n    public Node getNodeByRowColumnIndex (final int row, final int column, GridPane gridPane) {\r\n        Node result = null;\r\n        ObservableList<Node> childrens = gridPane.getChildren();\r\n        boolean isFound = false;\r\n\r\n        for (Node node : childrens) {\r\n            if(gridPane.getRowIndex(node) == row && gridPane.getColumnIndex(node) == column) {\r\n                result = node;\r\n                isFound = true;\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (isFound)\r\n            System.out.println(\"Found store at (\"+(column+1) + \", \" + (row+1) +\")!\");\r\n        else\r\n            System.out.println(\"didn't find it ):\");\r\n\r\n        return result;\r\n    }\r\n\r\n\r\n\r\n\r\n    //This method updates maxXValue and maxYValue if there are positions in input list that are larger than current max values\r\n    public void updateMaxXandY(List<? extends hasLocationInterface> listToGoThrough){\r\n        for (hasLocationInterface obj: listToGoThrough){\r\n            if (obj.getX() > maxXValue){\r\n                maxXValue = obj.getX();\r\n                System.out.println(\"maxXValue was changed to \" + maxXValue + \"!\");\r\n            }\r\n            if (obj.getY() > maxYValue){\r\n                maxYValue = obj.getY();\r\n                System.out.println(\"maxYValue was changed to \" + maxYValue + \"!\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    public void prepareMap(){\r\n\r\n        for (int y=0; y < maxYValue+1; y++){\r\n            for (int x = 0; x < maxXValue+1; x++){\r\n                Tile tile = new Tile(x,y);\r\n\r\n\r\n                //board[x][y]=tile;\r\n\r\n                GridPane.setRowIndex(tile, y);\r\n                GridPane.setColumnIndex(tile, x);\r\n                grid.getChildren().add(tile);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/ViewMapController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/ViewMapController.java	(date 1601046324224)
@@ -1,9 +1,11 @@
-package components.ViewInfo.ViewMap;
+package components.ViewInfo.ViewMap.MapBackup;
 
 import Logic.Customers.Customer;
 import Logic.SDM.SDMManager;
 import Logic.Store.Store;
 import Logic.Interfaces.hasLocationInterface;
+import components.ViewInfo.ViewMap.MapBackup.Piece;
+import components.ViewInfo.ViewMap.MapBackup.Tile;
 import javafx.beans.property.ObjectProperty;
 import javafx.collections.ObservableList;
 import javafx.fxml.FXMLLoader;
@@ -16,7 +18,6 @@
 import javafx.scene.layout.GridPane;
 import javafx.scene.paint.Color;
 import javafx.fxml.FXML;
-import javafx.scene.shape.Rectangle;
 
 import java.net.URL;
 import java.util.List;
@@ -51,9 +52,6 @@
 
 public class ViewMapController implements Initializable {
 
-//    @FXML
-//    private GridPane gridpane;
-
     @FXML
     private AnchorPane scrollpChildAnchorPane;
     @FXML
@@ -97,6 +95,7 @@
         WIDTH = maxYValue;
         HEIGHT = maxXValue;
         grid = new GridPane();
+        grid.setGridLinesVisible(true);
     }
 
     @Override
@@ -123,17 +122,24 @@
     }
 
     private void createBoard() {
+
         for (int row = 0; row < maxYValue; row++) {
             for (int col = 0; col < maxXValue; col++) {
                 Tile tile = new Tile(col, row);
-                Color color;
-                if ((row + col) % 2 == 0) color = Color.WHITE;
-                else color = Color.BLACK;
-                tile.setFill(color);
+                Color color = Color.CORAL;
+                AnchorPane anchorPane = new AnchorPane();
+                anchorPane.getChildren().add(tile);
+                AnchorPane.setTopAnchor(tile,0.0);
+                AnchorPane.setRightAnchor(tile,0.0);
+                AnchorPane.setLeftAnchor(tile,0.0);
+                AnchorPane.setBottomAnchor(tile,0.0);
+//                if ((row + col) % 2 == 0) color = Color.WHITE;
+//                else color = Color.BLACK;
+                //tile.setFill(color);
 
-                grid.add(tile, col, row);
-                tile.getRectangle().widthProperty().bind(grid.widthProperty().divide(ELEMENT_SIZE));
-                tile.getRectangle().heightProperty().bind(grid.heightProperty().divide(ELEMENT_SIZE));
+                grid.add(anchorPane, col, row);
+                //tile.getRectangle().widthProperty().bind(grid.widthProperty().divide(ELEMENT_SIZE));
+                //tile.getRectangle().heightProperty().bind(grid.heightProperty().divide(ELEMENT_SIZE));
             }
         }
     }
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/ViewMap.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.ScrollPane?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.layout.Pane?>\r\n\r\n<Pane fx:id=\"root\" prefHeight=\"418.0\" prefWidth=\"702.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.ViewInfo.ViewMap.ViewMapController\">\r\n   <children>\r\n      <ScrollPane fx:id=\"scrollp\" fitToHeight=\"true\" fitToWidth=\"true\" prefHeight=\"418.0\" prefWidth=\"702.0\">\r\n        <content>\r\n          <AnchorPane fx:id=\"scrollpChildAnchorPane\" minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"482.0\" prefWidth=\"700.0\" />\r\n        </content>\r\n      </ScrollPane>\r\n   </children>\r\n</Pane>\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/ViewMap.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/ViewMap.fxml	(date 1601046324226)
@@ -4,7 +4,7 @@
 <?import javafx.scene.layout.AnchorPane?>
 <?import javafx.scene.layout.Pane?>
 
-<Pane fx:id="root" prefHeight="418.0" prefWidth="702.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.ViewMapController">
+<Pane fx:id="root" prefHeight="418.0" prefWidth="702.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapBackup.ViewMapController">
    <children>
       <ScrollPane fx:id="scrollp" fitToHeight="true" fitToWidth="true" prefHeight="418.0" prefWidth="702.0">
         <content>
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Tile.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo.ViewMap;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Store.Store;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class Tile extends StackPane {\r\n\r\n    private Piece piece;\r\n    private Rectangle rectangle;\r\n\r\n    public Tile(int x, int y){\r\n        rectangle = new Rectangle();\r\n        rectangle.setWidth(ViewMapController.WIDTH);\r\n        rectangle.setHeight(ViewMapController.HEIGHT);\r\n\r\n        relocate(x*ViewMapController.TILE_SIZE, y*ViewMapController.TILE_SIZE);\r\n        rectangle.setFill(Color.CORAL);\r\n        getChildren().add(rectangle);\r\n    }\r\n\r\n    public boolean hasPiece(){\r\n        return piece!= null;\r\n    }\r\n\r\n    public Piece getPiece() {\r\n        return piece;\r\n    }\r\n\r\n    public void setPiece(Piece piece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    public Rectangle getRectangle() {\r\n        return rectangle;\r\n    }\r\n\r\n    public void setRectangle(Rectangle rectangle) {\r\n        this.rectangle = rectangle;\r\n    }\r\n\r\n    public void setFill(Color color) {\r\n        rectangle.setFill(color);\r\n    }\r\n\r\n    public void showInfo(){\r\n        if (piece == null){\r\n            System.out.println(\"Piece is empty!\");\r\n        } else{\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader();\r\n                loader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/SuccessOrError/SuccessPopUp.fxml\"));\r\n                Parent root = null;\r\n                BasicInfoPopupController controller = loader.getController();\r\n                root = loader.load();\r\n                if (piece.getObj().getClass().equals(Store.class)){\r\n                    Store store = (Store) piece.getObj();\r\n                    controller.setStoreInfo(store);\r\n\r\n                } else if (piece.getObj().getClass().equals(Customer.class)){\r\n                    Customer customer = (Customer) piece.getObj();\r\n                    controller.setCustomerInfo(customer);\r\n                }\r\n\r\n                Stage stage = new Stage();\r\n\r\n                stage.setScene(new Scene(root));\r\n                stage.initModality(Modality.APPLICATION_MODAL);\r\n                stage.showAndWait();\r\n\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n\r\n        }\r\n    }\r\n}\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Tile.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/Tile.java	(date 1601046324227)
@@ -1,4 +1,4 @@
-package components.ViewInfo.ViewMap;
+package components.ViewInfo.ViewMap.MapBackup;
 
 import Logic.Customers.Customer;
 import Logic.Store.Store;
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/PieceController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo.ViewMap;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Store.Store;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Ellipse;\r\n\r\nimport static components.ViewInfo.ViewMap.ViewMapController.TILE_SIZE;\r\n\r\n\r\npublic class PieceController {\r\n    @FXML\r\n    private StackPane stackpane;\r\n\r\n    @FXML\r\n    private ImageView image;\r\n\r\n    private String basicInfo;\r\n\r\n    public PieceController(Object obj){\r\n        StringBuilder sb = new StringBuilder();\r\n\r\n        if (obj.getClass().equals(Store.class)){\r\n            Image imageObj = new Image(\"/resources/storecute.png\");\r\n            image = new ImageView(imageObj);\r\n            Store store = (Store)obj;\r\n            System.out.println(\"I see you passed in a store!\");\r\n            sb.append(\"Store id: \" + store.getStoreName())\r\n                    .append(\"\\nStore name: \" + store.getStoreName())\r\n                    .append(\"\\nNumber of orders: \" + store.getStoreOrders().size());\r\n            basicInfo = sb.toString();\r\n\r\n        } else if (obj.getClass().equals(Customer.class)){\r\n            System.out.println(\"I see you passed a customer!\");\r\n            Image imageObj = new Image(\"/resources/person.png\");\r\n            image = new ImageView(imageObj);\r\n\r\n            Customer customer = (Customer) obj;\r\n            System.out.println(\"I see you passed in a store!\");\r\n            sb.append(\"Store id: \" + customer.getCustomerId())\r\n                    .append(\"\\nStore name: \" + customer.getCustomerName())\r\n                    .append(\"\\nNumber of orders: \" + customer.getOrders().size());\r\n        } else{\r\n            System.out.println(\"What the hell did you pass!?\");\r\n        }\r\n    }\r\n\r\n}\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/PieceController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/PieceController.java	(date 1601046324240)
@@ -1,4 +1,4 @@
-package components.ViewInfo.ViewMap;
+package components.ViewInfo.ViewMap.MapBackup;
 
 import Logic.Customers.Customer;
 import Logic.Store.Store;
@@ -6,10 +6,6 @@
 import javafx.scene.image.ImageView;
 import javafx.scene.layout.StackPane;
 import javafx.fxml.FXML;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Ellipse;
-
-import static components.ViewInfo.ViewMap.ViewMapController.TILE_SIZE;
 
 
 public class PieceController {
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Piece.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo.ViewMap;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Store.Store;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Ellipse;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\n\r\nimport static components.ViewInfo.ViewMap.ViewMapController.TILE_SIZE;\r\n\r\npublic class Piece extends StackPane {\r\n    private Object obj;\r\n    private Class clazz;\r\n    private String basicInfo;\r\n    private ImageView image;\r\n\r\n    public Piece(Customer customer){\r\n        StringBuilder sb = new StringBuilder();\r\n        clazz = Customer.class;\r\n        obj = customer;\r\n\r\n        System.out.println(\"I see you passed a customer!\");\r\n        Image imageObj = new Image(\"/resources/person.png\");\r\n        clazz = Customer.class;\r\n        image = new ImageView(imageObj);\r\n        image.setFitHeight(ViewMapController.TILE_SIZE/2);\r\n        image.setFitWidth(ViewMapController.TILE_SIZE/2);\r\n\r\n\r\n        System.out.println(\"I see you passed in a store!\");\r\n        sb.append(\"Store id: \" + customer.getCustomerId())\r\n                .append(\"\\nStore name: \" + customer.getCustomerName())\r\n                .append(\"\\nNumber of orders: \" + customer.getOrders().size());\r\n\r\n        getChildren().add(image);\r\n    }\r\n\r\n    public Piece(Store store){\r\n        clazz = Store.class;\r\n        Image imageObj = new Image(\"/resources/storecute.png\");\r\n        image = new ImageView(imageObj);\r\n        obj = store;\r\n\r\n        StringBuilder sb = new StringBuilder();\r\n        image.setFitHeight(ViewMapController.TILE_SIZE/2);\r\n        image.setFitWidth(ViewMapController.TILE_SIZE/2);\r\n        System.out.println(\"I see you passed in a store!\");\r\n        sb.append(\"Store id: \" + store.getStoreName())\r\n                .append(\"\\nStore name: \" + store.getStoreName())\r\n                .append(\"\\nNumber of orders: \" + store.getStoreOrders().size());\r\n        basicInfo = sb.toString();\r\n        getChildren().add(image);\r\n    }\r\n\r\n\r\n    public Object getObj() {\r\n        return obj;\r\n    }\r\n\r\n    public void setObj(Object obj) {\r\n        this.obj = obj;\r\n    }\r\n\r\n    public String getBasicInfo() {\r\n        return basicInfo;\r\n    }\r\n\r\n    public void setBasicInfo(String basicInfo) {\r\n        this.basicInfo = basicInfo;\r\n    }\r\n\r\n    public ImageView getImage() {\r\n        return image;\r\n    }\r\n\r\n    public void setImage(ImageView image) {\r\n        this.image = image;\r\n    }\r\n\r\n\r\n    public void showInfo() {\r\n        try {\r\n            System.out.println(\"Yanna dabba\");\r\n            FXMLLoader loader = new FXMLLoader();\r\n            loader.setLocation(getClass().getResource(\"/components/ViewInfo/ViewMap/BasicInfoPopup.fxml\"));\r\n            Parent root = loader.load();\r\n            BasicInfoPopupController controller = loader.getController();\r\n            if (clazz.equals(Store.class)){\r\n                Store store = (Store) obj;\r\n                controller.setStoreInfo(store);\r\n\r\n            } else if (clazz.equals(Customer.class)){\r\n                Customer customer = (Customer) obj;\r\n                controller.setCustomerInfo(customer);\r\n            }\r\n\r\n            System.out.println(basicInfo);\r\n            Stage stage = new Stage();\r\n\r\n            stage.setScene(new Scene(root));\r\n            stage.initModality(Modality.APPLICATION_MODAL);\r\n            stage.showAndWait();\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Piece.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/Piece.java	(date 1601046324250)
@@ -1,4 +1,4 @@
-package components.ViewInfo.ViewMap;
+package components.ViewInfo.ViewMap.MapBackup;
 
 import Logic.Customers.Customer;
 import Logic.Store.Store;
@@ -8,15 +8,11 @@
 import javafx.scene.image.Image;
 import javafx.scene.image.ImageView;
 import javafx.scene.layout.StackPane;
-import javafx.scene.paint.Color;
-import javafx.scene.shape.Ellipse;
 import javafx.stage.Modality;
 import javafx.stage.Stage;
 
 import java.io.IOException;
 
-import static components.ViewInfo.ViewMap.ViewMapController.TILE_SIZE;
-
 public class Piece extends StackPane {
     private Object obj;
     private Class clazz;
@@ -91,7 +87,7 @@
         try {
             System.out.println("Yanna dabba");
             FXMLLoader loader = new FXMLLoader();
-            loader.setLocation(getClass().getResource("/components/ViewInfo/ViewMap/BasicInfoPopup.fxml"));
+            loader.setLocation(getClass().getResource("/components/ViewInfo/ViewMap/MapBackup/BasicInfoPopup.fxml"));
             Parent root = loader.load();
             BasicInfoPopupController controller = loader.getController();
             if (clazz.equals(Store.class)){
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Piece.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.StackPane?>\r\n\r\n<StackPane fx:id=\"stackpane\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.ViewInfo.ViewMap.PieceController\">\r\n   <children>\r\n      <ImageView fx:id=\"image\" fitHeight=\"261.0\" fitWidth=\"355.0\" pickOnBounds=\"true\" preserveRatio=\"true\" />\r\n   </children>\r\n</StackPane>\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Piece.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/Piece.fxml	(date 1601046324251)
@@ -3,7 +3,7 @@
 <?import javafx.scene.image.ImageView?>
 <?import javafx.scene.layout.StackPane?>
 
-<StackPane fx:id="stackpane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.PieceController">
+<StackPane fx:id="stackpane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapBackup.PieceController">
    <children>
       <ImageView fx:id="image" fitHeight="261.0" fitWidth="355.0" pickOnBounds="true" preserveRatio="true" />
    </children>
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/eObjectType.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo.ViewMap;\r\n\r\npublic enum eObjectType {\r\n    STORE, CUSTOMER, BLANK\r\n}\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/eObjectType.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/eObjectType.java	(date 1601046324211)
@@ -1,4 +1,4 @@
-package components.ViewInfo.ViewMap;
+package components.ViewInfo.ViewMap.MapBackup;
 
 public enum eObjectType {
     STORE, CUSTOMER, BLANK
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/BasicInfoPopupController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.ViewInfo.ViewMap;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Store.Store;\r\nimport javafx.fxml.FXML;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.stage.Stage;\r\n\r\n\r\npublic class BasicInfoPopupController {\r\n    @FXML\r\n    private GridPane root;\r\n\r\n    @FXML\r\n    private Label idLabel;\r\n\r\n    @FXML\r\n    private Label nameLabel;\r\n\r\n    @FXML\r\n    private Label ordersLabel;\r\n\r\n    @FXML\r\n    private Button okayButton;\r\n\r\n    @FXML\r\n    private Label idValueLabel;\r\n\r\n    @FXML\r\n    private Label nameValueLabel;\r\n\r\n    @FXML\r\n    private Label ordersValueLabel;\r\n\r\n    @FXML\r\n    private Label ppkLabel;\r\n\r\n    @FXML\r\n    private Label ppkValueLabel;\r\n\r\n    @FXML\r\n    void okayButtonAction(ActionEvent event) {\r\n        Stage stage = (Stage)root.getScene().getWindow();\r\n        stage.close();\r\n    }\r\n\r\n    public void setStoreInfo(Store store) {\r\n        idLabel.setText(\"Store Id:\");\r\n        idValueLabel.setText(String.valueOf(store.getStoreId()));\r\n        nameLabel.setText(\"Store name:\");\r\n        nameValueLabel.setText(store.getStoreName());\r\n        ordersLabel.setText(\"Number of orders:\");\r\n        ordersValueLabel.setText(String.valueOf(store.getStoreOrders().size()));\r\n        ppkLabel.setText(\"PPK:\");\r\n        ppkValueLabel.setText(String.valueOf(store.getDeliveryPpk()));\r\n    }\r\n\r\n    public void setCustomerInfo(Customer customer) {\r\n        idLabel.setText(\"Store Id:\");\r\n        idValueLabel.setText(String.valueOf(customer.getCustomerId()));\r\n        nameLabel.setText(\"Store name:\");\r\n        nameValueLabel.setText(customer.getCustomerName());\r\n        ordersLabel.setText(\"Number of orders:\");\r\n        //ordersValueLabel.setText(String.valueOf(store.getStoreOrders().size()));\r\n        ppkLabel.setVisible(false);\r\n        ppkValueLabel.setVisible(false);\r\n    }\r\n}\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/BasicInfoPopupController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/BasicInfoPopupController.java	(date 1601046324253)
@@ -1,4 +1,4 @@
-package components.ViewInfo.ViewMap;
+package components.ViewInfo.ViewMap.MapBackup;
 
 import Logic.Customers.Customer;
 import Logic.Store.Store;
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderContainerController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.PlaceAnOrderMain;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Order.Cart;\r\nimport Logic.Order.CartItem;\r\nimport Logic.Order.Order;\r\nimport Logic.Order.eOrderType;\r\nimport Logic.SDM.SDMManager;\r\nimport Logic.Store.Store;\r\nimport components.PlaceAnOrder.BasicInfo.OrderBasicInfoController;\r\nimport components.PlaceAnOrder.ChooseDiscounts.ChooseDiscountsController;\r\nimport components.PlaceAnOrder.ChooseItems.ChooseItemsStaticOrderController;\r\nimport components.PlaceAnOrder.ChooseItems.DynamicOrder.ChooseItemsDynamicOrderController;\r\nimport components.PlaceAnOrder.ChooseStores.ChooseStoreController;\r\nimport components.PlaceAnOrder.ConfirmOrder.ConfirmOrderController;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDate;\r\nimport java.time.ZoneId;\r\nimport java.util.*;\r\n\r\npublic class NewOrderContainerController implements Initializable {\r\n\r\n    @FXML\r\n    private Label titleLabel;\r\n\r\n    @FXML\r\n    private AnchorPane newOrderCurrentStep;\r\n\r\n    @FXML\r\n    private Button backButton;\r\n\r\n    @FXML\r\n    private Button nextButton;\r\n\r\n    @FXML\r\n    private Button confirmButton;\r\n\r\n    private Node basicInfoRef, chooseStoresRef, chooseItemsStaticOrderRef, chooseItemsDynamicRef, chooseDiscountsRef, confirmOrderRef, currentNode;\r\n    private OrderBasicInfoController basicInfoController;\r\n    private ChooseStoreController chooseStoreController;\r\n    private ChooseItemsStaticOrderController chooseItemsStaticOrderController;\r\n    private ChooseItemsDynamicOrderController chooseItemsDynamicController;\r\n    private ChooseDiscountsController chooseDiscountsController;\r\n    private ConfirmOrderController confirmOrderController;\r\n\r\n    private LocalDate orderDate;\r\n    private Customer customer;\r\n    private ObjectProperty<Customer> customerObjectProperty;\r\n    private ObjectProperty<LocalDate> dateObjectProperty;\r\n    private eOrderType orderType;\r\n    private Set<Store> setOfStores;\r\n    private Store selectedStore;\r\n    private Cart currentCart;\r\n    private HashMap<Store,Cart> mapStoresToCarts;\r\n    private float deliveryFee;\r\n\r\n    public NewOrderContainerController(){\r\n        currentCart = new Cart();\r\n        setOfStores = new HashSet<>();\r\n        customerObjectProperty = new SimpleObjectProperty<>();\r\n        dateObjectProperty = new SimpleObjectProperty<>();\r\n        mapStoresToCarts = new HashMap<>();\r\n\r\n        try {\r\n            //1. choose basic info (customer, order type, date)\r\n            FXMLLoader basicInfoLoader = new FXMLLoader();\r\n            basicInfoLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml\"));\r\n            basicInfoRef = basicInfoLoader.load();\r\n            basicInfoController = basicInfoLoader.getController();\r\n            this.customerObjectProperty.bind(basicInfoController.customerObjectPropertyProperty());\r\n            this.dateObjectProperty.bind(basicInfoController.dateObjectPropertyProperty());\r\n\r\n\r\n            //2. if static order, choose store\r\n            FXMLLoader staticOrderLoader = new FXMLLoader();\r\n            staticOrderLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ChooseStores/ChooseStore.fxml\"));\r\n            chooseStoresRef = staticOrderLoader.load();\r\n            chooseStoreController = staticOrderLoader.getController();\r\n\r\n            //3. choose items for cart\r\n            FXMLLoader chooseItemsLoader = new FXMLLoader();\r\n            chooseItemsLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ChooseItems/ChooseItems.fxml\"));\r\n            chooseItemsStaticOrderRef = chooseItemsLoader.load();\r\n            chooseItemsStaticOrderController = chooseItemsLoader.getController();\r\n\r\n            //currentCart = chooseItemsController.getDummyCart();\r\n\r\n\r\n            FXMLLoader chooseItemsDynamicLoader = new FXMLLoader();\r\n            chooseItemsDynamicLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ChooseItems/DynamicOrder/ChooseItemsDynamicOrder.fxml\"));\r\n            chooseItemsDynamicRef = chooseItemsDynamicLoader.load();\r\n            chooseItemsDynamicController = chooseItemsDynamicLoader.getController();\r\n\r\n\r\n\r\n            //4. choose discounts\r\n            FXMLLoader chooseDiscountsLoader = new FXMLLoader();\r\n            chooseDiscountsLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscounts.fxml\"));\r\n            chooseDiscountsRef = chooseDiscountsLoader.load();\r\n            chooseDiscountsController = chooseDiscountsLoader.getController();\r\n\r\n            FXMLLoader confirmOrderLoader = new FXMLLoader();\r\n            confirmOrderLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ConfirmOrder/ConfirmOrder.fxml\"));\r\n            confirmOrderRef = confirmOrderLoader.load();\r\n            confirmOrderController = confirmOrderLoader.getController();\r\n\r\n\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        currentNode = basicInfoRef;\r\n        backButton.setDisable(true);\r\n        confirmButton.setVisible(false);\r\n        confirmButton.setDisable(false);\r\n\r\n        setNodeForPane(basicInfoRef);\r\n\r\n    }\r\n\r\n    private void setNodeForPane(Node node) {\r\n        newOrderCurrentStep.getChildren().clear();\r\n        newOrderCurrentStep.getChildren().add(node);\r\n        AnchorPane.setBottomAnchor(node, 0.0);\r\n        AnchorPane.setLeftAnchor(node, 0.0);\r\n        AnchorPane.setRightAnchor(node, 0.0);\r\n        AnchorPane.setTopAnchor(node, 0.0);\r\n    }\r\n\r\n    @FXML\r\n    void onBackButtonAction(ActionEvent event) {\r\n        if (currentNode.equals(confirmOrderRef)){\r\n            confirmButton.setDisable(true);\r\n            nextButton.setDisable(false);\r\n            currentNode = basicInfoRef;\r\n            titleLabel.setText(\"Choose Discounts\");\r\n            setNodeForPane(chooseDiscountsRef);\r\n            return;\r\n        }\r\n\r\n        if (currentNode.equals(chooseDiscountsRef)){\r\n            titleLabel.setText(\"Choose Items\");\r\n            if (orderType == eOrderType.DYNAMIC_ORDER){\r\n                currentNode =chooseItemsDynamicRef;\r\n                setNodeForPane(chooseItemsDynamicRef);\r\n                return;\r\n            } else if (orderType == eOrderType.STATIC_ORDER){\r\n                currentNode = chooseItemsStaticOrderRef;\r\n                setNodeForPane(chooseItemsStaticOrderRef);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (currentNode.equals(chooseItemsStaticOrderRef)){\r\n            titleLabel.setText(\"Choose Store\");\r\n            currentNode = chooseStoresRef;\r\n            setNodeForPane(chooseStoresRef);\r\n            return;\r\n        }\r\n        if (currentNode.equals(chooseItemsDynamicRef)){\r\n            backButton.setDisable(true);\r\n            currentNode = basicInfoRef;\r\n            titleLabel.setText(\"Basic Info\");\r\n            setNodeForPane(basicInfoRef);\r\n            return;\r\n        }\r\n\r\n        if (currentNode.equals(chooseStoresRef)){\r\n            backButton.setDisable(true);\r\n            currentNode = basicInfoRef;\r\n            titleLabel.setText(\"Basic Info\");\r\n            setNodeForPane(basicInfoRef);\r\n            return;\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    void onConfirmButtonAction(ActionEvent event) {\r\n\r\n        if (orderType == eOrderType.STATIC_ORDER){\r\n            setOfStores.add(selectedStore);\r\n        }\r\n\r\n        ZoneId defaultZoneId = ZoneId.systemDefault();\r\n        Date date = Date.from(orderDate.atStartOfDay(defaultZoneId).toInstant());\r\n\r\n        String dateStr = new SimpleDateFormat(\"dd/MM\\tHH:mm\").format(date);\r\n        StringBuilder sb = new StringBuilder();\r\n        for (Store store: setOfStores){\r\n            sb.append(store.getStoreName());\r\n            sb.append(\", \");\r\n        }\r\n\r\n//\r\n//        System.out.printf(\"Order details: \" +\r\n//                \"\\n\\tCustomer: %s\" +\r\n//                \"\\n\\tDate: %s\" +\r\n//                \"\\n\\torderType: $%s\" +\r\n//                \"\\n\\tStore: \" +\r\n//                \"\\n\\tCart: %s\", customer.getCustomerName(),dateStr, orderType, sb.toString(), currentCart);\r\n\r\n        Order order = new Order(customer.getLocation(),\r\n                date,\r\n                6,\r\n                currentCart,\r\n                setOfStores,\r\n                orderType);\r\n\r\n        if (orderType==eOrderType.STATIC_ORDER)\r\n            SDMManager.getInstance().addNewStaticOrder(selectedStore, order);\r\n\r\n        if (orderType==eOrderType.DYNAMIC_ORDER)\r\n            SDMManager.getInstance().addNewDynamicOrder(mapStoresToCarts.keySet(), order);\r\n\r\n\r\n        resetInfo();\r\n\r\n        try {\r\n            Stage stage = new Stage();\r\n            Parent root = FXMLLoader.load(getClass().getResource(\"/components/PlaceAnOrder/SuccessOrError/SuccessPopUp.fxml\"));\r\n            stage.setScene(new Scene(root));\r\n            stage.initModality(Modality.APPLICATION_MODAL);\r\n            stage.showAndWait();\r\n\r\n\r\n            nextButton.setDisable(false);\r\n            confirmButton.setDisable(true);\r\n            confirmButton.setVisible(false);\r\n            currentNode = basicInfoRef;\r\n\r\n\r\n            titleLabel.setText(\"Basic Info\");\r\n            setNodeForPane(basicInfoRef);\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void resetInfo() {\r\n        if (orderType == eOrderType.STATIC_ORDER){\r\n            chooseStoreController.resetAllFields();\r\n            chooseItemsStaticOrderController.resetFields();\r\n        } else{\r\n            chooseItemsDynamicController.resetFields();\r\n        }\r\n        chooseDiscountsController.resetFields();\r\n\r\n        customer = null;\r\n        orderDate = null;\r\n        mapStoresToCarts.clear();\r\n        deliveryFee = 0;\r\n        selectedStore = null;\r\n\r\n    }\r\n\r\n    @FXML\r\n    void onNextButtonAction(ActionEvent event) {\r\n\r\n        if (checkIfCanContinue()){\r\n            getInformationFromCurrentPage();\r\n            openNextTitledPane();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void getInformationFromCurrentPage() {\r\n\r\n        if (currentNode.equals(chooseStoresRef)){\r\n            this.selectedStore = chooseStoreController.getSelectedStore();\r\n            deliveryFee = selectedStore.getDeliveryCost(customer.getLocation());\r\n            setOfStores.clear();\r\n            setOfStores.add(selectedStore);\r\n\r\n            System.out.println(\"chooseStoresRef returned: {selectedStore=\" + selectedStore + \", deliveryCost=\" +\r\n                    deliveryFee +\"}\");\r\n        }\r\n\r\n        if (currentNode.equals(chooseItemsStaticOrderRef)){\r\n            //this.currentCart = chooseItemsStaticOrderController.getDummyCart();\r\n            mapStoresToCarts.put(selectedStore,chooseItemsStaticOrderController.getDummyCart());\r\n//            System.out.println(\"chooseItemsRef returned: {currentCart=\" + currentCart +\"}\");\r\n        }\r\n\r\n        if (currentNode.equals(chooseItemsDynamicRef)){\r\n            this.mapStoresToCarts = chooseItemsDynamicController.getMapStoresToCarts();\r\n            deliveryFee = 0;\r\n            for (Store store: mapStoresToCarts.keySet()){\r\n                deliveryFee += store.getDeliveryCost(customer.getLocation());\r\n            }\r\n            System.out.println(\"chooseItemsDynamicRef returned: \" + mapStoresToCarts);\r\n\r\n        }\r\n\r\n        if (currentNode.equals(basicInfoRef)){\r\n            this.orderDate = basicInfoController.getOrderDate();\r\n            this.orderType = basicInfoController.getOrderType();\r\n            this.customer = basicInfoController.getSelectedCustomer();\r\n            System.out.println(\"basicInfoRef returned: {orderDate=\" +\r\n                    orderDate + \", orderType= \" + orderType +\", customer= \" + customer +\"}\");\r\n        }\r\n\r\n        if (currentNode.equals(chooseDiscountsRef)){\r\n            if (orderType == eOrderType.STATIC_ORDER){\r\n                HashMap<Integer, CartItem> discountItemsToAddToCart = chooseDiscountsController.getMapIdsToDiscountCartItems();\r\n                discountItemsToAddToCart.forEach((k,v)->{\r\n//                    currentCart.add(v);\r\n                    mapStoresToCarts.get(selectedStore).add(v);\r\n                });\r\n            }\r\n            if (orderType == eOrderType.DYNAMIC_ORDER){\r\n                HashMap<Store,HashMap<Integer,CartItem>> discountItemsToAdd = chooseDiscountsController.getMapIdsToDiscountCartItemsDynamic();\r\n\r\n                discountItemsToAdd.forEach((store,map)->{\r\n                    map.forEach((itemId,cartItem)->{\r\n                        mapStoresToCarts.get(store).add(cartItem);\r\n                    });\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private boolean checkIfCanContinue() {\r\n        if (currentNode.equals(basicInfoRef)){\r\n            if (basicInfoController.getDateObjectProperty()==null){\r\n                System.out.println(\"You must supply an Order date!\");\r\n                return false;\r\n            }\r\n        }\r\n        if (currentNode.equals(chooseStoresRef) && orderType == eOrderType.STATIC_ORDER){\r\n            if (chooseStoreController.getSelectedStore() == null){\r\n                System.out.println(\"You must select a store!\");\r\n                return false;\r\n            }\r\n        }\r\n        if (currentNode.equals(chooseItemsDynamicRef) && orderType == eOrderType.DYNAMIC_ORDER){\r\n            if (chooseItemsDynamicController.getMapStoresToCarts().size() == 0){\r\n                System.out.println(\"Did you order anything?\");\r\n                return false;\r\n            }\r\n        }\r\n        if (currentNode.equals(chooseItemsStaticOrderRef)){\r\n            if (chooseItemsStaticOrderController.getDummyCart().getCart().size()==0){\r\n                System.out.println(\"Cart can't be empty!\");\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private void openNextTitledPane() {\r\n\r\n        if (currentNode.equals(basicInfoRef)){\r\n            backButton.setDisable(false);\r\n            if (orderType == eOrderType.STATIC_ORDER) {\r\n                chooseStoreController.setCustomer(customer);\r\n                currentNode = chooseStoresRef;\r\n                titleLabel.setText(\"Choose Store\");\r\n                setNodeForPane(chooseStoresRef);\r\n                return;\r\n            }\r\n\r\n            if (orderType == eOrderType.DYNAMIC_ORDER) {\r\n                chooseItemsDynamicController.setCustomer(customer);\r\n\r\n\r\n                currentNode = chooseItemsDynamicRef;\r\n                titleLabel.setText(\"Choose Items - Dynamic Order\");\r\n                setNodeForPane(chooseItemsDynamicRef);\r\n                return;\r\n            }\r\n        }\r\n\r\n        if (currentNode.equals(chooseStoresRef)){\r\n            chooseItemsStaticOrderController.setDataForStaticOrder(selectedStore);\r\n            chooseItemsStaticOrderController.fillCustomerData(customer);\r\n            chooseItemsStaticOrderController.setDeliveryFeeProperty(deliveryFee);\r\n            currentNode = chooseItemsStaticOrderRef;\r\n            setNodeForPane(chooseItemsStaticOrderRef);\r\n            return;\r\n        }\r\n\r\n        if (currentNode.equals(chooseItemsStaticOrderRef)){\r\n            if (orderType == eOrderType.STATIC_ORDER){\r\n//                chooseDiscountsController.fillViewsBasedOnStoreAndCart(selectedStore, currentCart);\r\n                chooseDiscountsController.fillViewsBasedOnStoreAndCart(selectedStore, mapStoresToCarts.get(selectedStore));\r\n                chooseDiscountsController.fillCustomerLabels(customer);\r\n//                chooseDiscountsController.fillOrderLabels(currentCart.getCartTotalPrice(), deliveryFee);\r\n                chooseDiscountsController.fillOrderLabels(mapStoresToCarts.get(selectedStore).getCartTotalPrice(), deliveryFee);\r\n\r\n                titleLabel.setText(\"Choose Discounts\");\r\n                setNodeForPane(chooseDiscountsRef);\r\n                currentNode = chooseDiscountsRef;\r\n                return;\r\n            }\r\n        }\r\n        if (currentNode.equals(chooseItemsDynamicRef)){\r\n            chooseDiscountsController.fillViewsBasedOnDynamicOrder(mapStoresToCarts);\r\n            currentNode = chooseDiscountsRef;\r\n            titleLabel.setText(\"Choose Discounts\");\r\n            setNodeForPane(chooseDiscountsRef);\r\n            return;\r\n        }\r\n\r\n        if (currentNode.equals(chooseDiscountsRef)){\r\n\r\n            confirmOrderController.fillViews(customer, mapStoresToCarts);\r\n            currentNode = confirmOrderRef;\r\n            nextButton.setDisable(true);\r\n            confirmButton.setVisible(true);\r\n            confirmButton.setDisable(false);\r\n            setNodeForPane(confirmOrderRef);\r\n            titleLabel.setText(\"Confirm\");\r\n            return;\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderContainerController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/PlaceAnOrderMain/NewOrderContainerController.java	(date 1601046324084)
@@ -9,12 +9,11 @@
 import Logic.Store.Store;
 import components.PlaceAnOrder.BasicInfo.OrderBasicInfoController;
 import components.PlaceAnOrder.ChooseDiscounts.ChooseDiscountsController;
+import components.PlaceAnOrder.ChooseDiscounts.DynamicOrderDiscounts.DynamicDiscountsController;
 import components.PlaceAnOrder.ChooseItems.ChooseItemsStaticOrderController;
 import components.PlaceAnOrder.ChooseItems.DynamicOrder.ChooseItemsDynamicOrderController;
 import components.PlaceAnOrder.ChooseStores.ChooseStoreController;
 import components.PlaceAnOrder.ConfirmOrder.ConfirmOrderController;
-import javafx.beans.property.ObjectProperty;
-import javafx.beans.property.SimpleObjectProperty;
 import javafx.event.ActionEvent;
 import javafx.fxml.FXML;
 import javafx.fxml.FXMLLoader;
@@ -52,30 +51,27 @@
     @FXML
     private Button confirmButton;
 
-    private Node basicInfoRef, chooseStoresRef, chooseItemsStaticOrderRef, chooseItemsDynamicRef, chooseDiscountsRef, confirmOrderRef, currentNode;
+    private Node basicInfoRef, chooseStoresRef, chooseItemsStaticOrderRef, chooseItemsDynamicRef, chooseDiscountsRef, chooseDiscountsDynamicRef, confirmOrderRef, currentNode;
     private OrderBasicInfoController basicInfoController;
     private ChooseStoreController chooseStoreController;
     private ChooseItemsStaticOrderController chooseItemsStaticOrderController;
     private ChooseItemsDynamicOrderController chooseItemsDynamicController;
     private ChooseDiscountsController chooseDiscountsController;
+    private DynamicDiscountsController chooseDiscountsDynamicController;
     private ConfirmOrderController confirmOrderController;
 
     private LocalDate orderDate;
     private Customer customer;
-    private ObjectProperty<Customer> customerObjectProperty;
-    private ObjectProperty<LocalDate> dateObjectProperty;
     private eOrderType orderType;
-    private Set<Store> setOfStores;
     private Store selectedStore;
     private Cart currentCart;
     private HashMap<Store,Cart> mapStoresToCarts;
     private float deliveryFee;
+    private double regularItemsSubtotal;
+    private double discountItemsSubtotal;
 
     public NewOrderContainerController(){
         currentCart = new Cart();
-        setOfStores = new HashSet<>();
-        customerObjectProperty = new SimpleObjectProperty<>();
-        dateObjectProperty = new SimpleObjectProperty<>();
         mapStoresToCarts = new HashMap<>();
 
         try {
@@ -84,8 +80,7 @@
             basicInfoLoader.setLocation(getClass().getResource("/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml"));
             basicInfoRef = basicInfoLoader.load();
             basicInfoController = basicInfoLoader.getController();
-            this.customerObjectProperty.bind(basicInfoController.customerObjectPropertyProperty());
-            this.dateObjectProperty.bind(basicInfoController.dateObjectPropertyProperty());
+
 
 
             //2. if static order, choose store
@@ -116,6 +111,11 @@
             chooseDiscountsRef = chooseDiscountsLoader.load();
             chooseDiscountsController = chooseDiscountsLoader.getController();
 
+            FXMLLoader chooseDiscountsDynamicLoader = new FXMLLoader();
+            chooseDiscountsDynamicLoader.setLocation(getClass().getResource("/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml"));
+            chooseDiscountsDynamicRef = chooseDiscountsDynamicLoader.load();
+            chooseDiscountsDynamicController = chooseDiscountsDynamicLoader.getController();
+
             FXMLLoader confirmOrderLoader = new FXMLLoader();
             confirmOrderLoader.setLocation(getClass().getResource("/components/PlaceAnOrder/ConfirmOrder/ConfirmOrder.fxml"));
             confirmOrderRef = confirmOrderLoader.load();
@@ -138,9 +138,7 @@
         backButton.setDisable(true);
         confirmButton.setVisible(false);
         confirmButton.setDisable(false);
-
         setNodeForPane(basicInfoRef);
-
     }
 
     private void setNodeForPane(Node node) {
@@ -150,6 +148,154 @@
         AnchorPane.setLeftAnchor(node, 0.0);
         AnchorPane.setRightAnchor(node, 0.0);
         AnchorPane.setTopAnchor(node, 0.0);
+        currentNode = node;
+        setTitleLabel();
+    }
+
+    private void setTitleLabel() {
+        if (currentNode == basicInfoRef){
+            System.out.println("Current node is basicInfo!");
+            titleLabel.setText("Basic Order Info");
+        }
+        if (currentNode == chooseStoresRef){
+            System.out.println("Current node is chooseStores!");
+            titleLabel.setText("Choose Stores");
+        }
+        if (currentNode.equals(chooseItemsStaticOrderRef)){
+            System.out.println("Current node is chooseItemsStatic - and used .equals() this time!");
+            titleLabel.setText("Choose Items");
+        }
+        if (currentNode.equals(chooseItemsDynamicRef)){
+            System.out.println("Current node is chooseItemsStatic - and used .equals() this time!");
+            titleLabel.setText("Choose Items DYNAMICALLY");
+        }
+        if (currentNode.equals(chooseDiscountsRef)){
+            titleLabel.setText("Choose Discounts");
+        }
+        if (currentNode.equals(chooseDiscountsDynamicRef)){
+            titleLabel.setText("Choose Discounts DYNAMICALLY");
+        }
+        if (currentNode.equals(confirmOrderRef)){
+            titleLabel.setText("Confirm Order");
+        }
+    }
+
+    @FXML
+    void onNextButtonAction(ActionEvent event) {
+        if (checkIfCanContinue()){
+            getInformationFromCurrentPage();
+            openNextTitledPane();
+        }
+    }
+
+
+
+    private void getInformationFromCurrentPage() {
+        if (currentNode.equals(basicInfoRef)){
+            this.orderDate = basicInfoController.getOrderDate();
+            this.orderType = basicInfoController.getOrderType();
+            this.customer = basicInfoController.getSelectedCustomer();
+            System.out.println("basicInfoRef returned: {orderDate=" + orderDate + ", orderType= " + orderType +", customer= " + customer +"}");
+        }
+
+        if (currentNode.equals(chooseStoresRef)){
+            this.selectedStore = chooseStoreController.getSelectedStore();
+            mapStoresToCarts.put(selectedStore, new Cart());
+            deliveryFee = selectedStore.getDeliveryCost(customer.getLocation());
+            System.out.println("chooseStoresRef returned: {selectedStore=" + selectedStore + ", deliveryCost=" + deliveryFee +"}");
+        }
+
+        if (currentNode.equals(chooseItemsStaticOrderRef)){
+            mapStoresToCarts = chooseItemsStaticOrderController.getMapStoreToCart();
+            regularItemsSubtotal = chooseItemsStaticOrderController.getCartSubtotal();
+        }
+
+        if (currentNode.equals(chooseItemsDynamicRef)){
+            mapStoresToCarts = chooseItemsDynamicController.getMapStoresToCarts();
+            regularItemsSubtotal = chooseItemsDynamicController.getCartsSubtotal();
+            deliveryFee = chooseItemsDynamicController.getDeliveryFeeTotal();
+            System.out.println("chooseItemsDynamicRef returned: " + mapStoresToCarts);
+        }
+
+        if (currentNode.equals(chooseDiscountsRef)){
+            discountItemsSubtotal = chooseDiscountsController.getDiscountsSubtotal();
+            HashMap<Integer, CartItem> discountItemsToAddToCart = chooseDiscountsController.getMapIdsToDiscountCartItems();
+            discountItemsToAddToCart.forEach((k,v)->{
+                mapStoresToCarts.get(selectedStore).add(v);
+            });
+        }
+
+        if (currentNode.equals(chooseDiscountsDynamicRef)){
+            discountItemsSubtotal = chooseDiscountsDynamicController.getDiscountsSubtotal();
+            HashMap<Store,HashMap<Integer,CartItem>> discountItemsToAdd = chooseDiscountsDynamicController.getMapIdsToDiscountCartItemsDynamic();
+            discountItemsToAdd.forEach((store,map)->{
+                map.forEach((itemId,cartItem)->{
+                    mapStoresToCarts.get(store).add(cartItem);
+                });
+            });
+        }
+    }
+
+    private boolean checkIfCanContinue() {
+        if (currentNode.equals(basicInfoRef)){
+            return basicInfoController.hasNecessaryInformation();
+        }
+        if (currentNode.equals(chooseStoresRef)){
+            return chooseStoreController.hasNecessaryInformation();
+        }
+        if (currentNode.equals(chooseItemsStaticOrderRef)){
+            return chooseItemsStaticOrderController.hasNecessaryInformation();
+        }
+        if (currentNode.equals(chooseItemsDynamicRef)){
+            return chooseItemsDynamicController.hasNecessaryInformation();
+        }
+        return true;
+    }
+
+    private void openNextTitledPane() {
+
+        if (currentNode.equals(basicInfoRef)){
+            backButton.setDisable(false);
+            if (orderType == eOrderType.STATIC_ORDER) {
+                chooseStoreController.setCustomer(customer);
+                setNodeForPane(chooseStoresRef);
+                return;
+            }
+
+            if (orderType == eOrderType.DYNAMIC_ORDER) {
+                chooseItemsDynamicController.setCustomer(customer);
+                setNodeForPane(chooseItemsDynamicRef);
+                return;
+            }
+        }
+
+        if (currentNode.equals(chooseStoresRef)){
+            chooseItemsStaticOrderController.setDataForStaticOrder(selectedStore);
+            chooseItemsStaticOrderController.fillCustomerData(customer);
+            chooseItemsStaticOrderController.setDeliveryFeeProperty(deliveryFee);
+            setNodeForPane(chooseItemsStaticOrderRef);
+            return;
+        }
+
+        if (currentNode.equals(chooseItemsStaticOrderRef)){
+            chooseDiscountsController.fillViewsForStaticOrder(customer, selectedStore, mapStoresToCarts.get(selectedStore),deliveryFee,regularItemsSubtotal);
+            setNodeForPane(chooseDiscountsRef);
+            return;
+        }
+        if (currentNode.equals(chooseItemsDynamicRef)){
+            chooseDiscountsDynamicController.fillViewsBasedOnDynamicOrder(mapStoresToCarts, deliveryFee, regularItemsSubtotal);
+            setNodeForPane(chooseDiscountsDynamicRef);
+            return;
+        }
+
+        if (currentNode.equals(chooseDiscountsRef) || currentNode.equals(chooseDiscountsDynamicRef)){
+            confirmOrderController.fillViews(customer, mapStoresToCarts, orderDate);
+            nextButton.setDisable(true);
+            confirmButton.setVisible(true);
+            confirmButton.setDisable(false);
+            setNodeForPane(confirmOrderRef);
+            return;
+        }
     }
 
     @FXML
@@ -157,43 +303,31 @@
         if (currentNode.equals(confirmOrderRef)){
             confirmButton.setDisable(true);
             nextButton.setDisable(false);
-            currentNode = basicInfoRef;
-            titleLabel.setText("Choose Discounts");
+            //titleLabel.setText("Choose Discounts");
             setNodeForPane(chooseDiscountsRef);
             return;
         }
 
         if (currentNode.equals(chooseDiscountsRef)){
-            titleLabel.setText("Choose Items");
-            if (orderType == eOrderType.DYNAMIC_ORDER){
-                currentNode =chooseItemsDynamicRef;
-                setNodeForPane(chooseItemsDynamicRef);
-                return;
-            } else if (orderType == eOrderType.STATIC_ORDER){
-                currentNode = chooseItemsStaticOrderRef;
-                setNodeForPane(chooseItemsStaticOrderRef);
-                return;
-            }
+            setNodeForPane(chooseItemsStaticOrderRef);
+            return;
+        }
+        if (currentNode.equals(chooseDiscountsDynamicRef)){
+            setNodeForPane(chooseItemsDynamicRef);
+            return;
         }
-
         if (currentNode.equals(chooseItemsStaticOrderRef)){
-            titleLabel.setText("Choose Store");
-            currentNode = chooseStoresRef;
             setNodeForPane(chooseStoresRef);
             return;
         }
         if (currentNode.equals(chooseItemsDynamicRef)){
             backButton.setDisable(true);
-            currentNode = basicInfoRef;
-            titleLabel.setText("Basic Info");
             setNodeForPane(basicInfoRef);
             return;
         }
 
         if (currentNode.equals(chooseStoresRef)){
             backButton.setDisable(true);
-            currentNode = basicInfoRef;
-            titleLabel.setText("Basic Info");
             setNodeForPane(basicInfoRef);
             return;
         }
@@ -202,33 +336,17 @@
     @FXML
     void onConfirmButtonAction(ActionEvent event) {
 
-        if (orderType == eOrderType.STATIC_ORDER){
-            setOfStores.add(selectedStore);
-        }
-
         ZoneId defaultZoneId = ZoneId.systemDefault();
         Date date = Date.from(orderDate.atStartOfDay(defaultZoneId).toInstant());
 
         String dateStr = new SimpleDateFormat("dd/MM\tHH:mm").format(date);
-        StringBuilder sb = new StringBuilder();
-        for (Store store: setOfStores){
-            sb.append(store.getStoreName());
-            sb.append(", ");
-        }
 
-//
-//        System.out.printf("Order details: " +
-//                "\n\tCustomer: %s" +
-//                "\n\tDate: %s" +
-//                "\n\torderType: $%s" +
-//                "\n\tStore: " +
-//                "\n\tCart: %s", customer.getCustomerName(),dateStr, orderType, sb.toString(), currentCart);
 
         Order order = new Order(customer.getLocation(),
                 date,
                 6,
                 currentCart,
-                setOfStores,
+                mapStoresToCarts.keySet(),
                 orderType);
 
         if (orderType==eOrderType.STATIC_ORDER)
@@ -253,7 +371,6 @@
             confirmButton.setVisible(false);
             currentNode = basicInfoRef;
 
-
             titleLabel.setText("Basic Info");
             setNodeForPane(basicInfoRef);
         } catch (IOException e) {
@@ -262,6 +379,8 @@
     }
 
     private void resetInfo() {
+        basicInfoController.resetAllFields();
+
         if (orderType == eOrderType.STATIC_ORDER){
             chooseStoreController.resetAllFields();
             chooseItemsStaticOrderController.resetFields();
@@ -278,166 +397,5 @@
 
     }
 
-    @FXML
-    void onNextButtonAction(ActionEvent event) {
-
-        if (checkIfCanContinue()){
-            getInformationFromCurrentPage();
-            openNextTitledPane();
-        }
-    }
-
-
-
-    private void getInformationFromCurrentPage() {
-
-        if (currentNode.equals(chooseStoresRef)){
-            this.selectedStore = chooseStoreController.getSelectedStore();
-            deliveryFee = selectedStore.getDeliveryCost(customer.getLocation());
-            setOfStores.clear();
-            setOfStores.add(selectedStore);
-
-            System.out.println("chooseStoresRef returned: {selectedStore=" + selectedStore + ", deliveryCost=" +
-                    deliveryFee +"}");
-        }
-
-        if (currentNode.equals(chooseItemsStaticOrderRef)){
-            //this.currentCart = chooseItemsStaticOrderController.getDummyCart();
-            mapStoresToCarts.put(selectedStore,chooseItemsStaticOrderController.getDummyCart());
-//            System.out.println("chooseItemsRef returned: {currentCart=" + currentCart +"}");
-        }
-
-        if (currentNode.equals(chooseItemsDynamicRef)){
-            this.mapStoresToCarts = chooseItemsDynamicController.getMapStoresToCarts();
-            deliveryFee = 0;
-            for (Store store: mapStoresToCarts.keySet()){
-                deliveryFee += store.getDeliveryCost(customer.getLocation());
-            }
-            System.out.println("chooseItemsDynamicRef returned: " + mapStoresToCarts);
-
-        }
-
-        if (currentNode.equals(basicInfoRef)){
-            this.orderDate = basicInfoController.getOrderDate();
-            this.orderType = basicInfoController.getOrderType();
-            this.customer = basicInfoController.getSelectedCustomer();
-            System.out.println("basicInfoRef returned: {orderDate=" +
-                    orderDate + ", orderType= " + orderType +", customer= " + customer +"}");
-        }
-
-        if (currentNode.equals(chooseDiscountsRef)){
-            if (orderType == eOrderType.STATIC_ORDER){
-                HashMap<Integer, CartItem> discountItemsToAddToCart = chooseDiscountsController.getMapIdsToDiscountCartItems();
-                discountItemsToAddToCart.forEach((k,v)->{
-//                    currentCart.add(v);
-                    mapStoresToCarts.get(selectedStore).add(v);
-                });
-            }
-            if (orderType == eOrderType.DYNAMIC_ORDER){
-                HashMap<Store,HashMap<Integer,CartItem>> discountItemsToAdd = chooseDiscountsController.getMapIdsToDiscountCartItemsDynamic();
-
-                discountItemsToAdd.forEach((store,map)->{
-                    map.forEach((itemId,cartItem)->{
-                        mapStoresToCarts.get(store).add(cartItem);
-                    });
-                });
-            }
-        }
-    }
-
-    private boolean checkIfCanContinue() {
-        if (currentNode.equals(basicInfoRef)){
-            if (basicInfoController.getDateObjectProperty()==null){
-                System.out.println("You must supply an Order date!");
-                return false;
-            }
-        }
-        if (currentNode.equals(chooseStoresRef) && orderType == eOrderType.STATIC_ORDER){
-            if (chooseStoreController.getSelectedStore() == null){
-                System.out.println("You must select a store!");
-                return false;
-            }
-        }
-        if (currentNode.equals(chooseItemsDynamicRef) && orderType == eOrderType.DYNAMIC_ORDER){
-            if (chooseItemsDynamicController.getMapStoresToCarts().size() == 0){
-                System.out.println("Did you order anything?");
-                return false;
-            }
-        }
-        if (currentNode.equals(chooseItemsStaticOrderRef)){
-            if (chooseItemsStaticOrderController.getDummyCart().getCart().size()==0){
-                System.out.println("Cart can't be empty!");
-                return false;
-            }
-        }
-        return true;
-    }
-
-    private void openNextTitledPane() {
-
-        if (currentNode.equals(basicInfoRef)){
-            backButton.setDisable(false);
-            if (orderType == eOrderType.STATIC_ORDER) {
-                chooseStoreController.setCustomer(customer);
-                currentNode = chooseStoresRef;
-                titleLabel.setText("Choose Store");
-                setNodeForPane(chooseStoresRef);
-                return;
-            }
-
-            if (orderType == eOrderType.DYNAMIC_ORDER) {
-                chooseItemsDynamicController.setCustomer(customer);
-
-
-                currentNode = chooseItemsDynamicRef;
-                titleLabel.setText("Choose Items - Dynamic Order");
-                setNodeForPane(chooseItemsDynamicRef);
-                return;
-            }
-        }
-
-        if (currentNode.equals(chooseStoresRef)){
-            chooseItemsStaticOrderController.setDataForStaticOrder(selectedStore);
-            chooseItemsStaticOrderController.fillCustomerData(customer);
-            chooseItemsStaticOrderController.setDeliveryFeeProperty(deliveryFee);
-            currentNode = chooseItemsStaticOrderRef;
-            setNodeForPane(chooseItemsStaticOrderRef);
-            return;
-        }
-
-        if (currentNode.equals(chooseItemsStaticOrderRef)){
-            if (orderType == eOrderType.STATIC_ORDER){
-//                chooseDiscountsController.fillViewsBasedOnStoreAndCart(selectedStore, currentCart);
-                chooseDiscountsController.fillViewsBasedOnStoreAndCart(selectedStore, mapStoresToCarts.get(selectedStore));
-                chooseDiscountsController.fillCustomerLabels(customer);
-//                chooseDiscountsController.fillOrderLabels(currentCart.getCartTotalPrice(), deliveryFee);
-                chooseDiscountsController.fillOrderLabels(mapStoresToCarts.get(selectedStore).getCartTotalPrice(), deliveryFee);
-
-                titleLabel.setText("Choose Discounts");
-                setNodeForPane(chooseDiscountsRef);
-                currentNode = chooseDiscountsRef;
-                return;
-            }
-        }
-        if (currentNode.equals(chooseItemsDynamicRef)){
-            chooseDiscountsController.fillViewsBasedOnDynamicOrder(mapStoresToCarts);
-            currentNode = chooseDiscountsRef;
-            titleLabel.setText("Choose Discounts");
-            setNodeForPane(chooseDiscountsRef);
-            return;
-        }
-
-        if (currentNode.equals(chooseDiscountsRef)){
-
-            confirmOrderController.fillViews(customer, mapStoresToCarts);
-            currentNode = confirmOrderRef;
-            nextButton.setDisable(true);
-            confirmButton.setVisible(true);
-            confirmButton.setDisable(false);
-            setNodeForPane(confirmOrderRef);
-            titleLabel.setText("Confirm");
-            return;
-        }
-    }
 
 }
Index: out/production/SDM_Targil2/components/ViewInfo/ViewMap/BasicInfoPopup.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.ColumnConstraints?>\r\n<?import javafx.scene.layout.GridPane?>\r\n<?import javafx.scene.layout.RowConstraints?>\r\n\r\n<GridPane fx:id=\"root\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.ViewInfo.ViewMap.BasicInfoPopupController\">\r\n  <columnConstraints>\r\n    <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n    <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n  </columnConstraints>\r\n  <rowConstraints>\r\n    <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n    <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n    <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n      <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n      <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n  </rowConstraints>\r\n   <children>\r\n      <Label fx:id=\"idLabel\" text=\"Label\" />\r\n      <Label fx:id=\"nameLabel\" text=\"Label\" GridPane.rowIndex=\"1\" />\r\n      <Label fx:id=\"ordersLabel\" text=\"Label\" GridPane.rowIndex=\"2\" />\r\n      <Button fx:id=\"okayButton\" mnemonicParsing=\"false\" onAction=\"#okayButtonAction\" text=\"Button\" GridPane.columnSpan=\"2\" GridPane.halignment=\"CENTER\" GridPane.rowIndex=\"4\" />\r\n      <Label fx:id=\"idValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" />\r\n      <Label fx:id=\"nameValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\" />\r\n      <Label fx:id=\"ordersValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"2\" />\r\n      <Label fx:id=\"ppkLabel\" text=\"Label\" GridPane.rowIndex=\"3\" />\r\n      <Label fx:id=\"ppkValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\" />\r\n   </children>\r\n</GridPane>\r\n
===================================================================
--- out/production/SDM_Targil2/components/ViewInfo/ViewMap/BasicInfoPopup.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapBackup/BasicInfoPopup.fxml	(date 1601046324254)
@@ -6,7 +6,7 @@
 <?import javafx.scene.layout.GridPane?>
 <?import javafx.scene.layout.RowConstraints?>
 
-<GridPane fx:id="root" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.BasicInfoPopupController">
+<GridPane fx:id="root" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapBackup.BasicInfoPopupController">
   <columnConstraints>
     <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
     <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapController.java	(date 1601046324099)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/MapController.java	(date 1601046324099)
@@ -0,0 +1,163 @@
+package components.ViewInfo.ViewMap;
+
+import Logic.Customers.Customer;
+import Logic.Interfaces.hasLocationInterface;
+import Logic.SDM.SDMManager;
+import Logic.Store.Store;
+import javafx.fxml.Initializable;
+import javafx.scene.control.Cell;
+import javafx.scene.control.Label;
+import javafx.fxml.FXML;
+import javafx.scene.layout.AnchorPane;
+import javafx.scene.layout.BorderPane;
+import javafx.scene.layout.GridPane;
+import javafx.scene.layout.Pane;
+import javafx.scene.paint.Color;
+import javafx.scene.shape.Ellipse;
+import javafx.scene.shape.Line;
+
+import java.net.URL;
+import java.util.List;
+import java.util.ResourceBundle;
+
+public class MapController implements Initializable {
+
+    @FXML
+    private AnchorPane mapAnchorPane;
+    @FXML
+    private Label statusMsg;
+
+
+    private List<Customer> customers;
+    private List<Store> stores;
+    private int maxXValue;
+    private int maxYValue;
+
+    private static final double ELEMENT_SIZE = 100;
+    private static final double GAP = ELEMENT_SIZE / 10;
+    private int BOARDSIZE;
+    private Cell[][] cell;
+    private GridPane pane;
+    private BorderPane borderPane;
+
+    public MapController(){
+        pane = new GridPane();
+        maxXValue = 0;
+        maxYValue = 0;
+        customers = SDMManager.getInstance().getCustomers().getCustomers();
+        stores = SDMManager.getInstance().getStores();
+        updateMaxXandY(customers);
+        updateMaxXandY(stores);
+        this.BOARDSIZE = (maxXValue>maxYValue)? maxXValue:maxYValue;
+        cell = new Cell[BOARDSIZE+1][BOARDSIZE+1];
+//        WIDTH = maxYValue;
+//        HEIGHT = maxXValue;
+    }
+
+    @Override
+    public void initialize(URL location, ResourceBundle resources) {
+        statusMsg.setText("Nothing to see...");
+
+        for (int i=0; i<=BOARDSIZE; i++){
+            for (int j=0; j<=BOARDSIZE;j++){
+                cell[i][j] = new Cell(i,j);
+                pane.add(cell[i][j],j,i);
+            }
+        }
+//        borderPane = new BorderPane();
+//        borderPane.setCenter(pane);
+//        borderPane.setBottom(statusMsg);
+        for (Store store: stores){
+            int x = store.getX();
+            int y = store.getY();
+            cell[y][x].setType(1, store);
+        }
+
+        for (Customer customer: customers){
+            int x = customer.getX();
+            int y = customer.getY();
+            cell[y][x].setType(2, customer);
+        }
+
+        mapAnchorPane.getChildren().add(pane);
+        AnchorPane.setBottomAnchor(pane,0.0);
+        AnchorPane.setLeftAnchor(pane,0.0);
+        AnchorPane.setRightAnchor(pane,0.0);
+        AnchorPane.setTopAnchor(pane,0.0);
+    }
+
+    //This method updates maxXValue and maxYValue if there are positions in input list that are larger than current max values
+    public void updateMaxXandY(List<? extends hasLocationInterface> listToGoThrough){
+        for (hasLocationInterface obj: listToGoThrough){
+            if (obj.getX() > maxXValue){
+                maxXValue = obj.getX();
+                System.out.println("maxXValue was changed to " + maxXValue + "!");
+            }
+            if (obj.getY() > maxYValue){
+                maxYValue = obj.getY();
+                System.out.println("maxYValue was changed to " + maxYValue + "!");
+            }
+
+        }
+    }
+
+    public class Cell extends Pane{
+        private int type;
+        private String msg;
+        private int x;
+        private int y;
+
+
+        public Cell(int i, int j){
+            setStyle("-fx-border-color: black");
+            this.setPrefSize(300,300);
+            this.setOnMouseClicked(e->handleClick());
+            type = 0;
+            this.x = i;
+            this.y = j;
+            msg = "Nothing to show\nLocation: [" + i + ", " + j +"]";
+        }
+
+        public void setType(int t, Object arg){
+            this.type = t;
+
+            if (type == 1){
+                Store store = (Store) arg;
+                StringBuilder sb = new StringBuilder("Customer")
+                        .append("\nName: "+ store.getStoreName())
+                        .append("\nLocation: "+ store.getLocation())
+                        .append("\nNumber of orders: " + store.getStoreOrders().size());
+                msg = sb.toString();
+
+                Ellipse ellipse = new Ellipse(this.getWidth()/2, this.getHeight()/2, this.getWidth()/2-10, this.getHeight()/2 -10);
+                ellipse.centerXProperty().bind(this.widthProperty().divide(2));
+                ellipse.centerYProperty().bind(this.heightProperty().divide(2));
+                ellipse.radiusXProperty().bind(this.widthProperty().divide(2).subtract(10));
+                ellipse.radiusYProperty().bind(this.heightProperty().divide(2).subtract(10));
+                ellipse.setStroke(Color.BLACK);
+                ellipse.setFill(Color.RED);
+                getChildren().add(ellipse);
+            }
+            if (type == 2){
+                Customer customer = (Customer) arg;
+                StringBuilder sb = new StringBuilder("Customer")
+                        .append("\nName: "+ customer.getCustomerName())
+                        .append("\nLocation: "+ customer.getLocation())
+                        .append("\nNumber of orders: " + customer.getOrders().size());
+                msg = sb.toString();
+                Ellipse ellipse = new Ellipse(this.getWidth()/2, this.getHeight()/2, this.getWidth()/2-10, this.getHeight()/2 -10);
+                ellipse.centerXProperty().bind(this.widthProperty().divide(2));
+                ellipse.centerYProperty().bind(this.heightProperty().divide(2));
+                ellipse.radiusXProperty().bind(this.widthProperty().divide(2).subtract(10));
+                ellipse.radiusYProperty().bind(this.heightProperty().divide(2).subtract(10));
+                ellipse.setStroke(Color.BLACK);
+                ellipse.setFill(Color.BLUE);
+                getChildren().add(ellipse);
+            }
+        }
+
+        private void handleClick() {
+            statusMsg.setText(msg);
+        }
+    }
+}
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/TilePaneMap.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/TilePaneMap.fxml	(date 1601046324100)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/TilePaneMap.fxml	(date 1601046324100)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.layout.ColumnConstraints?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.RowConstraints?>
+<?import javafx.scene.layout.TilePane?>
+
+<GridPane fx:id="gridPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="527.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8.0.171" fx:controller="components.ViewInfo.ViewMap.TilePaneMapController">
+  <columnConstraints>
+    <ColumnConstraints hgrow="NEVER" maxWidth="10.0" minWidth="5.0" prefWidth="10.0" />
+    <ColumnConstraints hgrow="SOMETIMES" maxWidth="510.0" minWidth="10.0" prefWidth="399.0" />
+      <ColumnConstraints hgrow="NEVER" maxWidth="10.0" minWidth="10.0" prefWidth="10.0" />
+  </columnConstraints>
+  <rowConstraints>
+    <RowConstraints maxHeight="10.0" minHeight="10.0" prefHeight="10.0" vgrow="NEVER" />
+    <RowConstraints maxHeight="369.0" minHeight="10.0" prefHeight="300.0" vgrow="SOMETIMES" />
+    <RowConstraints maxHeight="10.0" minHeight="10.0" prefHeight="10.0" vgrow="NEVER" />
+  </rowConstraints>
+   <children>
+      <TilePane fx:id="tilePane" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+   </children>
+</GridPane>
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/TilePaneMapController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/TilePaneMapController.java	(date 1601046324101)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/TilePaneMapController.java	(date 1601046324101)
@@ -0,0 +1,153 @@
+package components.ViewInfo.ViewMap;
+
+import Logic.Customers.Customer;
+import Logic.Interfaces.hasLocationInterface;
+import Logic.SDM.SDMManager;
+import Logic.Store.Store;
+import javafx.fxml.FXML;
+import javafx.fxml.Initializable;
+import javafx.scene.layout.GridPane;
+import javafx.scene.layout.StackPane;
+import javafx.scene.layout.TilePane;
+import javafx.scene.shape.Rectangle;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.ResourceBundle;
+
+public class TilePaneMapController implements Initializable{
+
+    @FXML
+    private GridPane gridPane;
+
+    @FXML
+    private TilePane tilePane;
+
+    SDMManager sdm = SDMManager.getInstance();
+    List<Store> stores;
+    List<Customer> customers;
+
+    List<hasLocationInterface> locationables;
+    List<Integer> mapMaxCoordinates;
+    hasLocationInterface[][] locationableMatrix;
+    private int MAPWIDTH;
+
+    public TilePaneMapController () {
+
+        stores = sdm.getStores();
+        customers = sdm.getCustomers().getCustomers();
+        locationables = createLocationableList();
+        mapMaxCoordinates = getLargestXYCoordinatesForMap(locationables);
+        locationableMatrix = createLocationableMatrix(locationables,mapMaxCoordinates);
+    }
+
+    private hasLocationInterface[][] createLocationableMatrix(List<hasLocationInterface> locationables, List<Integer> mapMaxCoordinates) {
+
+        int rows = mapMaxCoordinates.get(1);
+        int cols = mapMaxCoordinates.get(0);
+        this.MAPWIDTH = (rows>cols)? rows: cols;
+        hasLocationInterface[][] matrix = new hasLocationInterface[MAPWIDTH+1][MAPWIDTH+1];
+
+        //initialize matrix with null
+//        for(int i = 0; i < rows; i++)
+//            for(int j = 0; j < cols; j++)
+//                matrix[i][j] = null;
+
+        locationables.forEach((hasLoc) -> {
+            int col = hasLoc.getX();
+            int row = hasLoc.getY();
+            matrix[row][col] = hasLoc;
+        });
+
+
+        return matrix;
+    }
+
+    private List<Integer> getLargestXYCoordinatesForMap(List<hasLocationInterface> locationables) {
+
+        List<Integer> mapMaxCoordinates = new ArrayList<>();
+        int largestX = 0, largestY = 0;
+
+        for (hasLocationInterface locationable: locationables) {
+            if (locationable.getX() > largestX) {
+                largestX = locationable.getX();
+            }
+
+            if (locationable.getY() > largestY) {
+                largestY = locationable.getY();
+            }
+        }
+
+        mapMaxCoordinates.add(largestX);
+        mapMaxCoordinates.add(largestY);
+
+        return mapMaxCoordinates;
+    }
+
+    private List<hasLocationInterface> createLocationableList() {
+
+        //adding all stores and customers to this list
+        List<hasLocationInterface> locationableList = new ArrayList<>();
+
+        for (Store store: stores){
+            locationableList.add(store);
+        }
+
+        for (Customer customer: customers) {
+            locationableList.add(customer);
+        }
+
+        return locationableList;
+
+    }
+
+    private StackPane buildCell(hasLocationInterface locationable){
+
+        StackPane pane = new StackPane();
+        pane.setPrefSize(25, 25);
+
+        if (locationable instanceof Store) {
+            pane.setStyle("-fx-background-color: #a83c32");
+
+        }
+        else if (locationable instanceof Customer) {
+            pane.setStyle("-fx-background-color: #32a851");
+        }
+        else {
+            pane.setStyle("-fx-background-color: #000000");
+        }
+
+        pane.getChildren().add(new Rectangle(5,5));
+        // add labels to stackpane
+        //Label stitchLabel = new Label("M");
+
+        //create rectangle to color stackpane
+        //Rectangle rect = new Rectangle (5, 5); //set rectangle to same size as stackpane
+
+        //pane.getChildren().add(rect);
+
+        return pane;
+    }
+
+    protected void createTiles(hasLocationInterface[][] locationableMatrix, int MAPWIDTH){
+
+        tilePane.setPrefColumns(MAPWIDTH*5); //set prefcolumns to the array width
+
+        //add cells to tilepane
+        for (int i=0; i<MAPWIDTH; i++){
+            for (int j=0; j<MAPWIDTH; j++){
+                StackPane cell = buildCell(locationableMatrix[i][j]);
+                tilePane.getChildren().add(cell);
+            }
+        }
+
+    }
+
+    @Override
+    public void initialize(URL location, ResourceBundle resources) {
+
+        createTiles(locationableMatrix, MAPWIDTH);
+
+    }
+}
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Map.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Map.fxml	(date 1601046324086)
+++ SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/Map.fxml	(date 1601046324086)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.BorderPane?>
+<?import javafx.scene.layout.StackPane?>
+
+
+<BorderPane xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapController">
+   <center>
+      <AnchorPane fx:id="mapAnchorPane" prefHeight="400.0" prefWidth="600.0">
+
+</AnchorPane>
+   </center>
+   <bottom>
+      <StackPane prefHeight="66.0" prefWidth="600.0" BorderPane.alignment="CENTER">
+         <children>
+            <Label fx:id="statusMsg" text="Label" />
+         </children>
+      </StackPane>
+   </bottom>
+</BorderPane>
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ConfirmOrder/ConfirmOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.ConfirmOrder;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Order.Cart;\r\nimport Logic.Order.CartItem;\r\nimport Logic.Order.eOrderType;\r\nimport Logic.Store.Store;\r\nimport javafx.beans.property.*;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.ObservableMap;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TableColumn;\r\nimport javafx.scene.control.TableView;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.math.RoundingMode;\r\nimport java.net.URL;\r\nimport java.time.LocalDate;\r\nimport java.util.HashMap;\r\nimport java.util.ResourceBundle;\r\nimport java.util.Set;\r\n\r\npublic class ConfirmOrderController implements Initializable {\r\n\r\n    @FXML\r\n    private TableView<CartItem> orderItemsTableView;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, String> discountCol;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Integer> itemIdColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, String> itemNameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Integer> itemUnitPriceColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Double> itemAmountColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, String> itemCostColumn;\r\n\r\n    @FXML\r\n    private Label customerNameValueLabel;\r\n\r\n    @FXML\r\n    private Label orderDateValueLabel;\r\n\r\n    @FXML\r\n    private Label storesValueLabel;\r\n\r\n    @FXML\r\n    private Label cartSubtotalValueLabel;\r\n\r\n    @FXML\r\n    private Label deliveryFeeValueLabel;\r\n\r\n    @FXML\r\n    private Label totalValueLabel;\r\n\r\n    @FXML\r\n    void noButtonAction(ActionEvent event) {\r\n\r\n    }\r\n\r\n    @FXML\r\n    void yesButtonAction(ActionEvent event) {\r\n\r\n    }\r\n\r\n\r\n    private ObservableList<CartItem> cartItems;\r\n    private ObservableMap<Store, ObservableList<CartItem>> mapStoreToCartItems;\r\n    private ObjectProperty<Customer> customerObjectProperty;\r\n    private ObjectProperty<LocalDate> localDateObjectProperty;\r\n    private float deliveryFee;\r\n    private double cartsSubtotal;\r\n    private double orderTotal;\r\n\r\n    public ConfirmOrderController(){\r\n        cartItems = FXCollections.observableArrayList();\r\n        mapStoreToCartItems = FXCollections.observableHashMap();\r\n        customerObjectProperty = new SimpleObjectProperty<>();\r\n        localDateObjectProperty = new SimpleObjectProperty<>();\r\n    }\r\n\r\n\r\n\r\n    public void fillViews(Customer customer, HashMap<Store, Cart> mapStoresToCarts) {\r\n        customerNameValueLabel.setText(customer.getCustomerName());\r\n        deliveryFee = 0;\r\n        cartsSubtotal = 0;\r\n\r\n        if (mapStoresToCarts.keySet().size()>1){\r\n            storesValueLabel.setVisible(false);\r\n            addStoreColumn();\r\n            fillCartTableForDynamicOrder(mapStoresToCarts);\r\n\r\n            mapStoresToCarts.forEach((store,cart)->{\r\n                deliveryFee+=store.getDeliveryCost(customer.getLocation());\r\n                cartsSubtotal+=cart.getCartTotalPrice();\r\n            });\r\n\r\n        } else{\r\n            Store store = mapStoresToCarts.keySet().stream().findFirst().orElse(null);\r\n            if (store!=null){\r\n                fillTableViewForCartStaticCart(mapStoresToCarts.get(store));\r\n                storesValueLabel.setText(store.getStoreName());\r\n                deliveryFee = store.getDeliveryCost(customer.getLocation());\r\n                cartsSubtotal = mapStoresToCarts.get(store).getCartTotalPrice();\r\n            }\r\n        }\r\n        deliveryFeeValueLabel.setText(String.format(String.valueOf(deliveryFee), \"%.2f\"));\r\n        cartSubtotalValueLabel.setText(String.format(String.valueOf(cartsSubtotal), \"%.2f\"));\r\n        double total = deliveryFee + cartsSubtotal;\r\n        BigDecimal bd = new BigDecimal(total).setScale(2, RoundingMode.HALF_UP);\r\n        double shortedVal = bd.doubleValue();\r\n        totalValueLabel.setText(String.valueOf(shortedVal));\r\n    }\r\n\r\n    private void addStoreColumn() {\r\n        TableColumn<CartItem,String> storeTableColumn = new TableColumn<>(\"Store\");\r\n        orderItemsTableView.getColumns().add(storeTableColumn);\r\n        storeTableColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>(\"storeBoughtFrom\"));\r\n    }\r\n\r\n    private void fillTableViewForCartStaticCart(Cart cart) {\r\n        cart.getCart().forEach((k,v)->{\r\n            cartItems.add(v);\r\n        });\r\n        cart.getDiscountCart().forEach((k,v)->{\r\n            cartItems.add(v);\r\n        });\r\n\r\n        orderItemsTableView.getItems().clear();\r\n        orderItemsTableView.setItems(cartItems);\r\n    }\r\n\r\n    private void fillCartTableForDynamicOrder(HashMap<Store, Cart> mapStoresToCarts){\r\n        orderItemsTableView.getItems().clear();\r\n\r\n        mapStoresToCarts.forEach((store,cart)->{\r\n            if (mapStoreToCartItems.get(store)==null){\r\n                ObservableList<CartItem> cartForStore = FXCollections.observableArrayList();\r\n                mapStoreToCartItems.put(store,cartForStore);\r\n            }\r\n            cart.getCart().values().forEach(item->{\r\n                mapStoreToCartItems.get(store).add(item);\r\n                orderItemsTableView.getItems().add(item);\r\n            });\r\n            cart.getDiscountCart().values().forEach(item->{\r\n                mapStoreToCartItems.get(store).add(item);\r\n                orderItemsTableView.getItems().add(item);\r\n            });\r\n        });\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        discountCol.setCellValueFactory(new PropertyValueFactory<CartItem,String>(\"discountName\"));\r\n        itemIdColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>(\"itemId\"));\r\n        itemNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>(\"itemName\"));\r\n        itemUnitPriceColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>(\"price\"));\r\n        itemAmountColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>(\"itemAmount\"));\r\n        itemCostColumn.setCellValueFactory(celldata->{\r\n            CartItem item = celldata.getValue();\r\n            String res = String.format(\"%.2f\",item.getItemAmount()* item.getPrice());\r\n            return new ReadOnlyStringWrapper(res);\r\n        });\r\n    }\r\n\r\n\r\n    public void resetFields() {\r\n        deliveryFee = 0;\r\n        orderTotal = 0;\r\n        cartsSubtotal = 0;\r\n        cartItems.clear();\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ConfirmOrder/ConfirmOrderController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ConfirmOrder/ConfirmOrderController.java	(date 1601046324083)
@@ -25,6 +25,8 @@
 import java.util.ResourceBundle;
 import java.util.Set;
 
+//TODO: Fill in Order-Date and Stores Label
+
 public class ConfirmOrderController implements Initializable {
 
     @FXML
@@ -94,30 +96,61 @@
 
 
 
-    public void fillViews(Customer customer, HashMap<Store, Cart> mapStoresToCarts) {
+//    public void fillViews(Customer customer, HashMap<Store, Cart> mapStoresToCarts) {
+//        customerNameValueLabel.setText(customer.getCustomerName());
+//        deliveryFee = 0;
+//        cartsSubtotal = 0;
+//
+//        if (mapStoresToCarts.keySet().size()>1){
+//            storesValueLabel.setVisible(false);
+//            addStoreColumn();
+//            fillCartTableForDynamicOrder(mapStoresToCarts);
+//
+//            mapStoresToCarts.forEach((store,cart)->{
+//                deliveryFee+=store.getDeliveryCost(customer.getLocation());
+//                cartsSubtotal+=cart.getCartTotalPrice();
+//            });
+//
+//        } else{
+//            Store store = mapStoresToCarts.keySet().stream().findFirst().orElse(null);
+//            if (store!=null){
+//                fillTableViewForCartStaticCart(mapStoresToCarts.get(store));
+//                storesValueLabel.setText(store.getStoreName());
+//                deliveryFee = store.getDeliveryCost(customer.getLocation());
+//                cartsSubtotal = mapStoresToCarts.get(store).getCartTotalPrice();
+//            }
+//        }
+//        deliveryFeeValueLabel.setText(String.format(String.valueOf(deliveryFee), "%.2f"));
+//        cartSubtotalValueLabel.setText(String.format(String.valueOf(cartsSubtotal), "%.2f"));
+//        double total = deliveryFee + cartsSubtotal;
+//        BigDecimal bd = new BigDecimal(total).setScale(2, RoundingMode.HALF_UP);
+//        double shortedVal = bd.doubleValue();
+//        totalValueLabel.setText(String.valueOf(shortedVal));
+//    }
+
+    public void fillViews(Customer customer, HashMap<Store, Cart> mapStoresToCarts, LocalDate orderDate) {
         customerNameValueLabel.setText(customer.getCustomerName());
+        orderDateValueLabel.setText(orderDate.toString());
         deliveryFee = 0;
         cartsSubtotal = 0;
+        StringBuilder sb = new StringBuilder("");
 
         if (mapStoresToCarts.keySet().size()>1){
             storesValueLabel.setVisible(false);
             addStoreColumn();
-            fillCartTableForDynamicOrder(mapStoresToCarts);
+        }
+
+        fillTableWithOrderItems(mapStoresToCarts);
+        orderItemsTableView.setItems(cartItems);
+        //orderItemsTableView.refresh();
 
-            mapStoresToCarts.forEach((store,cart)->{
-                deliveryFee+=store.getDeliveryCost(customer.getLocation());
-                cartsSubtotal+=cart.getCartTotalPrice();
-            });
+        mapStoresToCarts.forEach((store,cart)->{
+            sb.append(store.getStoreName()).append(",");
+            deliveryFee+=store.getDeliveryCost(customer.getLocation());
+            cartsSubtotal+=cart.getCartTotalPrice();
+        });
 
-        } else{
-            Store store = mapStoresToCarts.keySet().stream().findFirst().orElse(null);
-            if (store!=null){
-                fillTableViewForCartStaticCart(mapStoresToCarts.get(store));
-                storesValueLabel.setText(store.getStoreName());
-                deliveryFee = store.getDeliveryCost(customer.getLocation());
-                cartsSubtotal = mapStoresToCarts.get(store).getCartTotalPrice();
-            }
-        }
+        storesValueLabel.setText(sb.toString());
         deliveryFeeValueLabel.setText(String.format(String.valueOf(deliveryFee), "%.2f"));
         cartSubtotalValueLabel.setText(String.format(String.valueOf(cartsSubtotal), "%.2f"));
         double total = deliveryFee + cartsSubtotal;
@@ -126,6 +159,14 @@
         totalValueLabel.setText(String.valueOf(shortedVal));
     }
 
+    private void fillTableWithOrderItems(HashMap<Store, Cart> mapStoresToCarts) {
+        cartItems.clear();
+        for (Cart cart :mapStoresToCarts.values()){
+            cart.getCart().values().forEach(item->cartItems.add(item));
+            cart.getDiscountCart().values().forEach(item->cartItems.add(item));
+        }
+    }
+
     private void addStoreColumn() {
         TableColumn<CartItem,String> storeTableColumn = new TableColumn<>("Store");
         orderItemsTableView.getColumns().add(storeTableColumn);
@@ -163,8 +204,7 @@
         });
     }
 
-    @Override
-    public void initialize(URL location, ResourceBundle resources) {
+    public void setUpTables(){
         discountCol.setCellValueFactory(new PropertyValueFactory<CartItem,String>("discountName"));
         itemIdColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>("itemId"));
         itemNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>("itemName"));
@@ -177,13 +217,27 @@
         });
     }
 
+    @Override
+    public void initialize(URL location, ResourceBundle resources) {
+        setUpTables();
+    }
+
 
     public void resetFields() {
+        mapStoreToCartItems.clear();
+        customerObjectProperty = new SimpleObjectProperty<>();
+        localDateObjectProperty = new SimpleObjectProperty<>();
         deliveryFee = 0;
         orderTotal = 0;
         cartsSubtotal = 0;
         cartItems.clear();
-    }
+        deliveryFee = 0;
+        cartsSubtotal = 0;
+        orderTotal = 0;
+        orderItemsTableView.getItems().clear();
+        cartItems =FXCollections.observableArrayList();
 
+        setUpTables();
+    }
 
 }
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscountsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscountsController.java	(date 1601046324080)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscountsController.java	(date 1601046324080)
@@ -0,0 +1,440 @@
+package components.PlaceAnOrder.ChooseDiscounts.DynamicOrderDiscounts;
+
+import Logic.Customers.Customer;
+import Logic.Inventory.InventoryItem;
+import Logic.Inventory.ePurchaseCategory;
+import Logic.Order.Cart;
+import Logic.Order.CartItem;
+import Logic.Order.eOrderType;
+import Logic.Store.*;
+import javafx.beans.property.*;
+import javafx.beans.value.ChangeListener;
+import javafx.collections.FXCollections;
+import javafx.collections.ObservableList;
+import javafx.event.ActionEvent;
+import javafx.fxml.FXML;
+import javafx.fxml.Initializable;
+import javafx.scene.control.*;
+import javafx.scene.control.cell.PropertyValueFactory;
+
+import java.net.URL;
+import java.util.HashMap;
+import java.util.ResourceBundle;
+
+public class DynamicDiscountsController implements Initializable {
+
+
+    @FXML
+    private Label cartSubtotalLabel;
+
+    @FXML
+    private Label deliveryFeeLabel;
+
+    @FXML
+    private Label totalCostLabel;
+    @FXML
+    private Label customerLabel;
+
+    @FXML
+    private Label customerLocationLabel;
+
+    @FXML
+    private ListView<DiscountWrapper> discountsListView;
+
+    @FXML
+    private Label ifyoubuyLabel;
+
+    @FXML
+    private Label discountTypeLabel;
+
+    @FXML
+    private Label ifyoubuyValueLabel;
+
+    @FXML
+    private Label thenyougetLabel;
+
+    @FXML
+    private TableView<DiscountOffer> offersTableView;
+
+    @FXML
+    private TableColumn<DiscountOffer, Integer> itemIdColumn;
+
+    @FXML
+    private TableColumn<DiscountOffer, String> itemNameColumn;
+
+    @FXML
+    private TableColumn<DiscountOffer, Double> itemQuantityColumn;
+
+    @FXML
+    private TableColumn<DiscountOffer, Integer> forAdditionalCoumn;
+
+    @FXML
+    private TableView<CartItem> cartTable;
+
+    @FXML
+    private TableColumn<CartItem, Integer> cartItemIdColumn;
+
+    @FXML
+    private TableColumn<CartItem, String> cartItemNameColumn;
+
+    @FXML
+    private TableColumn<CartItem, Double> cartQuantityColumn;
+
+    @FXML
+    private TableColumn<CartItem, Integer> cartForAdditionalColumn;
+
+    @FXML
+    private TableColumn<CartItem, Double> costColumn;
+
+    @FXML
+    private TableColumn<CartItem, String> cartDiscountNameColumn;
+
+    @FXML
+    private Button addButton;
+
+    private final ObservableList<DiscountWrapper> discountWrappers = FXCollections.observableArrayList();
+    private final ObservableList<DiscountOffer> discountOffersObservableList = FXCollections.observableArrayList();
+    private ChangeListener<DiscountWrapper> discountWrapperChangeListener;
+    private DiscountWrapper selectedDiscountWrapper;
+    private BooleanProperty isDiscountApplicable = new SimpleBooleanProperty(false);
+    private Store selectedStore;
+
+
+    private HashMap<Store, HashMap<Integer,Double>> dummyCartsRepresentation;
+    private HashMap<Store,HashMap<Integer,CartItem>> mapOfMapIdsToDiscountItem;
+
+
+    TableView.TableViewSelectionModel<DiscountOffer> defaultSelectionModel;
+    private DoubleProperty subtotal;
+    private DoubleProperty regularItemsSubtotal;
+    private FloatProperty deliveryFee;
+    private DoubleProperty total;
+    private ObservableList<CartItem> cartItems;
+    private eOrderType orderType;
+
+    public DynamicDiscountsController(){
+        cartItems = FXCollections.observableArrayList();
+        dummyCartsRepresentation = new HashMap<>();
+        regularItemsSubtotal = new SimpleDoubleProperty();
+        mapOfMapIdsToDiscountItem = new HashMap<>();
+        subtotal = new SimpleDoubleProperty(this, "subtotal",0);
+        total = new SimpleDoubleProperty(this, "total",0);
+        deliveryFee = new SimpleFloatProperty(this, "deliveryFee",0);
+    }
+
+
+    @FXML
+    void addButtonAction(ActionEvent event) {
+        String operator = selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator();
+        System.out.println("addButton called for " + operator + " discount");
+
+        if (operator.equals("ALL-OR-NOTHING")){
+            offersTableView.getItems().forEach(item->{
+                System.out.println("Adding " + item.getItemName() + "to chosenDiscountOffers");
+                addSelectedOfferToMapDynamic(item, selectedDiscountWrapper.store);
+            });
+            updateDummyCartsAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition(),selectedDiscountWrapper.store);
+            updateDiscountWrappers();
+        } else{
+            DiscountOffer selectedOffer = offersTableView.getSelectionModel().getSelectedItem();
+            System.out.println("Adding " + selectedOffer.getItemName() + "to chosenDiscountOffers");
+            addSelectedOfferToMapDynamic(selectedOffer,selectedDiscountWrapper.store);
+            updateDummyCartsAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition(),selectedDiscountWrapper.store);
+            updateDiscountWrappers();
+        }
+    }
+
+
+
+    private void updateDiscountWrappers() {
+        for (DiscountWrapper discountWrapper: discountsListView.getItems()){
+            int val =0;
+            if (orderType == eOrderType.DYNAMIC_ORDER)
+                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartsRepresentation.get(discountWrapper.store));
+
+
+            if (selectedDiscountWrapper == discountWrapper){
+                discountWrapper.setTimesDiscountCanBeApplied(val);
+                setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);
+
+            }
+        }
+    }
+
+    private void updateDummyCartsAfterUsingDiscount(DiscountCondition discountCondition, Store store) {
+        Double oldAmount = dummyCartsRepresentation.get(store).get(discountCondition.getIfYouBuyItem().getItemId());
+        double amountToSubtract = discountCondition.getQuantity();
+        Double newAmount = (oldAmount - amountToSubtract);
+        dummyCartsRepresentation.get(store).put(discountCondition.getIfYouBuyItem().getItemId(), newAmount);
+        System.out.println("New dummy cart for store:" + store.getStoreName() +":" + dummyCartsRepresentation.get(store));
+    }
+
+    private void addSelectedOfferToMapDynamic(DiscountOffer selectedItem, Store store) {
+        if (mapOfMapIdsToDiscountItem.get(store) == null){
+            HashMap<Integer,CartItem> map = new HashMap<>();
+            mapOfMapIdsToDiscountItem.put(store,map);
+        }
+        if (mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId()) == null){
+            System.out.println(selectedItem + " was not yet in chosenDiscountOffers");
+            CartItem item = new CartItem(selectedItem.getOfferItem()
+                    ,selectedItem.getQuantity(),selectedItem.getForAdditional()
+                    ,true, selectedDiscountWrapper.getStoreDiscount().getName(), store);
+
+            mapOfMapIdsToDiscountItem.get(store).put(item.getItemId(), item);
+            cartItems.add(item);
+        } else{
+            System.out.println("This item was already in dummyCart");
+            CartItem item = mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId());
+            item.addToItemAmount(selectedItem.getQuantity());
+        }
+        double subtotal = getSubtotal();
+        subtotal += (selectedItem.getQuantity()*selectedItem.getForAdditional());
+        setSubtotal(subtotal);
+
+        discountsListView.refresh();
+        cartTable.refresh();
+        System.out.println("discountItemsToAddToCart is now: " + mapOfMapIdsToDiscountItem);
+    }
+
+
+    private void updateOfferDetails() {
+        ifyoubuyValueLabel.setText(getIfYouBuyString(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition()));
+        discountTypeLabel.setText(selectedDiscountWrapper.storeDiscount.getDiscountOffers().getOperator());
+        updateOffersTableView(selectedDiscountWrapper.getStoreDiscount().getDiscountOffers());
+    }
+
+    private String getIfYouBuyString(DiscountCondition discountCondition) {
+        InventoryItem ifYouBuyItem = discountCondition.getIfYouBuyItem();
+
+        StringBuilder res = new StringBuilder(String.valueOf(discountCondition.getQuantity()));
+        if (ifYouBuyItem.getPurchaseCategory() == ePurchaseCategory.QUANTITY)
+            res.append(" pcks");
+        if (ifYouBuyItem.getPurchaseCategory() == ePurchaseCategory.WEIGHT)
+            res.append("kgs");
+
+        res.append(" of item ").append(ifYouBuyItem.getItemId()).append( "(").append(ifYouBuyItem.getItemName()).append(")");
+        return res.toString();
+
+    }
+
+    private void updateOffersTableView(DiscountOffers discountOffers) {
+        discountOffersObservableList.clear();
+        discountOffersObservableList.addAll(discountOffers.getDiscountOffers());
+
+        offersTableView.setItems(discountOffersObservableList);
+//        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals("ONE-OF")){
+//            offersTableView.setSelectionModel(defaultSelectionModel);
+//            System.out.println("Do something for ONE-OF type");
+//            offersTableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
+//            offersTableView.getSelectionModel().selectFirst();
+//        }
+        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals("ALL-OR-NOTHING")){
+            System.out.println("Do something for ALL-OR-NOTHING type");
+            offersTableView.setSelectionModel(null);
+        } else {
+            offersTableView.setSelectionModel(defaultSelectionModel);
+            System.out.println("Do something for ONE-OF type");
+            offersTableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
+            offersTableView.getSelectionModel().selectFirst();
+        }
+    }
+
+    public void setIsDiscountApplicable(boolean isDiscountApplicable) {
+        this.isDiscountApplicable.set(isDiscountApplicable);
+    }
+
+    @Override
+    public void initialize(URL location, ResourceBundle resources) {
+
+
+        cartSubtotalLabel.textProperty().bind(regularItemsSubtotal.add(subtotal).asString("%.2f"));
+        deliveryFeeLabel.textProperty().bind(deliveryFee.asString("%.2f"));
+        totalCostLabel.textProperty().bind((subtotal.add(deliveryFee)).asString("%.2f"));
+        addButton.disableProperty().bind(isDiscountApplicable.not());
+        itemIdColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Integer>("ItemId"));
+        itemNameColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,String>("ItemName"));
+        itemQuantityColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Double>("quantity"));
+        forAdditionalCoumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Integer>("forAdditional"));
+        defaultSelectionModel = offersTableView.getSelectionModel();
+
+
+        cartItemIdColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>("itemId"));
+        cartItemNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>("itemName"));
+        cartForAdditionalColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>("price"));
+        cartQuantityColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>("itemAmount"));
+        costColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>("cost"));
+        cartDiscountNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>("discountName"));
+
+        cartTable.setItems(cartItems);
+    }
+
+    public void setRegularItemsSubtotal(double regularItemsSubtotal) {
+        this.regularItemsSubtotal.set(regularItemsSubtotal);
+    }
+
+    public void fillViewsBasedOnDynamicOrder(HashMap<Store, Cart> mapStoresToCarts, float deliveryFee, double regularItemsSubtotal) {
+        this.deliveryFee.set(deliveryFee);
+        setRegularItemsSubtotal(regularItemsSubtotal);
+        System.out.println("Filling info based on dynamic order");
+        orderType = eOrderType.DYNAMIC_ORDER;
+        mapStoresToCarts.forEach((k,v)->{
+            dummyCartsRepresentation.put(k, createDummyCartRepresentation(v));
+        });
+
+        boolean atLeastOneSale = false;
+        for (Store store: dummyCartsRepresentation.keySet()){
+            if (store.getStoreDiscounts().size()==0){
+                System.out.println("Store " + store.getStoreName() + " has no discounts!");
+            } else{
+                System.out.println("Store " + store.getStoreName() + " has following discounts: " + store.getStoreDiscounts());
+                atLeastOneSale=true;
+            }
+        }
+        if (!atLeastOneSale)
+            setIsDiscountApplicable(false);
+
+        dummyCartsRepresentation.keySet().forEach(store->{
+            System.out.println("");
+            store.getStoreDiscounts().forEach(discount-> discountWrappers.add(new DiscountWrapper(discount)));
+        });
+
+        for (DiscountWrapper discountWrapper : discountWrappers){
+            StoreDiscount discount = discountWrapper.getStoreDiscount();
+            Store store = discountWrapper.store;
+            int timesDiscountCanBeApplied = discount.countTimesConditionIsMet(dummyCartsRepresentation.get(store));
+            System.out.println("Based on current cart, discount: " + discount.getName() + " can be applied " + timesDiscountCanBeApplied + " times");
+            discountWrapper.setTimesDiscountCanBeApplied(timesDiscountCanBeApplied);
+        }
+        setUpDiscountsListView();
+    }
+
+    private void setUpDiscountsListView() {
+        discountsListView.setItems(discountWrappers);
+        discountsListView.getSelectionModel().selectedItemProperty().addListener(
+                discountWrapperChangeListener = (((observable, oldValue, newValue) -> {
+                    System.out.println("Change Listener called!");
+                    selectedDiscountWrapper = newValue;
+                    if (newValue != null){
+                        System.out.println("isDiscountApplicable will be set to: " + (newValue.getTimesDiscountCanBeApplied() >0));
+                        setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);
+                        updateOfferDetails();
+                        //remainingTimesLabel.setText("This offer can be applied " + selectedDiscountWrapper.getTimesDiscountCanBeApplied() + " times");
+                    }
+                }))
+        );
+        discountsListView.getSelectionModel().selectFirst();
+    }
+
+    private void clearItemsFromScreen() {
+        discountsListView.getItems().clear();
+        discountWrappers.clear();
+        offersTableView.getItems().clear();
+        //remainingTimesLabel.setText("");
+    }
+
+    private HashMap<Integer, Double> createDummyCartRepresentation(Cart inputCart) {
+        HashMap res = new HashMap<Integer, Double>();
+        for (CartItem cartItem: inputCart.getCart().values()){
+            res.put(cartItem.getItemId(), cartItem.getItemAmount());
+        }
+        return res;
+    }
+
+
+    public HashMap<Store, HashMap<Integer,CartItem>> getMapIdsToDiscountCartItemsDynamic() {
+        return mapOfMapIdsToDiscountItem;
+    }
+
+    public void fillCustomerLabels(Customer customer) {
+        customerLabel.setText("Customer: "+customer.getCustomerName());
+        customerLocationLabel.setText("Customer Location: " + customer.getLocation());
+    }
+
+    public void fillOrderLabels(double cartTotalPrice, float deliveryFee) {
+        setDeliveryFee(deliveryFee);
+        setSubtotal(cartTotalPrice);
+    }
+
+    public double getSubtotal() {
+        return subtotal.get();
+    }
+
+    public DoubleProperty subtotalProperty() {
+        return subtotal;
+    }
+
+    public void setSubtotal(double subtotal) {
+        this.subtotal.set(subtotal);
+    }
+
+    public float getDeliveryFee() {
+        return deliveryFee.get();
+    }
+
+    public FloatProperty deliveryFeeProperty() {
+        return deliveryFee;
+    }
+
+    public void setDeliveryFee(float deliveryFee) {
+        this.deliveryFee.set(deliveryFee);
+    }
+
+    public void resetFields() {
+        cartItems.clear();
+        cartTable.getItems().clear();
+        setDeliveryFee(0);
+        setSubtotal(0);
+        mapOfMapIdsToDiscountItem.clear();
+        discountsListView.getItems().clear();
+        discountOffersObservableList.clear();
+        discountWrappers.clear();
+        ifyoubuyValueLabel.setText("");
+        thenyougetLabel.setText("");
+    }
+
+    public double getDiscountsSubtotal() {
+        double total = 0;
+        for (HashMap<Integer, CartItem> map: mapOfMapIdsToDiscountItem.values()){
+            for (CartItem item: map.values()){
+                total += item.getPrice();
+            }
+        }
+        return total;
+    }
+
+
+    private class DiscountWrapper {
+        private Store store;
+        private StoreDiscount storeDiscount;
+        private IntegerProperty timesDiscountCanBeApplied;
+
+        public DiscountWrapper(StoreDiscount discount){
+            this.storeDiscount = discount;
+            timesDiscountCanBeApplied = new SimpleIntegerProperty(0);
+            this.store = discount.getStore();
+        }
+
+        public IntegerProperty timesDiscountCanBeAppliedProperty() {
+            return timesDiscountCanBeApplied;
+        }
+
+        public StoreDiscount getStoreDiscount() {
+            return storeDiscount;
+        }
+
+        public int getTimesDiscountCanBeApplied() {
+            return timesDiscountCanBeApplied.get();
+        }
+
+        public void setTimesDiscountCanBeApplied(int timesDiscountCanBeApplied) {
+            this.timesDiscountCanBeApplied.set(timesDiscountCanBeApplied);
+        }
+
+        @Override
+        public String toString() {
+            return storeDiscount.getName() + "x (" + getTimesDiscountCanBeApplied() + ")";
+        }
+
+    }
+
+}
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml	(date 1601046324079)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml	(date 1601046324079)
@@ -0,0 +1,142 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.ListView?>
+<?import javafx.scene.control.SplitPane?>
+<?import javafx.scene.control.TableColumn?>
+<?import javafx.scene.control.TableView?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.ColumnConstraints?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.RowConstraints?>
+<?import javafx.scene.text.Font?>
+
+<GridPane hgap="5.0" prefHeight="515.0" prefWidth="784.0" vgap="5.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.PlaceAnOrder.ChooseDiscounts.DynamicOrderDiscounts.DynamicDiscountsController">
+    <columnConstraints>
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="649.0" minWidth="10.0" prefWidth="61.0" />
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="712.0" minWidth="10.0" prefWidth="595.0" />
+        <ColumnConstraints hgrow="NEVER" maxWidth="712.0" minWidth="10.0" prefWidth="85.0" />
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="516.0" minWidth="10.0" prefWidth="319.0" />
+    </columnConstraints>
+    <rowConstraints>
+        <RowConstraints maxHeight="164.0" minHeight="7.0" prefHeight="48.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="228.0" minHeight="5.0" prefHeight="27.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="228.0" minHeight="1.0" prefHeight="27.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="281.0" minHeight="10.0" prefHeight="206.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="427.0" minHeight="10.0" prefHeight="36.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="427.0" minHeight="10.0" prefHeight="191.0" vgrow="SOMETIMES" />
+        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+    </rowConstraints>
+    <children>
+        <Label text="Your order" GridPane.columnIndex="1">
+            <font>
+                <Font size="16.0" />
+            </font>
+            <GridPane.margin>
+                <Insets left="40.0" />
+            </GridPane.margin>
+        </Label>
+        <Label alignment="TOP_CENTER" text="Order summary" GridPane.columnIndex="3">
+            <opaqueInsets>
+                <Insets left="50.0" />
+            </opaqueInsets>
+            <font>
+                <Font size="16.0" />
+            </font>
+        </Label>
+        <Label fx:id="customerLabel" alignment="TOP_LEFT" text="Customer:" GridPane.columnIndex="1" GridPane.rowIndex="1">
+            <opaqueInsets>
+                <Insets left="50.0" />
+            </opaqueInsets>
+            <GridPane.margin>
+                <Insets left="40.0" />
+            </GridPane.margin>
+        </Label>
+        <Label fx:id="customerLocationLabel" text="Customer location:" GridPane.columnIndex="1" GridPane.rowIndex="2">
+            <GridPane.margin>
+                <Insets left="40.0" />
+            </GridPane.margin>
+        </Label>
+        <Button fx:id="addButton" onAction="#addButtonAction" text="Add to cart" GridPane.columnIndex="1" GridPane.halignment="CENTER" GridPane.rowIndex="4">
+            <GridPane.margin>
+                <Insets bottom="10.0" top="10.0" />
+            </GridPane.margin>
+        </Button>
+        <TableView fx:id="cartTable" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="5">
+            <columns>
+                <TableColumn fx:id="cartDiscountNameColumn" prefWidth="75.0" text="Discount" />
+                <TableColumn fx:id="cartItemIdColumn" prefWidth="75.0" text="Item-ID" />
+                <TableColumn fx:id="cartItemNameColumn" prefWidth="75.0" text="Item-Name" />
+                <TableColumn fx:id="cartQuantityColumn" prefWidth="75.0" text="Quantity" />
+                <TableColumn fx:id="cartForAdditionalColumn" prefWidth="100.0" text="For Additional" />
+                <TableColumn fx:id="costColumn" prefWidth="75.0" text="Cost" />
+            </columns></TableView>
+        <GridPane GridPane.columnIndex="3" GridPane.rowIndex="3">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <children>
+                <Label text="Cart subtotal:" GridPane.valignment="TOP" />
+                <Label text="Delivery fee:" GridPane.rowIndex="1" GridPane.valignment="TOP">
+                    <GridPane.margin>
+                        <Insets />
+                    </GridPane.margin>
+                </Label>
+                <Label text="Total:" GridPane.rowIndex="2" GridPane.valignment="TOP">
+                    <GridPane.margin>
+                        <Insets />
+                    </GridPane.margin>
+                </Label>
+                <Label fx:id="cartSubtotalLabel" text="Label" GridPane.columnIndex="1" GridPane.valignment="TOP" />
+                <Label fx:id="deliveryFeeLabel" text="Label" GridPane.columnIndex="1" GridPane.rowIndex="1" GridPane.valignment="TOP" />
+                <Label fx:id="totalCostLabel" text="Label" GridPane.columnIndex="1" GridPane.rowIndex="2" GridPane.valignment="TOP" />
+            </children>
+        </GridPane>
+        <SplitPane dividerPositions="0.29797979797979796" prefHeight="160.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="3">
+            <items>
+                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
+                    <ListView fx:id="discountsListView" prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
+                </AnchorPane>
+                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
+                    <GridPane prefHeight="260.0" prefWidth="187.0" AnchorPane.bottomAnchor="-0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" GridPane.columnIndex="2" GridPane.rowIndex="1">
+                        <columnConstraints>
+                            <ColumnConstraints hgrow="SOMETIMES" maxWidth="271.0" minWidth="10.0" prefWidth="86.0" />
+                            <ColumnConstraints hgrow="SOMETIMES" maxWidth="278.0" minWidth="10.0" prefWidth="269.0" />
+                        </columnConstraints>
+                        <rowConstraints>
+                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                            <RowConstraints maxHeight="47.0" minHeight="10.0" prefHeight="44.0" vgrow="SOMETIMES" />
+                            <RowConstraints maxHeight="168.0" minHeight="10.0" prefHeight="139.0" vgrow="SOMETIMES" />
+                        </rowConstraints>
+                        <children>
+                            <TableView fx:id="offersTableView" prefHeight="200.0" prefWidth="330.0" GridPane.columnSpan="2" GridPane.rowIndex="2">
+                                <columns>
+                                    <TableColumn fx:id="itemIdColumn" prefWidth="32.0" text="id" />
+                                    <TableColumn fx:id="itemNameColumn" prefWidth="84.0" text="item-name" />
+                                    <TableColumn fx:id="itemQuantityColumn" prefWidth="60.0" text="quantity" />
+                                    <TableColumn fx:id="forAdditionalCoumn" prefWidth="124.0" text="for additional" />
+                                </columns>
+                            </TableView>
+                            <Label text="If you buy:" />
+                            <Label text="Then you get" GridPane.rowIndex="1" />
+                            <Label fx:id="discountTypeLabel" text="Label" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+                            <Label fx:id="ifyoubuyValueLabel" text="Label" GridPane.columnIndex="1" />
+                        </children>
+                    </GridPane>
+                </AnchorPane>
+            </items>
+        </SplitPane>
+    </children>
+    <opaqueInsets>
+        <Insets />
+    </opaqueInsets>
+</GridPane>
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/DynamicOrder/ChooseItemsDynamicOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.ChooseItems.DynamicOrder;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Inventory.Inventory;\r\nimport Logic.Inventory.InventoryItem;\r\nimport Logic.Inventory.ePurchaseCategory;\r\nimport Logic.Order.Cart;\r\nimport Logic.Order.CartItem;\r\nimport Logic.SDM.SDMManager;\r\nimport Logic.Store.Store;\r\nimport Utilities.MyDoubleStringConverter;\r\nimport javafx.beans.property.*;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.ObservableMap;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.control.cell.TextFieldTableCell;\r\nimport javafx.scene.input.KeyCode;\r\nimport javafx.scene.layout.FlowPane;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URL;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.ResourceBundle;\r\nimport java.util.Set;\r\n\r\npublic class ChooseItemsDynamicOrderController implements Initializable {\r\n\r\n    @FXML\r\n    private Label customerLabel;\r\n\r\n    @FXML\r\n    private Label customerLocationLabel;\r\n\r\n    @FXML\r\n    private TableView<InventoryItemWrapper> itemsTableView;\r\n\r\n    @FXML\r\n    private TableColumn<InventoryItemWrapper, Integer> itemIdColumn;\r\n\r\n    @FXML\r\n    private TableColumn<InventoryItemWrapper, String> itemNameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<InventoryItemWrapper, ObjectProperty<ePurchaseCategory>> categoryColumn;\r\n\r\n    @FXML\r\n    private TableColumn<InventoryItemWrapper, Double> amountColumn;\r\n\r\n    @FXML\r\n    private TableColumn<InventoryItemWrapper, Void> addButtonColumn;\r\n\r\n    @FXML\r\n    private TableColumn<InventoryItemWrapper, Void> removeButtonColumn;\r\n\r\n\r\n    @FXML\r\n    private Button addToCartButton;\r\n\r\n    @FXML\r\n    private Label cartSubtotalLabel;\r\n\r\n    @FXML\r\n    private Label deliveryFeeLabel;\r\n\r\n    @FXML\r\n    private Label totalCostLabel;\r\n\r\n    @FXML\r\n    private FlowPane flowpane;\r\n\r\n\r\n    private Inventory inventory = SDMManager.getInstance().getInventory();\r\n    private HashMap<InventoryItem, Double> mapItemsChosenToAmount;\r\n    private ObservableList<InventoryItemWrapper> itemWrappers;\r\n    private ObservableMap<Store, List<CartItem>> mapStoreToCartItems;\r\n    private Cart cart;\r\n    private Set<Store> storesBoughtFrom;\r\n    private HashMap<Store,Cart> mapStoreToCart;\r\n    private DoubleProperty cartsSubtotal;\r\n    private FloatProperty deliveryFeeTotal;\r\n    private Customer customer;\r\n\r\n    public ChooseItemsDynamicOrderController(){\r\n        mapItemsChosenToAmount = new HashMap<>();\r\n        mapStoreToCart = new HashMap<>();\r\n        mapStoreToCartItems=FXCollections.observableHashMap();\r\n        itemWrappers = FXCollections.observableArrayList();\r\n        cartsSubtotal = new SimpleDoubleProperty(0);\r\n        deliveryFeeTotal = new SimpleFloatProperty(0f);\r\n        SDMManager.getInstance().getInventory().getListInventoryItems().forEach(item->{\r\n            itemWrappers.add(new InventoryItemWrapper(item));\r\n        });\r\n\r\n    }\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        deliveryFeeLabel.setText(\"???\");\r\n        cartSubtotalLabel.textProperty().bind(cartsSubtotal.asString(\"%.2f\"));\r\n        itemIdColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper,Integer>(\"ItemId\"));\r\n        itemNameColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper,String>(\"ItemName\"));\r\n        categoryColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper, ObjectProperty<ePurchaseCategory>>(\"PurchaseCategory\"));\r\n\r\n        setUpAmountColumn();\r\n        setUpAddButtonColumn();\r\n        setUpRemoveButtonColumn();\r\n        setTableEditable();\r\n        itemsTableView.setItems(itemWrappers);\r\n\r\n\r\n    }\r\n\r\n    @FXML\r\n    void addToCartAction(ActionEvent event) {\r\n        HashMap<InventoryItem, Double> dummyMap = new HashMap<>();\r\n        for (InventoryItemWrapper wrapper: itemsTableView.getItems()){\r\n            if (wrapper.getAmount()>0){\r\n                InventoryItem item = inventory.getInventoryItemById(wrapper.getItemId());\r\n                dummyMap.put(item, wrapper.getAmount());\r\n            }\r\n        }\r\n\r\n        //cart = SDMManager.getInstance().findCheapestCartForUser(mapItemsChosenToAmount);\r\n        HashMap<Store,Cart> dummyMapStoreToCart = SDMManager.getInstance().findCheapestStoresForItems(dummyMap);\r\n        dummyMapStoreToCart.forEach((k,v)->{\r\n            if (mapStoreToCart.get(k)==null){\r\n                mapStoreToCart.put(k,v);\r\n            } else{\r\n                mapStoreToCart.get(k).addCartToCart(v);\r\n            }\r\n        });\r\n\r\n        updateDeliveryFeeTotal();\r\n        updateFlowPane();\r\n        resetCells();\r\n    }\r\n\r\n    private void updateDeliveryFeeTotal() {\r\n        setDeliveryFeeTotal(0);\r\n\r\n        if (customer == null){\r\n            System.out.println(\"ChooseItemsDynamicOrder customer is null!\");\r\n            return;\r\n        }\r\n        List<Integer> customerLocation = customer.getLocation();\r\n        mapStoreToCart.keySet().forEach(store -> {\r\n             float total = getDeliveryFeeTotal();\r\n             setDeliveryFeeTotal(store.getDeliveryCost(customerLocation)+total);\r\n        });\r\n    }\r\n\r\n\r\n\r\n    private void resetCells() {\r\n        for (InventoryItemWrapper wrapper: itemWrappers){\r\n            wrapper.setAmount(0);\r\n        }\r\n    }\r\n\r\n    private void updateFlowPane() {\r\n        flowpane.getChildren().clear();\r\n        setCartsSubtotal(0);\r\n\r\n        mapStoreToCart.forEach((k,v)->{\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/components/PlaceAnOrder/ChooseItems/DynamicOrder/DynamicSubOrder.fxml\"));\r\n                Node n = loader.load();\r\n                DynamicSubOrderController controller = loader.getController();\r\n                controller.setData(k,v);\r\n                flowpane.getChildren().add(n);\r\n                double oldTotal = cartsSubtotal.getValue();\r\n                oldTotal+= v.getCartTotalPrice();\r\n                setCartsSubtotal(oldTotal);\r\n\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        });\r\n    }\r\n\r\n    public double getCartsSubtotal() {\r\n        return cartsSubtotal.get();\r\n    }\r\n\r\n    public DoubleProperty cartsSubtotalProperty() {\r\n        return cartsSubtotal;\r\n    }\r\n\r\n    public void setCartsSubtotal(double cartsSubtotal) {\r\n        this.cartsSubtotal.set(cartsSubtotal);\r\n    }\r\n\r\n    private void setUpAmountColumn() {\r\n        amountColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper, Double>(\"amount\"));\r\n\r\n        amountColumn.setCellFactory(TextFieldTableCell.forTableColumn(new MyDoubleStringConverter()));\r\n\r\n        amountColumn.setOnEditCommit(event -> {\r\n            Double value = event.getOldValue();\r\n            InventoryItemWrapper selectedItem = ((InventoryItemWrapper) event.getTableView().getItems().get(event.getTablePosition().getRow()));\r\n            Boolean isValidNewAmount = true;\r\n\r\n            if (event.getNewValue() != null){\r\n                System.out.println(\"event.getNewValue() is not null\");\r\n\r\n                if ((event.getNewValue() - value == 0)){\r\n                    System.out.println(\"event.getOldValue() is equal to event.getNewValue()\");\r\n                    isValidNewAmount = false;\r\n                }\r\n\r\n                if ((event.getNewValue() - value) != 0){\r\n                    System.out.println(\"event.getOldValue() is not equal to event.getNewValue()\");\r\n\r\n                    if (selectedItem.getPurchaseCategory() == ePurchaseCategory.QUANTITY){\r\n                        if (event.getNewValue() != Math.round(event.getNewValue())){\r\n                            isValidNewAmount = false;\r\n                            System.out.println(\"Amount for this item must be a positive integer!\");\r\n                        }\r\n                    }\r\n\r\n                }\r\n                if (isValidNewAmount){\r\n                    value = event.getNewValue();\r\n                    selectedItem.setAmount(value);\r\n                    if (value > 0){\r\n                        addItemToMap(selectedItem);\r\n                    }\r\n                    else{\r\n                        removeSelectedItemIfNecessary(selectedItem);\r\n                    }\r\n                }\r\n            }\r\n            itemsTableView.refresh();\r\n        });\r\n    }\r\n\r\n    private void removeSelectedItemIfNecessary(InventoryItemWrapper selectedItem) {\r\n        if (mapItemsChosenToAmount.containsKey(inventory.getInventoryItemById(selectedItem.getItemId()))){\r\n            mapItemsChosenToAmount.remove(inventory.getInventoryItemById(selectedItem.getItemId()));\r\n        }\r\n    }\r\n\r\n    private void addItemToMap(InventoryItemWrapper selectedItem) {\r\n        InventoryItem item = inventory.getInventoryItemById(selectedItem.getItemId());\r\n        if (mapItemsChosenToAmount.containsKey(item)){\r\n            double amount = mapItemsChosenToAmount.get(item);\r\n            amount += selectedItem.getAmount();\r\n            mapItemsChosenToAmount.put(item, amount);\r\n            return;\r\n        } else{\r\n            mapItemsChosenToAmount.put(item, selectedItem.getAmount());\r\n        }\r\n    }\r\n\r\n    private void resestWrappers() {\r\n        itemWrappers.forEach(i->{\r\n            i.setAmount(0);\r\n        });\r\n        storesBoughtFrom.clear();\r\n    }\r\n\r\n    private void setUpAddButtonColumn() {\r\n        addButtonColumn.setCellFactory(col->{\r\n            TableCell<InventoryItemWrapper, Void> cell = new TableCell<InventoryItemWrapper,Void>(){\r\n                @Override\r\n                protected void updateItem(Void item, boolean empty) {\r\n                    super.updateItem(item, empty);\r\n\r\n                    //Clean up cell before populating it\r\n                    this.setText(null);\r\n                    this.setGraphic(null);\r\n                    if (!empty){\r\n                        Button addButton = new Button(\"add\");\r\n                        addButton.setOnAction(e->{\r\n                            int rowIndex = this.getTableRow().getIndex();\r\n                            InventoryItemWrapper selectedItem = this.getTableView().getItems().get(rowIndex);\r\n                            double oldAmount = selectedItem.getAmount();\r\n                            selectedItem.setAmount(oldAmount+1);\r\n                            //InventoryItem inventoryItem = inventory.getInventoryItemById(selectedItem.getItemId());\r\n                            //mapItemsChosenToAmount.put(inventoryItem,selectedItem.getAmount());\r\n                            //addItemToMap(selectedItem);\r\n                        });\r\n                        this.setGraphic(addButton);\r\n                    }\r\n                }\r\n            };\r\n            return cell;\r\n        });\r\n    }\r\n\r\n    private void setUpRemoveButtonColumn() {\r\n        removeButtonColumn.setCellFactory(col->{\r\n            TableCell<InventoryItemWrapper, Void> cell = new TableCell<InventoryItemWrapper,Void>(){\r\n                @Override\r\n                protected void updateItem(Void item, boolean empty) {\r\n                    super.updateItem(item, empty);\r\n                    //Clean up cell before populating it\r\n                    this.setText(null);\r\n                    this.setGraphic(null);\r\n                    if (!empty){\r\n                        Button removeButton = new Button(\"remove\");\r\n                        removeButton.setOnAction(e->{\r\n                            int rowIndex = this.getTableRow().getIndex();\r\n                            InventoryItemWrapper selectedItem = this.getTableView().getItems().get(rowIndex);\r\n                            double oldAmount = selectedItem.getAmount();\r\n                            if (oldAmount-1 <= 0){\r\n                                selectedItem.setAmount(0);\r\n                                removeSelectedItemIfNecessary(selectedItem);\r\n                            }\r\n                            else{\r\n                                selectedItem.setAmount(oldAmount-1);\r\n                            }\r\n                        });\r\n                        this.setGraphic(removeButton);\r\n                    }\r\n                }\r\n            };\r\n            return cell;\r\n        });\r\n    }\r\n\r\n    private void setTableEditable() {\r\n        itemsTableView.setEditable(true);\r\n\r\n        itemsTableView.getSelectionModel().cellSelectionEnabledProperty().set(true);\r\n\r\n        // when character or numbers pressed it will start edit in editable\r\n        // fields\r\n        itemsTableView.setOnKeyPressed(event -> {\r\n            if (event.getCode().isLetterKey() || event.getCode().isDigitKey())\r\n            {\r\n                editFocusedCell();\r\n            } else if (event.getCode() == KeyCode.RIGHT\r\n                    || event.getCode() == KeyCode.TAB) {\r\n                itemsTableView.getSelectionModel().selectNext();\r\n                event.consume();\r\n            } else if (event.getCode() == KeyCode.LEFT) {\r\n                event.consume();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void editFocusedCell() {\r\n        final TablePosition<InventoryItemWrapper, ?> focusedCell = itemsTableView\r\n                .focusModelProperty().get().focusedCellProperty().get();\r\n        itemsTableView.edit(focusedCell.getRow(), focusedCell.getTableColumn());\r\n    }\r\n\r\n    public HashMap<Store, Cart> getMapStoresToCarts() {\r\n        return mapStoreToCart;\r\n    }\r\n\r\n    public Set<Store> getStoresBoughtFrom() {\r\n        return storesBoughtFrom;\r\n    }\r\n\r\n    public float getDeliveryFeeTotal() {\r\n        return deliveryFeeTotal.get();\r\n    }\r\n\r\n    public FloatProperty deliveryFeeTotalProperty() {\r\n        return deliveryFeeTotal;\r\n    }\r\n\r\n    public void setDeliveryFeeTotal(float deliveryFeeTotal) {\r\n        this.deliveryFeeTotal.set(deliveryFeeTotal);\r\n    }\r\n\r\n    public void resetFields() {\r\n        mapItemsChosenToAmount.clear();\r\n        mapStoreToCartItems.clear();\r\n        mapStoreToCart.clear();\r\n        cartsSubtotal.setValue(0);\r\n    }\r\n\r\n    public void setCustomer(Customer customer) {\r\n        this.customer = customer;\r\n    }\r\n\r\n    public class InventoryItemWrapper extends InventoryItem{\r\n        private DoubleProperty amount;\r\n\r\n        public InventoryItemWrapper(InventoryItem item) {\r\n            super(item);\r\n            amount = new SimpleDoubleProperty(this, \"amount\",0);\r\n        }\r\n\r\n        public double getAmount() {\r\n            return amount.get();\r\n        }\r\n\r\n        public DoubleProperty amountProperty() {\r\n            return amount;\r\n        }\r\n\r\n        public void setAmount(double amount) {\r\n            this.amount.set(amount);\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/DynamicOrder/ChooseItemsDynamicOrderController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/DynamicOrder/ChooseItemsDynamicOrderController.java	(date 1601046324082)
@@ -76,25 +76,28 @@
     @FXML
     private FlowPane flowpane;
 
-
+    private String TAG = "ChooseItemsDynamicOrderController";
     private Inventory inventory = SDMManager.getInstance().getInventory();
     private HashMap<InventoryItem, Double> mapItemsChosenToAmount;
     private ObservableList<InventoryItemWrapper> itemWrappers;
-    private ObservableMap<Store, List<CartItem>> mapStoreToCartItems;
-    private Cart cart;
-    private Set<Store> storesBoughtFrom;
-    private HashMap<Store,Cart> mapStoreToCart;
+    //private ObservableMap<Store, List<CartItem>> mapStoreToCartItems;
+//    private Cart cart;
+//    private Set<Store> storesBoughtFrom;
+    private HashMap<Store,Cart> mapStoresToCarts;
     private DoubleProperty cartsSubtotal;
     private FloatProperty deliveryFeeTotal;
     private Customer customer;
+    private DoubleProperty regularItemsSubtotal;
+
 
     public ChooseItemsDynamicOrderController(){
         mapItemsChosenToAmount = new HashMap<>();
-        mapStoreToCart = new HashMap<>();
-        mapStoreToCartItems=FXCollections.observableHashMap();
+        mapStoresToCarts = new HashMap<>();
+//        mapStoreToCartItems=FXCollections.observableHashMap();
         itemWrappers = FXCollections.observableArrayList();
         cartsSubtotal = new SimpleDoubleProperty(0);
         deliveryFeeTotal = new SimpleFloatProperty(0f);
+        regularItemsSubtotal = new SimpleDoubleProperty(0);
         SDMManager.getInstance().getInventory().getListInventoryItems().forEach(item->{
             itemWrappers.add(new InventoryItemWrapper(item));
         });
@@ -105,7 +108,9 @@
     @Override
     public void initialize(URL location, ResourceBundle resources) {
         deliveryFeeLabel.setText("???");
-        cartSubtotalLabel.textProperty().bind(cartsSubtotal.asString("%.2f"));
+        deliveryFeeLabel.textProperty().bind(deliveryFeeTotal.asString("%.2f"));
+        cartSubtotalLabel.textProperty().bind(cartsSubtotal.add(regularItemsSubtotal).asString("%.2f"));
+        totalCostLabel.textProperty().bind(deliveryFeeTotal.add(cartsSubtotal).asString("%.2f"));
         itemIdColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper,Integer>("ItemId"));
         itemNameColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper,String>("ItemName"));
         categoryColumn.setCellValueFactory(new PropertyValueFactory<InventoryItemWrapper, ObjectProperty<ePurchaseCategory>>("PurchaseCategory"));
@@ -115,8 +120,6 @@
         setUpRemoveButtonColumn();
         setTableEditable();
         itemsTableView.setItems(itemWrappers);
-
-
     }
 
     @FXML
@@ -132,10 +135,10 @@
         //cart = SDMManager.getInstance().findCheapestCartForUser(mapItemsChosenToAmount);
         HashMap<Store,Cart> dummyMapStoreToCart = SDMManager.getInstance().findCheapestStoresForItems(dummyMap);
         dummyMapStoreToCart.forEach((k,v)->{
-            if (mapStoreToCart.get(k)==null){
-                mapStoreToCart.put(k,v);
+            if (mapStoresToCarts.get(k)==null){
+                mapStoresToCarts.put(k,v);
             } else{
-                mapStoreToCart.get(k).addCartToCart(v);
+                mapStoresToCarts.get(k).addCartToCart(v);
             }
         });
 
@@ -145,14 +148,14 @@
     }
 
     private void updateDeliveryFeeTotal() {
-        setDeliveryFeeTotal(0);
-
         if (customer == null){
             System.out.println("ChooseItemsDynamicOrder customer is null!");
             return;
         }
+        setDeliveryFeeTotal(0);
+
         List<Integer> customerLocation = customer.getLocation();
-        mapStoreToCart.keySet().forEach(store -> {
+        mapStoresToCarts.keySet().forEach(store -> {
              float total = getDeliveryFeeTotal();
              setDeliveryFeeTotal(store.getDeliveryCost(customerLocation)+total);
         });
@@ -170,7 +173,7 @@
         flowpane.getChildren().clear();
         setCartsSubtotal(0);
 
-        mapStoreToCart.forEach((k,v)->{
+        mapStoresToCarts.forEach((k, v)->{
             try {
                 FXMLLoader loader = new FXMLLoader(getClass().getResource("/components/PlaceAnOrder/ChooseItems/DynamicOrder/DynamicSubOrder.fxml"));
                 Node n = loader.load();
@@ -261,12 +264,7 @@
         }
     }
 
-    private void resestWrappers() {
-        itemWrappers.forEach(i->{
-            i.setAmount(0);
-        });
-        storesBoughtFrom.clear();
-    }
+
 
     private void setUpAddButtonColumn() {
         addButtonColumn.setCellFactory(col->{
@@ -355,13 +353,18 @@
         itemsTableView.edit(focusedCell.getRow(), focusedCell.getTableColumn());
     }
 
+    public boolean hasNecessaryInformation(){
+        if (mapStoresToCarts.size()==0){
+            System.out.println(TAG + "mapStoresToCarts can't be empty!");
+            return false;
+        }
+        return true;
+    }
+
     public HashMap<Store, Cart> getMapStoresToCarts() {
-        return mapStoreToCart;
+        return mapStoresToCarts;
     }
 
-    public Set<Store> getStoresBoughtFrom() {
-        return storesBoughtFrom;
-    }
 
     public float getDeliveryFeeTotal() {
         return deliveryFeeTotal.get();
@@ -377,9 +380,10 @@
 
     public void resetFields() {
         mapItemsChosenToAmount.clear();
-        mapStoreToCartItems.clear();
-        mapStoreToCart.clear();
+//        mapStoreToCartItems.clear();
+        mapStoresToCarts.clear();
         cartsSubtotal.setValue(0);
+        flowpane.getChildren().clear();
     }
 
     public void setCustomer(Customer customer) {
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.ChooseDiscounts;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Inventory.InventoryItem;\r\nimport Logic.Inventory.ePurchaseCategory;\r\nimport Logic.Order.Cart;\r\nimport Logic.Order.CartItem;\r\nimport Logic.Order.eOrderType;\r\nimport Logic.Store.*;\r\nimport javafx.beans.property.*;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\n\r\nimport java.net.URL;\r\nimport java.util.HashMap;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class ChooseDiscountsController implements Initializable {\r\n\r\n\r\n    @FXML\r\n    private Label cartSubtotalLabel;\r\n\r\n    @FXML\r\n    private Label deliveryFeeLabel;\r\n\r\n    @FXML\r\n    private Label totalCostLabel;\r\n    @FXML\r\n    private Label customerLabel;\r\n\r\n    @FXML\r\n    private Label customerLocationLabel;\r\n\r\n    @FXML\r\n    private ListView<DiscountWrapper> discountsListView;\r\n\r\n    @FXML\r\n    private Label ifyoubuyLabel;\r\n\r\n    @FXML\r\n    private Label discountTypeLabel;\r\n\r\n    @FXML\r\n    private Label ifyoubuyValueLabel;\r\n\r\n    @FXML\r\n    private Label thenyougetLabel;\r\n\r\n    @FXML\r\n    private TableView<DiscountOffer> offersTableView;\r\n\r\n    @FXML\r\n    private TableColumn<DiscountOffer, Integer> itemIdColumn;\r\n\r\n    @FXML\r\n    private TableColumn<DiscountOffer, String> itemNameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<DiscountOffer, Double> itemQuantityColumn;\r\n\r\n    @FXML\r\n    private TableColumn<DiscountOffer, Integer> forAdditionalCoumn;\r\n\r\n    @FXML\r\n    private TableView<CartItem> cartTable;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Integer> cartItemIdColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, String> cartItemNameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Double> cartQuantityColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Integer> cartForAdditionalColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Double> costColumn;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, String> cartDiscountNameColumn;\r\n\r\n    @FXML\r\n    private Button addButton;\r\n\r\n    private final ObservableList<DiscountWrapper> discountWrappers = FXCollections.observableArrayList();\r\n\r\n    private final ObservableList<DiscountOffer> discountOffersObservableList = FXCollections.observableArrayList();\r\n    private ChangeListener<DiscountWrapper> discountWrapperChangeListener;\r\n    private DiscountWrapper selectedDiscountWrapper;\r\n    private BooleanProperty isDiscountApplicable = new SimpleBooleanProperty(false);\r\n    private Store selectedStore;\r\n\r\n    private HashMap<Integer, Double> dummyCartRepresentation;\r\n    private HashMap<Integer, CartItem> mapIdsToDiscountCartItems;\r\n\r\n    private HashMap<Store, HashMap<Integer,Double>> dummyCartsRepresentation;\r\n    private HashMap<Store,HashMap<Integer,CartItem>> mapOfMapIdsToDiscountItem;\r\n\r\n\r\n\r\n    TableView.TableViewSelectionModel<DiscountOffer> defaultSelectionModel;\r\n    private DoubleProperty subtotal;\r\n    private FloatProperty deliveryFee;\r\n    private DoubleProperty total;\r\n    private ObservableList<CartItem> cartItems;\r\n    private eOrderType orderType;\r\n\r\n    public ChooseDiscountsController(){\r\n        cartItems = FXCollections.observableArrayList();\r\n        dummyCartsRepresentation = new HashMap<>();\r\n        mapIdsToDiscountCartItems = new HashMap<>();\r\n        mapOfMapIdsToDiscountItem = new HashMap<>();\r\n    }\r\n\r\n\r\n    @FXML\r\n    void addButtonAction(ActionEvent event) {\r\n        String operator = selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator();\r\n        System.out.println(\"addButton called for \" + operator + \" discount\");\r\n        if (operator.equals(\"ONE-OF\")){\r\n            DiscountOffer selectedOffer = offersTableView.getSelectionModel().getSelectedItem();\r\n            System.out.println(\"Adding \" + selectedOffer.getItemName() + \"to chosenDiscountOffers\");\r\n            if (orderType==eOrderType.STATIC_ORDER){\r\n                addSelectedOfferToMapStatic(selectedOffer);\r\n                updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());\r\n            } else if (orderType == eOrderType.DYNAMIC_ORDER){\r\n                addSelectedOfferToMapDynamic(selectedOffer,selectedDiscountWrapper.store);\r\n                updateDummyCartsAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition(),selectedDiscountWrapper.store);\r\n            }\r\n\r\n            updateDiscountWrappers();\r\n        }\r\n\r\n        if (operator.equals(\"ALL-OR-NOTHING\")){\r\n            offersTableView.getItems().forEach(item->{\r\n                System.out.println(\"Adding \" + item.getItemName() + \"to chosenDiscountOffers\");\r\n                if (orderType == eOrderType.STATIC_ORDER)\r\n                    addSelectedOfferToMapStatic(item);\r\n                if (orderType == eOrderType.DYNAMIC_ORDER)\r\n                    addSelectedOfferToMapDynamic(item, selectedDiscountWrapper.store);\r\n            });\r\n\r\n            updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());\r\n            updateDiscountWrappers();\r\n        }\r\n    }\r\n\r\n\r\n\r\n    private void updateDiscountWrappers() {\r\n        for (DiscountWrapper discountWrapper: discountsListView.getItems()){\r\n            int val =0;\r\n            if (orderType == eOrderType.DYNAMIC_ORDER)\r\n                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartsRepresentation.get(discountWrapper.store));\r\n            else if (orderType==eOrderType.STATIC_ORDER)\r\n                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartRepresentation);\r\n\r\n            if (selectedDiscountWrapper == discountWrapper){\r\n                discountWrapper.setTimesDiscountCanBeApplied(val);\r\n                setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    private void updateDummyCartsAfterUsingDiscount(DiscountCondition discountCondition, Store store) {\r\n        Double oldAmount = dummyCartsRepresentation.get(store).get(discountCondition.getIfYouBuyItem().getItemId());\r\n        double amountToSubtract = discountCondition.getQuantity();\r\n        Double newAmount = (oldAmount - amountToSubtract);\r\n        dummyCartsRepresentation.get(store).put(discountCondition.getIfYouBuyItem().getItemId(), newAmount);\r\n        System.out.println(\"New dummy cart for store:\" + store.getStoreName() +\":\" + dummyCartsRepresentation.get(store));\r\n    }\r\n\r\n    private void updateDummyCartAfterUsingDiscount(DiscountCondition discountCondition) {\r\n        Double oldAmount = dummyCartRepresentation.get(discountCondition.getIfYouBuyItem().getItemId());\r\n        double amountToSubtract = discountCondition.getQuantity();\r\n        Double newAmount = (oldAmount - amountToSubtract);\r\n        dummyCartRepresentation.put(discountCondition.getIfYouBuyItem().getItemId(), newAmount);\r\n        System.out.println(\"New dummy cart:\" + dummyCartRepresentation);\r\n    }\r\n\r\n\r\n    private void addSelectedOfferToMapStatic(DiscountOffer selectedItem) {\r\n        //if the item has not yet been added to map...\r\n        if (mapIdsToDiscountCartItems.get(selectedItem.getItemId()) == null){\r\n            System.out.println(selectedItem + \" was not yet in chosenDiscountOffers\");\r\n            CartItem item = new CartItem(selectedItem.getOfferItem()\r\n                    ,selectedItem.getQuantity(),selectedItem.getForAdditional()\r\n                    ,true, selectedDiscountWrapper.getStoreDiscount().getName(), selectedStore);\r\n            mapIdsToDiscountCartItems.put(item.getItemId(), item);\r\n            cartItems.add(item);\r\n        } else{\r\n            System.out.println(\"This item was already in dummyCart\");\r\n            CartItem item = mapIdsToDiscountCartItems.get(selectedItem.getItemId());\r\n            item.addToItemAmount(selectedItem.getQuantity());\r\n        }\r\n        double subtotal = getSubtotal();\r\n        subtotal += (selectedItem.getQuantity()*selectedItem.getForAdditional());\r\n        setSubtotal(subtotal);\r\n\r\n        discountsListView.refresh();\r\n        cartTable.refresh();\r\n        System.out.println(\"discountItemsToAddToCart is now: \" + mapIdsToDiscountCartItems);\r\n    }\r\n\r\n    private void addSelectedOfferToMapDynamic(DiscountOffer selectedItem, Store store) {\r\n        if (mapOfMapIdsToDiscountItem.get(store) == null){\r\n            HashMap<Integer,CartItem> map = new HashMap<>();\r\n            mapOfMapIdsToDiscountItem.put(store,map);\r\n        }\r\n        if (mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId()) == null){\r\n            System.out.println(selectedItem + \" was not yet in chosenDiscountOffers\");\r\n            CartItem item = new CartItem(selectedItem.getOfferItem()\r\n                    ,selectedItem.getQuantity(),selectedItem.getForAdditional()\r\n                    ,true, selectedDiscountWrapper.getStoreDiscount().getName(), store);\r\n\r\n            mapOfMapIdsToDiscountItem.get(store).put(item.getItemId(), item);\r\n            cartItems.add(item);\r\n        } else{\r\n            System.out.println(\"This item was already in dummyCart\");\r\n            CartItem item = mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId());\r\n            item.addToItemAmount(selectedItem.getQuantity());\r\n        }\r\n        double subtotal = getSubtotal();\r\n        subtotal += (selectedItem.getQuantity()*selectedItem.getForAdditional());\r\n        setSubtotal(subtotal);\r\n\r\n        discountsListView.refresh();\r\n        cartTable.refresh();\r\n        System.out.println(\"discountItemsToAddToCart is now: \" + mapOfMapIdsToDiscountItem);\r\n    }\r\n\r\n\r\n    private void updateOfferDetails() {\r\n        ifyoubuyValueLabel.setText(getIfYouBuyString(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition()));\r\n        discountTypeLabel.setText(selectedDiscountWrapper.storeDiscount.getDiscountOffers().getOperator());\r\n        updateOffersTableView(selectedDiscountWrapper.getStoreDiscount().getDiscountOffers());\r\n    }\r\n\r\n    private String getIfYouBuyString(DiscountCondition discountCondition) {\r\n        InventoryItem ifYouBuyItem = discountCondition.getIfYouBuyItem();\r\n\r\n        StringBuilder res = new StringBuilder(String.valueOf(discountCondition.getQuantity()));\r\n        if (ifYouBuyItem.getPurchaseCategory() == ePurchaseCategory.QUANTITY)\r\n            res.append(\" pcks\");\r\n        if (ifYouBuyItem.getPurchaseCategory() == ePurchaseCategory.WEIGHT)\r\n            res.append(\"kgs\");\r\n\r\n        res.append(\" of item \").append(ifYouBuyItem.getItemId()).append( \"(\").append(ifYouBuyItem.getItemName()).append(\")\");\r\n        return res.toString();\r\n\r\n    }\r\n\r\n    private void updateOffersTableView(DiscountOffers discountOffers) {\r\n        discountOffersObservableList.clear();\r\n        discountOffersObservableList.addAll(discountOffers.getDiscountOffers());\r\n\r\n        offersTableView.setItems(discountOffersObservableList);\r\n        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals(\"ONE-OF\")){\r\n            offersTableView.setSelectionModel(defaultSelectionModel);\r\n            System.out.println(\"Do something for ONE-OF type\");\r\n            offersTableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);\r\n            offersTableView.getSelectionModel().selectFirst();\r\n        }\r\n        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals(\"ALL-OR-NOTHING\")){\r\n            System.out.println(\"Do something for ALL-OR-NOTHING type\");\r\n            offersTableView.setSelectionModel(null);\r\n        }\r\n    }\r\n\r\n    public void setIsDiscountApplicable(boolean isDiscountApplicable) {\r\n        this.isDiscountApplicable.set(isDiscountApplicable);\r\n    }\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n\r\n\r\n        subtotal = new SimpleDoubleProperty(this, \"subtotal\",0);\r\n        cartSubtotalLabel.textProperty().bind(subtotal.asString(\"%.2f\"));\r\n        total = new SimpleDoubleProperty(this, \"total\",0);\r\n        deliveryFee = new SimpleFloatProperty(this, \"deliveryFee\",0);\r\n        deliveryFeeLabel.textProperty().bind(deliveryFee.asString(\"%.2f\"));\r\n        totalCostLabel.textProperty().bind((subtotal.add(deliveryFee)).asString(\"%.2f\"));\r\n        addButton.disableProperty().bind(isDiscountApplicable.not());\r\n        itemIdColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Integer>(\"ItemId\"));\r\n        itemNameColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,String>(\"ItemName\"));\r\n        itemQuantityColumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Double>(\"quantity\"));\r\n        forAdditionalCoumn.setCellValueFactory(new PropertyValueFactory<DiscountOffer,Integer>(\"forAdditional\"));\r\n        defaultSelectionModel = offersTableView.getSelectionModel();\r\n\r\n\r\n        cartItemIdColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>(\"itemId\"));\r\n        cartItemNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>(\"itemName\"));\r\n        cartForAdditionalColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>(\"price\"));\r\n        cartQuantityColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>(\"itemAmount\"));\r\n        costColumn.setCellValueFactory(new PropertyValueFactory<CartItem,Double>(\"cost\"));\r\n        cartDiscountNameColumn.setCellValueFactory(new PropertyValueFactory<CartItem,String>(\"discountName\"));\r\n\r\n        cartTable.setItems(cartItems);\r\n    }\r\n\r\n    public void fillViewsBasedOnDynamicOrder(HashMap<Store, Cart> mapStoresToCarts) {\r\n        System.out.println(\"Filling info based on dynamic order\");\r\n        orderType = eOrderType.DYNAMIC_ORDER;\r\n        mapStoresToCarts.forEach((k,v)->{\r\n            dummyCartsRepresentation.put(k, createDummyCartRepresentation(v));\r\n        });\r\n\r\n        boolean atLeastOneSale = false;\r\n        for (Store store: dummyCartsRepresentation.keySet()){\r\n            if (store.getStoreDiscounts().size()==0){\r\n                System.out.println(\"Store \" + store.getStoreName() + \" has no discounts!\");\r\n            } else{\r\n                System.out.println(\"Store \" + store.getStoreName() + \" has following discounts: \" + store.getStoreDiscounts());\r\n                atLeastOneSale=true;\r\n            }\r\n        }\r\n        if (!atLeastOneSale)\r\n            setIsDiscountApplicable(false);\r\n\r\n\r\n        dummyCartsRepresentation.keySet().forEach(store->{\r\n            System.out.println(\"\");\r\n            store.getStoreDiscounts().forEach(discount-> discountWrappers.add(new DiscountWrapper(discount)));\r\n        });\r\n\r\n        for (DiscountWrapper discountWrapper : discountWrappers){\r\n            StoreDiscount discount = discountWrapper.getStoreDiscount();\r\n            Store store = discountWrapper.store;\r\n            int timesDiscountCanBeApplied = discount.countTimesConditionIsMet(dummyCartsRepresentation.get(store));\r\n            System.out.println(\"Based on current cart, discount: \" + discount.getName() + \" can be applied \" + timesDiscountCanBeApplied + \" times\");\r\n            discountWrapper.setTimesDiscountCanBeApplied(timesDiscountCanBeApplied);\r\n        }\r\n        setUpDiscountsListView();\r\n    }\r\n\r\n    public void fillViewsBasedOnStoreAndCart(Store selectedStore, Cart inputCart) {\r\n        orderType = eOrderType.STATIC_ORDER;\r\n        System.out.println(\"Filling info based on static order\");\r\n        dummyCartRepresentation = createDummyCartRepresentation(inputCart);\r\n        mapIdsToDiscountCartItems = new HashMap<>();\r\n        this.selectedStore = selectedStore;\r\n        clearItemsFromScreen();\r\n\r\n\r\n        if (selectedStore.getStoreDiscounts().size()==0){\r\n            System.out.println(\"This store has no discounts!\");\r\n            setIsDiscountApplicable(false);\r\n            return;\r\n        }\r\n\r\n        selectedStore.getStoreDiscounts().forEach(discount-> discountWrappers.add(new DiscountWrapper(discount)));\r\n        for (DiscountWrapper discountWrapper : discountWrappers){\r\n            StoreDiscount discount = discountWrapper.getStoreDiscount();\r\n            int timesDiscountCanBeApplied = discount.countTimesConditionIsMet(dummyCartRepresentation);\r\n            System.out.println(\"Based on current cart, discount: \" + discount.getName() + \" can be applied \" + timesDiscountCanBeApplied + \" times\");\r\n            discountWrapper.setTimesDiscountCanBeApplied(timesDiscountCanBeApplied);\r\n        }\r\n\r\n        setUpDiscountsListView();\r\n    }\r\n\r\n    private void setUpDiscountsListView() {\r\n        discountsListView.setItems(discountWrappers);\r\n        discountsListView.getSelectionModel().selectedItemProperty().addListener(\r\n                discountWrapperChangeListener = (((observable, oldValue, newValue) -> {\r\n                    System.out.println(\"Change Listener called!\");\r\n                    selectedDiscountWrapper = newValue;\r\n                    if (newValue != null){\r\n                        System.out.println(\"isDiscountApplicable will be set to: \" + (newValue.getTimesDiscountCanBeApplied() >0));\r\n                        setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);\r\n                        updateOfferDetails();\r\n                        //remainingTimesLabel.setText(\"This offer can be applied \" + selectedDiscountWrapper.getTimesDiscountCanBeApplied() + \" times\");\r\n                    }\r\n                }))\r\n        );\r\n        discountsListView.getSelectionModel().selectFirst();\r\n    }\r\n\r\n    private void clearItemsFromScreen() {\r\n        discountsListView.getItems().clear();\r\n        discountWrappers.clear();\r\n        offersTableView.getItems().clear();\r\n        //remainingTimesLabel.setText(\"\");\r\n    }\r\n\r\n    private HashMap<Integer, Double> createDummyCartRepresentation(Cart inputCart) {\r\n        HashMap res = new HashMap<Integer, Double>();\r\n        for (CartItem cartItem: inputCart.getCart().values()){\r\n            res.put(cartItem.getItemId(), cartItem.getItemAmount());\r\n        }\r\n        return res;\r\n    }\r\n\r\n\r\n\r\n    public HashMap<Integer, CartItem> getMapIdsToDiscountCartItems() {\r\n        return mapIdsToDiscountCartItems;\r\n    }\r\n    public HashMap<Store, HashMap<Integer,CartItem>> getMapIdsToDiscountCartItemsDynamic() {\r\n        return mapOfMapIdsToDiscountItem;\r\n    }\r\n\r\n    public void fillCustomerLabels(Customer customer) {\r\n        customerLabel.setText(\"Customer: \"+customer.getCustomerName());\r\n        customerLocationLabel.setText(\"Customer Location: \" + customer.getLocation());\r\n    }\r\n\r\n    public void fillOrderLabels(double cartTotalPrice, float deliveryFee) {\r\n        setDeliveryFee(deliveryFee);\r\n        setSubtotal(cartTotalPrice);\r\n    }\r\n\r\n    public double getSubtotal() {\r\n        return subtotal.get();\r\n    }\r\n\r\n    public DoubleProperty subtotalProperty() {\r\n        return subtotal;\r\n    }\r\n\r\n    public void setSubtotal(double subtotal) {\r\n        this.subtotal.set(subtotal);\r\n    }\r\n\r\n    public float getDeliveryFee() {\r\n        return deliveryFee.get();\r\n    }\r\n\r\n    public FloatProperty deliveryFeeProperty() {\r\n        return deliveryFee;\r\n    }\r\n\r\n    public void setDeliveryFee(float deliveryFee) {\r\n        this.deliveryFee.set(deliveryFee);\r\n    }\r\n\r\n    public void resetFields() {\r\n        cartItems.clear();\r\n        cartTable.getItems().clear();\r\n        setDeliveryFee(0);\r\n        setSubtotal(0);\r\n        mapOfMapIdsToDiscountItem.clear();\r\n        mapIdsToDiscountCartItems.clear();\r\n        discountsListView.getItems().clear();\r\n        discountOffersObservableList.clear();\r\n        discountWrappers.clear();\r\n    }\r\n\r\n\r\n    private class DiscountWrapper {\r\n        private Store store;\r\n        private StoreDiscount storeDiscount;\r\n        private IntegerProperty timesDiscountCanBeApplied;\r\n\r\n        public DiscountWrapper(StoreDiscount discount){\r\n            this.storeDiscount = discount;\r\n            timesDiscountCanBeApplied = new SimpleIntegerProperty(0);\r\n            this.store = discount.getStore();\r\n        }\r\n\r\n        public IntegerProperty timesDiscountCanBeAppliedProperty() {\r\n            return timesDiscountCanBeApplied;\r\n        }\r\n\r\n        public StoreDiscount getStoreDiscount() {\r\n            return storeDiscount;\r\n        }\r\n\r\n        public int getTimesDiscountCanBeApplied() {\r\n            return timesDiscountCanBeApplied.get();\r\n        }\r\n\r\n        public void setTimesDiscountCanBeApplied(int timesDiscountCanBeApplied) {\r\n            this.timesDiscountCanBeApplied.set(timesDiscountCanBeApplied);\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return storeDiscount.getName() + \"x (\" + getTimesDiscountCanBeApplied() + \")\";\r\n        }\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseDiscounts/ChooseDiscountsController.java	(date 1601046324078)
@@ -5,7 +5,6 @@
 import Logic.Inventory.ePurchaseCategory;
 import Logic.Order.Cart;
 import Logic.Order.CartItem;
-import Logic.Order.eOrderType;
 import Logic.Store.*;
 import javafx.beans.property.*;
 import javafx.beans.value.ChangeListener;
@@ -21,6 +20,8 @@
 import java.util.HashMap;
 import java.util.ResourceBundle;
 
+//TODO: Implement IRRELEVANT discount
+
 public class ChooseDiscountsController implements Initializable {
 
 
@@ -93,7 +94,6 @@
     private Button addButton;
 
     private final ObservableList<DiscountWrapper> discountWrappers = FXCollections.observableArrayList();
-
     private final ObservableList<DiscountOffer> discountOffersObservableList = FXCollections.observableArrayList();
     private ChangeListener<DiscountWrapper> discountWrapperChangeListener;
     private DiscountWrapper selectedDiscountWrapper;
@@ -102,10 +102,7 @@
 
     private HashMap<Integer, Double> dummyCartRepresentation;
     private HashMap<Integer, CartItem> mapIdsToDiscountCartItems;
-
-    private HashMap<Store, HashMap<Integer,Double>> dummyCartsRepresentation;
-    private HashMap<Store,HashMap<Integer,CartItem>> mapOfMapIdsToDiscountItem;
-
+    private DoubleProperty regularItemsSubtotal;
 
 
     TableView.TableViewSelectionModel<DiscountOffer> defaultSelectionModel;
@@ -113,13 +110,11 @@
     private FloatProperty deliveryFee;
     private DoubleProperty total;
     private ObservableList<CartItem> cartItems;
-    private eOrderType orderType;
 
     public ChooseDiscountsController(){
         cartItems = FXCollections.observableArrayList();
-        dummyCartsRepresentation = new HashMap<>();
         mapIdsToDiscountCartItems = new HashMap<>();
-        mapOfMapIdsToDiscountItem = new HashMap<>();
+        regularItemsSubtotal = new SimpleDoubleProperty(0);
     }
 
 
@@ -127,29 +122,20 @@
     void addButtonAction(ActionEvent event) {
         String operator = selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator();
         System.out.println("addButton called for " + operator + " discount");
-        if (operator.equals("ONE-OF")){
-            DiscountOffer selectedOffer = offersTableView.getSelectionModel().getSelectedItem();
-            System.out.println("Adding " + selectedOffer.getItemName() + "to chosenDiscountOffers");
-            if (orderType==eOrderType.STATIC_ORDER){
-                addSelectedOfferToMapStatic(selectedOffer);
-                updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());
-            } else if (orderType == eOrderType.DYNAMIC_ORDER){
-                addSelectedOfferToMapDynamic(selectedOffer,selectedDiscountWrapper.store);
-                updateDummyCartsAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition(),selectedDiscountWrapper.store);
-            }
-
-            updateDiscountWrappers();
-        }
 
         if (operator.equals("ALL-OR-NOTHING")){
             offersTableView.getItems().forEach(item->{
                 System.out.println("Adding " + item.getItemName() + "to chosenDiscountOffers");
-                if (orderType == eOrderType.STATIC_ORDER)
-                    addSelectedOfferToMapStatic(item);
-                if (orderType == eOrderType.DYNAMIC_ORDER)
-                    addSelectedOfferToMapDynamic(item, selectedDiscountWrapper.store);
+                addSelectedOfferToMapStatic(item);
             });
 
+            updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());
+            updateDiscountWrappers();
+            return;
+        } else{
+            DiscountOffer selectedOffer = offersTableView.getSelectionModel().getSelectedItem();
+            System.out.println("Adding " + selectedOffer.getItemName() + "to chosenDiscountOffers");
+            addSelectedOfferToMapStatic(selectedOffer);
             updateDummyCartAfterUsingDiscount(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition());
             updateDiscountWrappers();
         }
@@ -160,26 +146,14 @@
     private void updateDiscountWrappers() {
         for (DiscountWrapper discountWrapper: discountsListView.getItems()){
             int val =0;
-            if (orderType == eOrderType.DYNAMIC_ORDER)
-                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartsRepresentation.get(discountWrapper.store));
-            else if (orderType==eOrderType.STATIC_ORDER)
-                val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartRepresentation);
+            val = discountWrapper.getStoreDiscount().countTimesConditionIsMet(dummyCartRepresentation);
 
             if (selectedDiscountWrapper == discountWrapper){
                 discountWrapper.setTimesDiscountCanBeApplied(val);
                 setIsDiscountApplicable(selectedDiscountWrapper.getTimesDiscountCanBeApplied()>0);
-
             }
         }
     }
-
-    private void updateDummyCartsAfterUsingDiscount(DiscountCondition discountCondition, Store store) {
-        Double oldAmount = dummyCartsRepresentation.get(store).get(discountCondition.getIfYouBuyItem().getItemId());
-        double amountToSubtract = discountCondition.getQuantity();
-        Double newAmount = (oldAmount - amountToSubtract);
-        dummyCartsRepresentation.get(store).put(discountCondition.getIfYouBuyItem().getItemId(), newAmount);
-        System.out.println("New dummy cart for store:" + store.getStoreName() +":" + dummyCartsRepresentation.get(store));
-    }
 
     private void updateDummyCartAfterUsingDiscount(DiscountCondition discountCondition) {
         Double oldAmount = dummyCartRepresentation.get(discountCondition.getIfYouBuyItem().getItemId());
@@ -189,7 +163,6 @@
         System.out.println("New dummy cart:" + dummyCartRepresentation);
     }
 
-
     private void addSelectedOfferToMapStatic(DiscountOffer selectedItem) {
         //if the item has not yet been added to map...
         if (mapIdsToDiscountCartItems.get(selectedItem.getItemId()) == null){
@@ -213,34 +186,6 @@
         System.out.println("discountItemsToAddToCart is now: " + mapIdsToDiscountCartItems);
     }
 
-    private void addSelectedOfferToMapDynamic(DiscountOffer selectedItem, Store store) {
-        if (mapOfMapIdsToDiscountItem.get(store) == null){
-            HashMap<Integer,CartItem> map = new HashMap<>();
-            mapOfMapIdsToDiscountItem.put(store,map);
-        }
-        if (mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId()) == null){
-            System.out.println(selectedItem + " was not yet in chosenDiscountOffers");
-            CartItem item = new CartItem(selectedItem.getOfferItem()
-                    ,selectedItem.getQuantity(),selectedItem.getForAdditional()
-                    ,true, selectedDiscountWrapper.getStoreDiscount().getName(), store);
-
-            mapOfMapIdsToDiscountItem.get(store).put(item.getItemId(), item);
-            cartItems.add(item);
-        } else{
-            System.out.println("This item was already in dummyCart");
-            CartItem item = mapOfMapIdsToDiscountItem.get(store).get(selectedItem.getItemId());
-            item.addToItemAmount(selectedItem.getQuantity());
-        }
-        double subtotal = getSubtotal();
-        subtotal += (selectedItem.getQuantity()*selectedItem.getForAdditional());
-        setSubtotal(subtotal);
-
-        discountsListView.refresh();
-        cartTable.refresh();
-        System.out.println("discountItemsToAddToCart is now: " + mapOfMapIdsToDiscountItem);
-    }
-
-
     private void updateOfferDetails() {
         ifyoubuyValueLabel.setText(getIfYouBuyString(selectedDiscountWrapper.getStoreDiscount().getDiscountCondition()));
         discountTypeLabel.setText(selectedDiscountWrapper.storeDiscount.getDiscountOffers().getOperator());
@@ -266,7 +211,7 @@
         discountOffersObservableList.addAll(discountOffers.getDiscountOffers());
 
         offersTableView.setItems(discountOffersObservableList);
-        if (selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals("ONE-OF")){
+        if (!selectedDiscountWrapper.getStoreDiscount().getDiscountOffers().getOperator().equals("ALL-OR-NOTHING")){
             offersTableView.setSelectionModel(defaultSelectionModel);
             System.out.println("Do something for ONE-OF type");
             offersTableView.getSelectionModel().setSelectionMode(SelectionMode.SINGLE);
@@ -285,9 +230,8 @@
     @Override
     public void initialize(URL location, ResourceBundle resources) {
 
-
         subtotal = new SimpleDoubleProperty(this, "subtotal",0);
-        cartSubtotalLabel.textProperty().bind(subtotal.asString("%.2f"));
+        cartSubtotalLabel.textProperty().bind(subtotal.add(regularItemsSubtotal).asString("%.2f"));
         total = new SimpleDoubleProperty(this, "total",0);
         deliveryFee = new SimpleFloatProperty(this, "deliveryFee",0);
         deliveryFeeLabel.textProperty().bind(deliveryFee.asString("%.2f"));
@@ -310,43 +254,11 @@
         cartTable.setItems(cartItems);
     }
 
-    public void fillViewsBasedOnDynamicOrder(HashMap<Store, Cart> mapStoresToCarts) {
-        System.out.println("Filling info based on dynamic order");
-        orderType = eOrderType.DYNAMIC_ORDER;
-        mapStoresToCarts.forEach((k,v)->{
-            dummyCartsRepresentation.put(k, createDummyCartRepresentation(v));
-        });
-
-        boolean atLeastOneSale = false;
-        for (Store store: dummyCartsRepresentation.keySet()){
-            if (store.getStoreDiscounts().size()==0){
-                System.out.println("Store " + store.getStoreName() + " has no discounts!");
-            } else{
-                System.out.println("Store " + store.getStoreName() + " has following discounts: " + store.getStoreDiscounts());
-                atLeastOneSale=true;
-            }
-        }
-        if (!atLeastOneSale)
-            setIsDiscountApplicable(false);
-
-
-        dummyCartsRepresentation.keySet().forEach(store->{
-            System.out.println("");
-            store.getStoreDiscounts().forEach(discount-> discountWrappers.add(new DiscountWrapper(discount)));
-        });
-
-        for (DiscountWrapper discountWrapper : discountWrappers){
-            StoreDiscount discount = discountWrapper.getStoreDiscount();
-            Store store = discountWrapper.store;
-            int timesDiscountCanBeApplied = discount.countTimesConditionIsMet(dummyCartsRepresentation.get(store));
-            System.out.println("Based on current cart, discount: " + discount.getName() + " can be applied " + timesDiscountCanBeApplied + " times");
-            discountWrapper.setTimesDiscountCanBeApplied(timesDiscountCanBeApplied);
-        }
-        setUpDiscountsListView();
-    }
-
-    public void fillViewsBasedOnStoreAndCart(Store selectedStore, Cart inputCart) {
-        orderType = eOrderType.STATIC_ORDER;
+    public void fillViewsForStaticOrder(Customer customer, Store selectedStore, Cart inputCart, float deliveryFee, double regularItemsSubtotal) {
+        customerLabel.setText("Customer: "+customer.getCustomerName());
+        customerLocationLabel.setText("Customer Location: " + customer.getLocation());
+        setDeliveryFee(deliveryFee);
+        setRegularItemsSubtotal(regularItemsSubtotal);
         System.out.println("Filling info based on static order");
         dummyCartRepresentation = createDummyCartRepresentation(inputCart);
         mapIdsToDiscountCartItems = new HashMap<>();
@@ -408,14 +320,8 @@
     public HashMap<Integer, CartItem> getMapIdsToDiscountCartItems() {
         return mapIdsToDiscountCartItems;
     }
-    public HashMap<Store, HashMap<Integer,CartItem>> getMapIdsToDiscountCartItemsDynamic() {
-        return mapOfMapIdsToDiscountItem;
-    }
 
-    public void fillCustomerLabels(Customer customer) {
-        customerLabel.setText("Customer: "+customer.getCustomerName());
-        customerLocationLabel.setText("Customer Location: " + customer.getLocation());
-    }
+
 
     public void fillOrderLabels(double cartTotalPrice, float deliveryFee) {
         setDeliveryFee(deliveryFee);
@@ -446,18 +352,37 @@
         this.deliveryFee.set(deliveryFee);
     }
 
+    public double getRegularItemsSubtotal() {
+        return regularItemsSubtotal.get();
+    }
+
+    public DoubleProperty regularItemsSubtotalProperty() {
+        return regularItemsSubtotal;
+    }
+
+    public void setRegularItemsSubtotal(double regularItemsSubtotal) {
+        this.regularItemsSubtotal.set(regularItemsSubtotal);
+    }
+
     public void resetFields() {
         cartItems.clear();
         cartTable.getItems().clear();
         setDeliveryFee(0);
         setSubtotal(0);
-        mapOfMapIdsToDiscountItem.clear();
         mapIdsToDiscountCartItems.clear();
         discountsListView.getItems().clear();
         discountOffersObservableList.clear();
         discountWrappers.clear();
     }
 
+    public double getDiscountsSubtotal() {
+        double total = 0;
+        for (CartItem item: mapIdsToDiscountCartItems.values()){
+            total += item.getPrice();
+        }
+        return total;
+    }
+
 
     private class DiscountWrapper {
         private Store store;
Index: out/production/SDM_Targil2/components/ViewInfo/ViewMap/Map.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- out/production/SDM_Targil2/components/ViewInfo/ViewMap/Map.fxml	(date 1601046324126)
+++ out/production/SDM_Targil2/components/ViewInfo/ViewMap/Map.fxml	(date 1601046324126)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.BorderPane?>
+<?import javafx.scene.layout.StackPane?>
+
+
+<BorderPane xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapController">
+   <center>
+      <AnchorPane fx:id="mapAnchorPane" prefHeight="400.0" prefWidth="600.0">
+
+</AnchorPane>
+   </center>
+   <bottom>
+      <StackPane prefHeight="66.0" prefWidth="600.0" BorderPane.alignment="CENTER">
+         <children>
+            <Label fx:id="statusMsg" text="Label" />
+         </children>
+      </StackPane>
+   </bottom>
+</BorderPane>
Index: out/production/SDM_Targil2/components/ViewInfo/ViewMap/TilePaneMap.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- out/production/SDM_Targil2/components/ViewInfo/ViewMap/TilePaneMap.fxml	(date 1601046324136)
+++ out/production/SDM_Targil2/components/ViewInfo/ViewMap/TilePaneMap.fxml	(date 1601046324136)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.scene.layout.ColumnConstraints?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.RowConstraints?>
+<?import javafx.scene.layout.TilePane?>
+
+<GridPane fx:id="gridPane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="527.0" xmlns:fx="http://javafx.com/fxml/1" xmlns="http://javafx.com/javafx/8.0.171" fx:controller="components.ViewInfo.ViewMap.TilePaneMapController">
+  <columnConstraints>
+    <ColumnConstraints hgrow="NEVER" maxWidth="10.0" minWidth="5.0" prefWidth="10.0" />
+    <ColumnConstraints hgrow="SOMETIMES" maxWidth="510.0" minWidth="10.0" prefWidth="399.0" />
+      <ColumnConstraints hgrow="NEVER" maxWidth="10.0" minWidth="10.0" prefWidth="10.0" />
+  </columnConstraints>
+  <rowConstraints>
+    <RowConstraints maxHeight="10.0" minHeight="10.0" prefHeight="10.0" vgrow="NEVER" />
+    <RowConstraints maxHeight="369.0" minHeight="10.0" prefHeight="300.0" vgrow="SOMETIMES" />
+    <RowConstraints maxHeight="10.0" minHeight="10.0" prefHeight="10.0" vgrow="NEVER" />
+  </rowConstraints>
+   <children>
+      <TilePane fx:id="tilePane" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+   </children>
+</GridPane>
Index: out/production/SDM_Targil2/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.ComboBox?>\r\n<?import javafx.scene.control.DatePicker?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.RadioButton?>\r\n<?import javafx.scene.control.ToggleGroup?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<AnchorPane fx:id=\"mainPane\" maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefHeight=\"559.0\" prefWidth=\"730.0\" style=\"-fx-background-color: #fff;\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.PlaceAnOrder.BasicInfo.OrderBasicInfoController\">\r\n   <children>\r\n      <Label layoutX=\"184.0\" layoutY=\"97.0\" text=\"Place an order\" textFill=\"#4d4c4c\">\r\n         <font>\r\n            <Font size=\"16.0\" />\r\n         </font>\r\n      </Label>\r\n      <ImageView fitHeight=\"87.0\" fitWidth=\"90.0\" layoutX=\"87.0\" layoutY=\"54.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@/resources/placeanorder.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <Label layoutX=\"184.0\" layoutY=\"158.0\" text=\"CHOOSE CUSTOMER\" textFill=\"#aeacac\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"184.0\" layoutY=\"270.0\" text=\"DATE\" textFill=\"#aeacac\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"184.0\" layoutY=\"391.0\" text=\"ORDER TYPE\" textFill=\"#aeacac\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <ComboBox fx:id=\"chooseCustomerCB\" layoutX=\"184.0\" layoutY=\"189.0\" prefHeight=\"25.0\" prefWidth=\"158.0\" />\r\n      <DatePicker fx:id=\"chooseDateDP\" layoutX=\"184.0\" layoutY=\"307.0\" />\r\n      <RadioButton fx:id=\"radioStaticOrder\" layoutX=\"201.0\" layoutY=\"429.0\" text=\"Static order\">\r\n         <toggleGroup>\r\n            <ToggleGroup fx:id=\"orderTypeGroup\" />\r\n         </toggleGroup></RadioButton>\r\n      <RadioButton fx:id=\"radioDynamicOrder\" layoutX=\"201.0\" layoutY=\"453.0\" text=\"Dynamic order\" toggleGroup=\"$orderTypeGroup\" />\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- out/production/SDM_Targil2/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ out/production/SDM_Targil2/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml	(date 1601046324103)
@@ -37,7 +37,7 @@
             <Font size="14.0" />
          </font>
       </Label>
-      <ComboBox fx:id="chooseCustomerCB" layoutX="184.0" layoutY="189.0" prefHeight="25.0" prefWidth="158.0" />
+      <ComboBox fx:id="chooseCustomerCB" layoutX="184.0" layoutY="189.0" prefHeight="25.0" prefWidth="351.0" />
       <DatePicker fx:id="chooseDateDP" layoutX="184.0" layoutY="307.0" />
       <RadioButton fx:id="radioStaticOrder" layoutX="201.0" layoutY="429.0" text="Static order">
          <toggleGroup>
Index: out/production/SDM_Targil2/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- out/production/SDM_Targil2/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml	(date 1601046324110)
+++ out/production/SDM_Targil2/components/PlaceAnOrder/ChooseDiscounts/DynamicOrderDiscounts/DynamicDiscounts.fxml	(date 1601046324110)
@@ -0,0 +1,142 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<?import javafx.geometry.Insets?>
+<?import javafx.scene.control.Button?>
+<?import javafx.scene.control.Label?>
+<?import javafx.scene.control.ListView?>
+<?import javafx.scene.control.SplitPane?>
+<?import javafx.scene.control.TableColumn?>
+<?import javafx.scene.control.TableView?>
+<?import javafx.scene.layout.AnchorPane?>
+<?import javafx.scene.layout.ColumnConstraints?>
+<?import javafx.scene.layout.GridPane?>
+<?import javafx.scene.layout.RowConstraints?>
+<?import javafx.scene.text.Font?>
+
+<GridPane hgap="5.0" prefHeight="515.0" prefWidth="784.0" vgap="5.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.PlaceAnOrder.ChooseDiscounts.DynamicOrderDiscounts.DynamicDiscountsController">
+    <columnConstraints>
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="649.0" minWidth="10.0" prefWidth="61.0" />
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="712.0" minWidth="10.0" prefWidth="595.0" />
+        <ColumnConstraints hgrow="NEVER" maxWidth="712.0" minWidth="10.0" prefWidth="85.0" />
+        <ColumnConstraints hgrow="SOMETIMES" maxWidth="516.0" minWidth="10.0" prefWidth="319.0" />
+    </columnConstraints>
+    <rowConstraints>
+        <RowConstraints maxHeight="164.0" minHeight="7.0" prefHeight="48.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="228.0" minHeight="5.0" prefHeight="27.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="228.0" minHeight="1.0" prefHeight="27.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="281.0" minHeight="10.0" prefHeight="206.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="427.0" minHeight="10.0" prefHeight="36.0" vgrow="SOMETIMES" />
+        <RowConstraints maxHeight="427.0" minHeight="10.0" prefHeight="191.0" vgrow="SOMETIMES" />
+        <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+    </rowConstraints>
+    <children>
+        <Label text="Your order" GridPane.columnIndex="1">
+            <font>
+                <Font size="16.0" />
+            </font>
+            <GridPane.margin>
+                <Insets left="40.0" />
+            </GridPane.margin>
+        </Label>
+        <Label alignment="TOP_CENTER" text="Order summary" GridPane.columnIndex="3">
+            <opaqueInsets>
+                <Insets left="50.0" />
+            </opaqueInsets>
+            <font>
+                <Font size="16.0" />
+            </font>
+        </Label>
+        <Label fx:id="customerLabel" alignment="TOP_LEFT" text="Customer:" GridPane.columnIndex="1" GridPane.rowIndex="1">
+            <opaqueInsets>
+                <Insets left="50.0" />
+            </opaqueInsets>
+            <GridPane.margin>
+                <Insets left="40.0" />
+            </GridPane.margin>
+        </Label>
+        <Label fx:id="customerLocationLabel" text="Customer location:" GridPane.columnIndex="1" GridPane.rowIndex="2">
+            <GridPane.margin>
+                <Insets left="40.0" />
+            </GridPane.margin>
+        </Label>
+        <Button fx:id="addButton" onAction="#addButtonAction" text="Add to cart" GridPane.columnIndex="1" GridPane.halignment="CENTER" GridPane.rowIndex="4">
+            <GridPane.margin>
+                <Insets bottom="10.0" top="10.0" />
+            </GridPane.margin>
+        </Button>
+        <TableView fx:id="cartTable" prefHeight="200.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="5">
+            <columns>
+                <TableColumn fx:id="cartDiscountNameColumn" prefWidth="75.0" text="Discount" />
+                <TableColumn fx:id="cartItemIdColumn" prefWidth="75.0" text="Item-ID" />
+                <TableColumn fx:id="cartItemNameColumn" prefWidth="75.0" text="Item-Name" />
+                <TableColumn fx:id="cartQuantityColumn" prefWidth="75.0" text="Quantity" />
+                <TableColumn fx:id="cartForAdditionalColumn" prefWidth="100.0" text="For Additional" />
+                <TableColumn fx:id="costColumn" prefWidth="75.0" text="Cost" />
+            </columns></TableView>
+        <GridPane GridPane.columnIndex="3" GridPane.rowIndex="3">
+            <columnConstraints>
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+                <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
+            </columnConstraints>
+            <rowConstraints>
+                <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" vgrow="SOMETIMES" />
+                <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+            </rowConstraints>
+            <children>
+                <Label text="Cart subtotal:" GridPane.valignment="TOP" />
+                <Label text="Delivery fee:" GridPane.rowIndex="1" GridPane.valignment="TOP">
+                    <GridPane.margin>
+                        <Insets />
+                    </GridPane.margin>
+                </Label>
+                <Label text="Total:" GridPane.rowIndex="2" GridPane.valignment="TOP">
+                    <GridPane.margin>
+                        <Insets />
+                    </GridPane.margin>
+                </Label>
+                <Label fx:id="cartSubtotalLabel" text="Label" GridPane.columnIndex="1" GridPane.valignment="TOP" />
+                <Label fx:id="deliveryFeeLabel" text="Label" GridPane.columnIndex="1" GridPane.rowIndex="1" GridPane.valignment="TOP" />
+                <Label fx:id="totalCostLabel" text="Label" GridPane.columnIndex="1" GridPane.rowIndex="2" GridPane.valignment="TOP" />
+            </children>
+        </GridPane>
+        <SplitPane dividerPositions="0.29797979797979796" prefHeight="160.0" prefWidth="200.0" GridPane.columnIndex="1" GridPane.rowIndex="3">
+            <items>
+                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
+                    <ListView fx:id="discountsListView" prefHeight="200.0" prefWidth="200.0" AnchorPane.bottomAnchor="0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" />
+                </AnchorPane>
+                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
+                    <GridPane prefHeight="260.0" prefWidth="187.0" AnchorPane.bottomAnchor="-0.0" AnchorPane.leftAnchor="0.0" AnchorPane.rightAnchor="0.0" AnchorPane.topAnchor="0.0" GridPane.columnIndex="2" GridPane.rowIndex="1">
+                        <columnConstraints>
+                            <ColumnConstraints hgrow="SOMETIMES" maxWidth="271.0" minWidth="10.0" prefWidth="86.0" />
+                            <ColumnConstraints hgrow="SOMETIMES" maxWidth="278.0" minWidth="10.0" prefWidth="269.0" />
+                        </columnConstraints>
+                        <rowConstraints>
+                            <RowConstraints minHeight="10.0" prefHeight="30.0" vgrow="SOMETIMES" />
+                            <RowConstraints maxHeight="47.0" minHeight="10.0" prefHeight="44.0" vgrow="SOMETIMES" />
+                            <RowConstraints maxHeight="168.0" minHeight="10.0" prefHeight="139.0" vgrow="SOMETIMES" />
+                        </rowConstraints>
+                        <children>
+                            <TableView fx:id="offersTableView" prefHeight="200.0" prefWidth="330.0" GridPane.columnSpan="2" GridPane.rowIndex="2">
+                                <columns>
+                                    <TableColumn fx:id="itemIdColumn" prefWidth="32.0" text="id" />
+                                    <TableColumn fx:id="itemNameColumn" prefWidth="84.0" text="item-name" />
+                                    <TableColumn fx:id="itemQuantityColumn" prefWidth="60.0" text="quantity" />
+                                    <TableColumn fx:id="forAdditionalCoumn" prefWidth="124.0" text="for additional" />
+                                </columns>
+                            </TableView>
+                            <Label text="If you buy:" />
+                            <Label text="Then you get" GridPane.rowIndex="1" />
+                            <Label fx:id="discountTypeLabel" text="Label" GridPane.columnIndex="1" GridPane.rowIndex="1" />
+                            <Label fx:id="ifyoubuyValueLabel" text="Label" GridPane.columnIndex="1" />
+                        </children>
+                    </GridPane>
+                </AnchorPane>
+            </items>
+        </SplitPane>
+    </children>
+    <opaqueInsets>
+        <Insets />
+    </opaqueInsets>
+</GridPane>
Index: out/production/SDM_Targil2/components/ViewInfo/ViewMap/ViewMap.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.ScrollPane?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.layout.Pane?>\r\n\r\n<Pane fx:id=\"root\" prefHeight=\"418.0\" prefWidth=\"702.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.ViewInfo.ViewMap.ViewMapController\">\r\n   <children>\r\n      <ScrollPane fx:id=\"scrollp\" fitToHeight=\"true\" fitToWidth=\"true\" prefHeight=\"418.0\" prefWidth=\"702.0\">\r\n        <content>\r\n          <AnchorPane fx:id=\"scrollpChildAnchorPane\" minHeight=\"0.0\" minWidth=\"0.0\" prefHeight=\"482.0\" prefWidth=\"700.0\" />\r\n        </content>\r\n      </ScrollPane>\r\n   </children>\r\n</Pane>\r\n
===================================================================
--- out/production/SDM_Targil2/components/ViewInfo/ViewMap/ViewMap.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ out/production/SDM_Targil2/components/ViewInfo/ViewMap/MapBackup/ViewMap.fxml	(date 1601046324193)
@@ -4,7 +4,7 @@
 <?import javafx.scene.layout.AnchorPane?>
 <?import javafx.scene.layout.Pane?>
 
-<Pane fx:id="root" prefHeight="418.0" prefWidth="702.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.ViewMapController">
+<Pane fx:id="root" prefHeight="418.0" prefWidth="702.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapBackup.ViewMapController">
    <children>
       <ScrollPane fx:id="scrollp" fitToHeight="true" fitToWidth="true" prefHeight="418.0" prefWidth="702.0">
         <content>
Index: out/production/SDM_Targil2/components/ViewInfo/ViewMap/Piece.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.StackPane?>\r\n\r\n<StackPane fx:id=\"stackpane\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.ViewInfo.ViewMap.PieceController\">\r\n   <children>\r\n      <ImageView fx:id=\"image\" fitHeight=\"261.0\" fitWidth=\"355.0\" pickOnBounds=\"true\" preserveRatio=\"true\" />\r\n   </children>\r\n</StackPane>\r\n
===================================================================
--- out/production/SDM_Targil2/components/ViewInfo/ViewMap/Piece.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ out/production/SDM_Targil2/components/ViewInfo/ViewMap/MapBackup/Piece.fxml	(date 1601046324198)
@@ -3,7 +3,7 @@
 <?import javafx.scene.image.ImageView?>
 <?import javafx.scene.layout.StackPane?>
 
-<StackPane fx:id="stackpane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.PieceController">
+<StackPane fx:id="stackpane" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapBackup.PieceController">
    <children>
       <ImageView fx:id="image" fitHeight="261.0" fitWidth="355.0" pickOnBounds="true" preserveRatio="true" />
    </children>
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseStores/ChooseStoreController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.ChooseStores;\r\n\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.SDM.SDMManager;\r\nimport Logic.Store.Store;\r\nimport javafx.beans.property.*;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.ComboBox;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\nimport java.net.URL;\r\nimport java.util.ResourceBundle;\r\n\r\npublic class ChooseStoreController implements Initializable {\r\n\r\n    @FXML\r\n    private AnchorPane placeAStaticOrderRootPane;\r\n\r\n    @FXML\r\n    private ComboBox<Store> chooseStoreCB;\r\n\r\n    @FXML\r\n    private Label deliveryFeeLabel;\r\n\r\n    @FXML\r\n    private Label storeLocationLabel;\r\n\r\n    @FXML\r\n    private Label ppkLabel;\r\n\r\n    @FXML\r\n    private Label selectedStoreLabel;\r\n\r\n\r\n    private ObservableList<Store> stores;\r\n    private ChangeListener<Store> storeChangeListener;\r\n    private Store selectedStore;\r\n\r\n    private ObjectProperty<Customer> customerObjectProperty;\r\n    private Customer customer;\r\n\r\n\r\n    public ChooseStoreController(){\r\n        stores = FXCollections.observableArrayList(SDMManager.getInstance().getStores());\r\n        customerObjectProperty = new SimpleObjectProperty<>();\r\n    }\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n\r\n        chooseStoreCB.getItems().addAll(stores);\r\n\r\n        chooseStoreCB.getSelectionModel().selectedItemProperty().addListener(\r\n                storeChangeListener = (((observable, oldValue, newValue) -> {\r\n                    System.out.println(\"Selected customer is \" + newValue);\r\n                    selectedStore = newValue;\r\n                    if (customer != null){\r\n                        deliveryFeeLabel.setText(String.valueOf(selectedStore.getDeliveryCost(customer.getLocation())));\r\n                        selectedStoreLabel.setText(selectedStore.getStoreName());\r\n                        storeLocationLabel.setText(selectedStore.getLocation().toString());\r\n                        ppkLabel.setText(String.valueOf(selectedStore.getDeliveryPpk()));\r\n                    }\r\n                }))\r\n        );\r\n//        chooseStoreCB.getSelectionModel().selectFirst();\r\n\r\n\r\n\r\n\r\n        customerObjectProperty.addListener(((observable, oldValue, newValue) -> {\r\n            System.out.println(\"ChooseStoreController customerChangeListener called!\");\r\n            if (newValue != null){\r\n                deliveryFeeLabel.setText(String.valueOf(selectedStore.getDeliveryCost(newValue.getLocation())));\r\n            }\r\n        }));\r\n    }\r\n\r\n\r\n\r\n    public Store getSelectedStore() {\r\n        return selectedStore;\r\n    }\r\n\r\n    public void setCustomer(Customer customer) {\r\n        this.customer = customer;\r\n    }\r\n\r\n    public void resetAllFields(){\r\n        this.customer = null;\r\n        this.selectedStore = null;\r\n        selectedStoreLabel.setText(\"(no store selected)\");\r\n        chooseStoreCB.getSelectionModel().clearSelection();\r\n\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseStores/ChooseStoreController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseStores/ChooseStoreController.java	(date 1601046324082)
@@ -85,6 +85,13 @@
     }
 
 
+    public boolean hasNecessaryInformation(){
+        if (selectedStore == null){
+            System.out.println("Store can't be null!");
+            return false;
+        }
+        return true;
+    }
 
     public Store getSelectedStore() {
         return selectedStore;
Index: SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/BasicInfoPopup.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.Button?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.layout.ColumnConstraints?>\r\n<?import javafx.scene.layout.GridPane?>\r\n<?import javafx.scene.layout.RowConstraints?>\r\n\r\n<GridPane fx:id=\"root\" maxHeight=\"-Infinity\" maxWidth=\"-Infinity\" minHeight=\"-Infinity\" minWidth=\"-Infinity\" prefHeight=\"400.0\" prefWidth=\"600.0\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.ViewInfo.ViewMap.BasicInfoPopupController\">\r\n  <columnConstraints>\r\n    <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n    <ColumnConstraints hgrow=\"SOMETIMES\" minWidth=\"10.0\" prefWidth=\"100.0\" />\r\n  </columnConstraints>\r\n  <rowConstraints>\r\n    <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n    <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n    <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n      <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n      <RowConstraints minHeight=\"10.0\" vgrow=\"SOMETIMES\" />\r\n  </rowConstraints>\r\n   <children>\r\n      <Label fx:id=\"idLabel\" text=\"Label\" />\r\n      <Label fx:id=\"nameLabel\" text=\"Label\" GridPane.rowIndex=\"1\" />\r\n      <Label fx:id=\"ordersLabel\" text=\"Label\" GridPane.rowIndex=\"2\" />\r\n      <Button fx:id=\"okayButton\" mnemonicParsing=\"false\" onAction=\"#okayButtonAction\" text=\"Button\" GridPane.columnSpan=\"2\" GridPane.halignment=\"CENTER\" GridPane.rowIndex=\"4\" />\r\n      <Label fx:id=\"idValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" />\r\n      <Label fx:id=\"nameValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"1\" />\r\n      <Label fx:id=\"ordersValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"2\" />\r\n      <Label fx:id=\"ppkLabel\" text=\"Label\" GridPane.rowIndex=\"3\" />\r\n      <Label fx:id=\"ppkValueLabel\" text=\"Label\" GridPane.columnIndex=\"1\" GridPane.rowIndex=\"3\" />\r\n   </children>\r\n</GridPane>\r\n
===================================================================
--- SDM_Targil2/JavaFX/src/components/ViewInfo/ViewMap/BasicInfoPopup.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ out/production/SDM_Targil2/components/ViewInfo/ViewMap/MapBackup/BasicInfoPopup.fxml	(date 1601046324202)
@@ -6,7 +6,7 @@
 <?import javafx.scene.layout.GridPane?>
 <?import javafx.scene.layout.RowConstraints?>
 
-<GridPane fx:id="root" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.BasicInfoPopupController">
+<GridPane fx:id="root" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/8.0.171" xmlns:fx="http://javafx.com/fxml/1" fx:controller="components.ViewInfo.ViewMap.MapBackup.BasicInfoPopupController">
   <columnConstraints>
     <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
     <ColumnConstraints hgrow="SOMETIMES" minWidth="10.0" prefWidth="100.0" />
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/ChooseItemsStaticOrderController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.ChooseItems;\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Inventory.InventoryItem;\r\nimport Logic.Inventory.ePurchaseCategory;\r\nimport Logic.Order.Cart;\r\nimport Logic.Order.CartItem;\r\nimport Logic.Order.StoreItem;\r\nimport Logic.Store.Store;\r\nimport Utilities.MyDoubleStringConverter;\r\nimport javafx.beans.property.*;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ListChangeListener;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.collections.ObservableSet;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.control.cell.PropertyValueFactory;\r\nimport javafx.scene.control.cell.TextFieldTableCell;\r\nimport javafx.scene.input.KeyCode;\r\n\r\nimport java.net.URL;\r\nimport java.util.*;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class ChooseItemsStaticOrderController implements Initializable{\r\n\r\n    @FXML\r\n    private Label customerLabel;\r\n\r\n    @FXML\r\n    private Label customerLocationLabel;\r\n\r\n    @FXML\r\n    private Label cartSubtotalLabel;\r\n\r\n    @FXML\r\n    private Label deliveryFeeLabel;\r\n\r\n    @FXML\r\n    private Label totalCostLabel;\r\n\r\n    @FXML\r\n    private TableView<ItemWrapper> itemsTableView;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, Integer> itemIdColumn;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, String> itemNameColumn;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, ObjectProperty<ePurchaseCategory>> categoryColumn;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, Integer> priceColumn;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, Double> amountColumn;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, Void> addButtonColumn;\r\n\r\n    @FXML\r\n    private TableColumn<ItemWrapper, Void> removeButtonColumn;\r\n\r\n    @FXML\r\n    private Button addToCartButton;\r\n\r\n    @FXML\r\n    private TableView<CartItem> cartTable;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Integer> cartItemIdCol;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, String> cartItemNameCol;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Integer> cartUnitPriceCol;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Double> cartItemAmountCol;\r\n\r\n    @FXML\r\n    private TableColumn<CartItem, Double> cartItemCostCol;\r\n\r\n    private Store store;\r\n    private ObservableList<ItemWrapper> storeItems;\r\n    private DoubleProperty selectedItemAmountProperty;\r\n    private HashMap<Integer, ItemWrapper> mapItemWrappersToAddToCart;\r\n    private ObservableList<CartItem> cartItems;\r\n\r\n\r\n    private ObjectProperty<Customer> customerObjectProperty;\r\n    private DoubleProperty cartSubtotal;\r\n    private FloatProperty deliveryFeeProperty;\r\n    private DoubleProperty totalCost;\r\n\r\n\r\n\r\n    public ChooseItemsStaticOrderController(){\r\n        mapItemWrappersToAddToCart = new HashMap<>();\r\n        storeItems = FXCollections.observableArrayList();\r\n        cartItems = FXCollections.observableArrayList();\r\n        customerObjectProperty = new SimpleObjectProperty<>();\r\n\r\n        cartSubtotal = new SimpleDoubleProperty(this, \"cartSubtotal\",0);\r\n\r\n        deliveryFeeProperty= new SimpleFloatProperty(0);\r\n        selectedItemAmountProperty = new SimpleDoubleProperty(0);\r\n        totalCost = new SimpleDoubleProperty(0);\r\n        totalCost.bind(cartSubtotal.add(deliveryFeeProperty));\r\n    }\r\n\r\n\r\n    @Override\r\n    public void initialize(URL location, ResourceBundle resources) {\r\n        deliveryFeeLabel.textProperty().bind(deliveryFeeProperty.asString());\r\n        totalCostLabel.textProperty().bind(totalCost.asString(\"%.2f\"));\r\n        cartSubtotalLabel.textProperty().bind(cartSubtotal.asString(\"%.2f\"));\r\n        setUpTableColumns();\r\n\r\n        customerObjectProperty.addListener(((observable, oldValue, newValue) -> {\r\n            System.out.println(\"ChooseItemsController customer change listener called!\");\r\n            if (newValue!=null)\r\n                setDeliveryFeeProperty(store.getDeliveryCost(newValue.getLocation()));\r\n        }));\r\n    }\r\n\r\n    public void setUpTableColumns(){\r\n\r\n        itemIdColumn.setCellValueFactory(new PropertyValueFactory<ItemWrapper,Integer>(\"ItemId\"));\r\n        itemNameColumn.setCellValueFactory(new PropertyValueFactory<ItemWrapper,String>(\"ItemName\"));\r\n        categoryColumn.setCellValueFactory(new PropertyValueFactory<ItemWrapper, ObjectProperty<ePurchaseCategory>>(\"PurchaseCategory\"));\r\n        priceColumn.setCellValueFactory(new PropertyValueFactory<ItemWrapper, Integer>(\"Price\"));\r\n\r\n        cartItemIdCol.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>(\"itemId\"));\r\n        cartItemNameCol.setCellValueFactory(new PropertyValueFactory<CartItem,String>(\"itemName\"));\r\n        cartUnitPriceCol.setCellValueFactory(new PropertyValueFactory<CartItem,Integer>(\"price\"));\r\n        cartItemAmountCol.setCellValueFactory(new PropertyValueFactory<CartItem,Double>(\"itemAmount\"));\r\n        cartItemCostCol.setCellValueFactory(new PropertyValueFactory<CartItem,Double>(\"cost\"));\r\n\r\n        cartTable.setItems(cartItems);\r\n\r\n        setUpAmountColumn();\r\n        setUpAddButtonColumn();\r\n        setUpRemoveButtonColumn();\r\n        setTableEditable();\r\n    }\r\n\r\n    private void setUpAddButtonColumn() {\r\n        addButtonColumn.setCellFactory(col->{\r\n            TableCell<ItemWrapper, Void> cell = new TableCell<ItemWrapper,Void>(){\r\n                @Override\r\n                protected void updateItem(Void item, boolean empty) {\r\n                    super.updateItem(item, empty);\r\n\r\n                    //Clean up cell before populating it\r\n                    this.setText(null);\r\n                    this.setGraphic(null);\r\n                    if (!empty){\r\n                        Button addButton = new Button(\"add\");\r\n                        addButton.setOnAction(e->{\r\n                            int rowIndex = this.getTableRow().getIndex();\r\n                            ItemWrapper itemWrapper = this.getTableView().getItems().get(rowIndex);\r\n                            double oldAmount = itemWrapper.getItemAmount();\r\n                            itemWrapper.setItemAmount(oldAmount+1);\r\n                            if (!mapItemWrappersToAddToCart.containsKey(itemWrapper.getItemId())){\r\n                                mapItemWrappersToAddToCart.put(itemWrapper.getItemId(), itemWrapper);\r\n                            }\r\n                        });\r\n                        this.setGraphic(addButton);\r\n                    }\r\n                }\r\n            };\r\n            return cell;\r\n        });\r\n    }\r\n\r\n\r\n    private void setUpRemoveButtonColumn() {\r\n        removeButtonColumn.setCellFactory(col->{\r\n            TableCell<ItemWrapper, Void> cell = new TableCell<ItemWrapper,Void>(){\r\n                @Override\r\n                protected void updateItem(Void item, boolean empty) {\r\n                    super.updateItem(item, empty);\r\n                    //Clean up cell before populating it\r\n                    this.setText(null);\r\n                    this.setGraphic(null);\r\n                    if (!empty){\r\n                        Button removeButton = new Button(\"remove\");\r\n                        removeButton.setOnAction(e->{\r\n                            int rowIndex = this.getTableRow().getIndex();\r\n                            ItemWrapper itemWrapper = this.getTableView().getItems().get(rowIndex);\r\n                            double oldAmount = itemWrapper.getItemAmount();\r\n                            if (oldAmount-1 <= 0){\r\n                                itemWrapper.setItemAmount(0);\r\n                                removeSelectedItemIfNecessary(itemWrapper);\r\n                            }\r\n                            else{\r\n                                itemWrapper.setItemAmount(oldAmount-1);\r\n                            }\r\n                        });\r\n                        this.setGraphic(removeButton);\r\n                    }\r\n                }\r\n            };\r\n            return cell;\r\n        });\r\n    }\r\n\r\n\r\n    private void setUpAmountColumn() {\r\n        amountColumn.setCellValueFactory(new PropertyValueFactory<ItemWrapper, Double>(\"itemAmount\"));\r\n\r\n        amountColumn.setCellFactory(TextFieldTableCell.forTableColumn(new MyDoubleStringConverter()));\r\n\r\n        amountColumn.setOnEditCommit(event -> {\r\n            Double value = event.getOldValue();\r\n            ItemWrapper selectedItem = ((ItemWrapper) event.getTableView().getItems().get(event.getTablePosition().getRow()));\r\n            Boolean isValidNewAmount = true;\r\n\r\n            if (event.getNewValue() != null){\r\n                System.out.println(\"event.getNewValue() is not null\");\r\n\r\n                if ((event.getNewValue() - value == 0)){\r\n                    System.out.println(\"event.getOldValue() is equal to event.getNewValue()\");\r\n                    isValidNewAmount = false;\r\n                }\r\n\r\n                if ((event.getNewValue() - value) != 0){\r\n                    System.out.println(\"event.getOldValue() is not equal to event.getNewValue()\");\r\n\r\n                    if (selectedItem.getStoreItem().getPurchaseCategory() == ePurchaseCategory.QUANTITY){\r\n                        if (event.getNewValue() != Math.round(event.getNewValue())){\r\n                            isValidNewAmount = false;\r\n                            System.out.println(\"Amount for this item must be a positive integer!\");\r\n                        }\r\n                    }\r\n\r\n                }\r\n                if (isValidNewAmount){\r\n                    value = event.getNewValue();\r\n                    selectedItem.setItemAmount(value);\r\n                    if (value > 0){\r\n                        mapItemWrappersToAddToCart.put(selectedItem.getStoreItem().getItemId(), selectedItem);\r\n                    }\r\n                    else{\r\n                        removeSelectedItemIfNecessary(selectedItem);\r\n                    }\r\n                }\r\n            }\r\n            itemsTableView.refresh();\r\n        });\r\n    }\r\n\r\n    private void removeSelectedItemIfNecessary(ItemWrapper selectedItem) {\r\n        if (mapItemWrappersToAddToCart.containsKey(selectedItem.getItemId())){\r\n            mapItemWrappersToAddToCart.remove(selectedItem.getItemId());\r\n        }\r\n    }\r\n\r\n\r\n    private void setTableEditable() {\r\n        itemsTableView.setEditable(true);\r\n\r\n        itemsTableView.getSelectionModel().cellSelectionEnabledProperty().set(true);\r\n\r\n        // when character or numbers pressed it will start edit in editable\r\n        // fields\r\n        itemsTableView.setOnKeyPressed(event -> {\r\n            if (event.getCode().isLetterKey() || event.getCode().isDigitKey())\r\n            {\r\n                editFocusedCell();\r\n            } else if (event.getCode() == KeyCode.RIGHT\r\n                    || event.getCode() == KeyCode.TAB) {\r\n                itemsTableView.getSelectionModel().selectNext();\r\n                event.consume();\r\n            } else if (event.getCode() == KeyCode.LEFT) {\r\n                event.consume();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void editFocusedCell() {\r\n        final TablePosition<ItemWrapper, ?> focusedCell = itemsTableView\r\n                .focusModelProperty().get().focusedCellProperty().get();\r\n        itemsTableView.edit(focusedCell.getRow(), focusedCell.getTableColumn());\r\n    }\r\n\r\n    public double getCartSubtotal() {\r\n        return cartSubtotal.get();\r\n    }\r\n\r\n    public DoubleProperty cartSubtotalProperty() {\r\n        return cartSubtotal;\r\n    }\r\n\r\n    public void setCartSubtotal(double cartSubtotal) {\r\n        this.cartSubtotal.set(cartSubtotal);\r\n    }\r\n\r\n    @FXML\r\n    void addToCartAction(ActionEvent event) {\r\n        mapItemWrappersToAddToCart.forEach((k,v)->{\r\n\r\n            double subtotal= cartSubtotal.doubleValue();\r\n            subtotal += (v.getItemAmount()*v.getPrice());\r\n            setCartSubtotal(subtotal);\r\n\r\n            StoreItem item = v.getStoreItem();\r\n\r\n            System.out.println(\"Adding itemId=\" + item.getItemId() + \", itemAmount=\" + v.getItemAmount());\r\n\r\n            CartItem ITEM = cartItems.stream().filter(i->i.getItemId()==item.getItemId()).findFirst().orElse(null);\r\n\r\n            if (ITEM!=null){\r\n                double oldAmount = ITEM.getItemAmount();\r\n                ITEM.setItemAmount(oldAmount+v.getItemAmount());\r\n            } else{\r\n                CartItem newCartItem = new CartItem((InventoryItem) item,\r\n                        v.getItemAmount(),\r\n                        v.getPrice(),v.getStoreBoughtFrom());\r\n\r\n                cartItems.add(newCartItem);\r\n            }\r\n\r\n            v.setItemAmount(0);\r\n            System.out.println(\"cartItems is now: \" + cartItems);\r\n        });\r\n        mapItemWrappersToAddToCart.clear();\r\n    }\r\n\r\n\r\n    public Cart getDummyCart() {\r\n        Cart dummyCart = new Cart();\r\n        for (CartItem item: cartItems){\r\n            dummyCart.add(item);\r\n        }\r\n        return dummyCart;\r\n    }\r\n\r\n\r\n\r\n\r\n    public void setDataForStaticOrder(Store selectedStore) {\r\n        if (this.store != selectedStore){\r\n            itemsTableView.getItems().clear();\r\n            store = selectedStore;\r\n            for (StoreItem item: selectedStore.getStoreItems()){\r\n                storeItems.add(new ItemWrapper(item,selectedStore));\r\n                //storeItems.add(new CartItem(item, 0,store.getMapItemToPrices().get(item.getItemId()), selectedStore));\r\n            }\r\n            itemsTableView.setItems(storeItems);\r\n        }\r\n\r\n        Customer c = customerObjectProperty.getValue();\r\n        if (c!= null)\r\n            setDeliveryFeeProperty(store.getDeliveryCost(c.getLocation()));\r\n    }\r\n\r\n\r\n\r\n    public void setDeliveryFeeValue(float val){\r\n        setDeliveryFeeProperty(val);\r\n    }\r\n\r\n    public double getDeliveryFeeProperty() {\r\n        return deliveryFeeProperty.get();\r\n    }\r\n\r\n    public FloatProperty deliveryFeePropertyProperty() {\r\n        return deliveryFeeProperty;\r\n    }\r\n\r\n    public void setDeliveryFeeProperty(float deliveryFeeProperty) {\r\n        this.deliveryFeeProperty.set(deliveryFeeProperty);\r\n    }\r\n\r\n    public Button getAddToCartButton() {\r\n        return addToCartButton;\r\n    }\r\n\r\n    public void fillCustomerData(Customer customer) {\r\n        customerLabel.setText(\"Customer: \"+customer.getCustomerName());\r\n        customerLocationLabel.setText(\"Customer Location: \" + customer.getLocation());\r\n    }\r\n\r\n    public void setUpCustomerBinding(ObjectProperty<Customer> customerObjectProperty) {\r\n        this.customerObjectProperty.bind(customerObjectProperty);\r\n    }\r\n\r\n\r\n    public void resetFields(){\r\n        store = null;\r\n        storeItems.clear();\r\n        mapItemWrappersToAddToCart.clear();\r\n        cartItems.clear();\r\n        cartTable.getItems().clear();\r\n        itemsTableView.getItems().clear();\r\n\r\n\r\n        cartSubtotal.setValue(0);\r\n        setCartSubtotal(0);\r\n        setDeliveryFeeValue(0);\r\n\r\n        storeItems = FXCollections.observableArrayList();\r\n        cartItems = FXCollections.observableArrayList();\r\n        setUpTableColumns();\r\n    }\r\n\r\n\r\n\r\n    public class ItemWrapper {\r\n\r\n        private StoreItem storeItem;\r\n        private DoubleProperty itemAmount;\r\n        private Store storeBoughtFrom;\r\n\r\n        public ItemWrapper(StoreItem item, Store store){\r\n            this.storeItem = item;\r\n            itemAmount = new SimpleDoubleProperty(0);\r\n            this.storeBoughtFrom=store;\r\n        }\r\n\r\n        public Store getStoreBoughtFrom() {\r\n            return storeBoughtFrom;\r\n        }\r\n\r\n        public StoreItem getStoreItem() {\r\n            return storeItem;\r\n        }\r\n\r\n        public double getItemAmount() {\r\n            return itemAmount.get();\r\n        }\r\n\r\n        public DoubleProperty itemAmountProperty() {\r\n            return itemAmount;\r\n        }\r\n\r\n        public void setItemAmount(double itemAmount) {\r\n            this.itemAmount.set(itemAmount);\r\n        }\r\n\r\n        public int getItemId(){\r\n            return storeItem.getItemId();\r\n        }\r\n\r\n        public String getName(){\r\n            return storeItem.getItemName();\r\n        }\r\n\r\n        public int getPrice(){\r\n            return storeItem.getNormalPrice();\r\n        }\r\n        public ePurchaseCategory getPurchaseCategory(){\r\n            return storeItem.getPurchaseCategory();\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/ChooseItemsStaticOrderController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/ChooseItems/ChooseItemsStaticOrderController.java	(date 1601046324081)
@@ -27,6 +27,9 @@
 import java.util.*;
 import java.util.stream.Collectors;
 
+//TODO: Update DeliveryFee and Total label after adding items
+//TODO: Make cartSubtotal initially show regula items subtotal
+
 public class ChooseItemsStaticOrderController implements Initializable{
 
     @FXML
@@ -100,7 +103,8 @@
     private DoubleProperty cartSubtotal;
     private FloatProperty deliveryFeeProperty;
     private DoubleProperty totalCost;
-
+    private String TAG = "ChooseItemsStaticOrderController";
+    private DoubleProperty regularItemsSubtotal;
 
 
     public ChooseItemsStaticOrderController(){
@@ -108,6 +112,7 @@
         storeItems = FXCollections.observableArrayList();
         cartItems = FXCollections.observableArrayList();
         customerObjectProperty = new SimpleObjectProperty<>();
+        regularItemsSubtotal = new SimpleDoubleProperty();
 
         cartSubtotal = new SimpleDoubleProperty(this, "cartSubtotal",0);
 
@@ -337,7 +342,7 @@
     }
 
 
-    public Cart getDummyCart() {
+    public Cart getCartForStaticOrder() {
         Cart dummyCart = new Cart();
         for (CartItem item: cartItems){
             dummyCart.add(item);
@@ -347,7 +352,6 @@
 
 
 
-
     public void setDataForStaticOrder(Store selectedStore) {
         if (this.store != selectedStore){
             itemsTableView.getItems().clear();
@@ -414,6 +418,21 @@
         setUpTableColumns();
     }
 
+    public boolean hasNecessaryInformation(){
+        if (cartItems.size() == 0){
+            System.out.println(TAG + "cart can't be empty!");
+            return false;
+        }
+        return true;
+    }
+
+    public HashMap<Store, Cart> getMapStoreToCart() {
+        HashMap<Store,Cart> res = new HashMap<>();
+        Cart cart = new Cart();
+        cartItems.forEach(i->cart.add(i));
+        res.put(this.store,cart);
+        return res;
+    }
 
 
     public class ItemWrapper {
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n\r\n<?import javafx.scene.control.ComboBox?>\r\n<?import javafx.scene.control.DatePicker?>\r\n<?import javafx.scene.control.Label?>\r\n<?import javafx.scene.control.RadioButton?>\r\n<?import javafx.scene.control.ToggleGroup?>\r\n<?import javafx.scene.image.Image?>\r\n<?import javafx.scene.image.ImageView?>\r\n<?import javafx.scene.layout.AnchorPane?>\r\n<?import javafx.scene.text.Font?>\r\n\r\n<AnchorPane fx:id=\"mainPane\" maxHeight=\"1.7976931348623157E308\" maxWidth=\"1.7976931348623157E308\" prefHeight=\"559.0\" prefWidth=\"730.0\" style=\"-fx-background-color: #fff;\" xmlns=\"http://javafx.com/javafx/8.0.171\" xmlns:fx=\"http://javafx.com/fxml/1\" fx:controller=\"components.PlaceAnOrder.BasicInfo.OrderBasicInfoController\">\r\n   <children>\r\n      <Label layoutX=\"184.0\" layoutY=\"97.0\" text=\"Place an order\" textFill=\"#4d4c4c\">\r\n         <font>\r\n            <Font size=\"16.0\" />\r\n         </font>\r\n      </Label>\r\n      <ImageView fitHeight=\"87.0\" fitWidth=\"90.0\" layoutX=\"87.0\" layoutY=\"54.0\" pickOnBounds=\"true\" preserveRatio=\"true\">\r\n         <image>\r\n            <Image url=\"@/resources/placeanorder.png\" />\r\n         </image>\r\n      </ImageView>\r\n      <Label layoutX=\"184.0\" layoutY=\"158.0\" text=\"CHOOSE CUSTOMER\" textFill=\"#aeacac\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"184.0\" layoutY=\"270.0\" text=\"DATE\" textFill=\"#aeacac\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <Label layoutX=\"184.0\" layoutY=\"391.0\" text=\"ORDER TYPE\" textFill=\"#aeacac\">\r\n         <font>\r\n            <Font size=\"14.0\" />\r\n         </font>\r\n      </Label>\r\n      <ComboBox fx:id=\"chooseCustomerCB\" layoutX=\"184.0\" layoutY=\"189.0\" prefHeight=\"25.0\" prefWidth=\"158.0\" />\r\n      <DatePicker fx:id=\"chooseDateDP\" layoutX=\"184.0\" layoutY=\"307.0\" />\r\n      <RadioButton fx:id=\"radioStaticOrder\" layoutX=\"201.0\" layoutY=\"429.0\" text=\"Static order\">\r\n         <toggleGroup>\r\n            <ToggleGroup fx:id=\"orderTypeGroup\" />\r\n         </toggleGroup></RadioButton>\r\n      <RadioButton fx:id=\"radioDynamicOrder\" layoutX=\"201.0\" layoutY=\"453.0\" text=\"Dynamic order\" toggleGroup=\"$orderTypeGroup\" />\r\n   </children>\r\n</AnchorPane>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/BasicInfo/OrderBasicInfo.fxml	(date 1601046324076)
@@ -37,7 +37,7 @@
             <Font size="14.0" />
          </font>
       </Label>
-      <ComboBox fx:id="chooseCustomerCB" layoutX="184.0" layoutY="189.0" prefHeight="25.0" prefWidth="158.0" />
+      <ComboBox fx:id="chooseCustomerCB" layoutX="184.0" layoutY="189.0" prefHeight="25.0" prefWidth="351.0" />
       <DatePicker fx:id="chooseDateDP" layoutX="184.0" layoutY="307.0" />
       <RadioButton fx:id="radioStaticOrder" layoutX="201.0" layoutY="429.0" text="Static order">
          <toggleGroup>
Index: SDM_Targil2/JavaFX/src/components/PlaceAnOrder/BasicInfo/OrderBasicInfoController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package components.PlaceAnOrder.BasicInfo;\r\n\r\n\r\nimport Logic.Customers.Customer;\r\nimport Logic.Order.Cart;\r\nimport Logic.Order.eOrderType;\r\nimport Logic.SDM.SDMManager;\r\nimport Logic.Store.Store;\r\nimport components.PlaceAnOrder.ChooseItems.ChooseItemsStaticOrderController;\r\nimport components.PlaceAnOrder.ChooseStores.ChooseStoreController;\r\nimport javafx.beans.property.BooleanProperty;\r\nimport javafx.beans.property.ObjectProperty;\r\nimport javafx.beans.property.SimpleBooleanProperty;\r\nimport javafx.beans.property.SimpleObjectProperty;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.AnchorPane;\r\n\r\nimport java.io.IOException;\r\nimport java.time.LocalDate;\r\nimport java.util.HashSet;\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\npublic class OrderBasicInfoController {\r\n\r\n    @FXML\r\n    private AnchorPane mainPane;\r\n\r\n    @FXML\r\n    private ComboBox<Customer> chooseCustomerCB;\r\n\r\n    @FXML\r\n    private DatePicker chooseDateDP;\r\n\r\n    @FXML\r\n    private RadioButton radioStaticOrder;\r\n\r\n    @FXML\r\n    private RadioButton radioDynamicOrder;\r\n\r\n\r\n    @FXML\r\n    private ToggleGroup orderTypeGroup;\r\n\r\n\r\n    private SDMManager sdmManager;\r\n    private ObservableList<Customer> customers;\r\n    private ChangeListener<Customer> customerChangeListener;\r\n    private Customer selectedCustomer;\r\n\r\n    private ChangeListener<LocalDate> orderDateChangeListener;\r\n    private LocalDate orderDate;\r\n\r\n    private ChangeListener<Toggle> orderTypeChangeListener;\r\n    private eOrderType orderType;\r\n\r\n    private List<TitledPane> panes;\r\n    private int openPaneNumber;\r\n    private int numberOfPanes;\r\n\r\n\r\n    private Store selectedStore;\r\n    private Set<Store> storesBoughtFrom;\r\n    private final ObservableList<Store> storeList = FXCollections.observableArrayList(Store.extractor);\r\n    private ChangeListener<Store> storeChangeListener;\r\n\r\n    private ScrollPane entireInventoryRef;\r\n\r\n    private Node staticOrderRef, dynamicOrderRef;\r\n    private ChooseStoreController staticOrderController;\r\n    private ChooseItemsStaticOrderController chooseItemsStaticOrderController;\r\n    private BooleanProperty isOrderComplete;\r\n\r\n    private ObjectProperty<Customer> customerObjectProperty;\r\n    private ObjectProperty<LocalDate> dateObjectProperty;\r\n\r\n    private Cart currentCart;\r\n    private int dummyVariable = 0;\r\n\r\n\r\n    public OrderBasicInfoController(){\r\n        System.out.println(\"Inside NewOrderContainerController Constructor...\");\r\n        customerObjectProperty = new SimpleObjectProperty<>();\r\n        dateObjectProperty = new SimpleObjectProperty<>();\r\n        sdmManager = SDMManager.getInstance();\r\n        customers = FXCollections.observableArrayList(sdmManager.getCustomers().getCustomers());\r\n        storesBoughtFrom = new HashSet<>();\r\n        openPaneNumber = 0;\r\n        //orderDate = LocalDate.now();\r\n        currentCart = new Cart();\r\n        isOrderComplete = new SimpleBooleanProperty(this,\"isOrderComplete\",false);\r\n\r\n        try {\r\n            FXMLLoader staticOrderLoader = new FXMLLoader();\r\n            staticOrderLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ChooseStores/ChooseStore.fxml\"));\r\n            staticOrderRef = staticOrderLoader.load();\r\n            staticOrderController = staticOrderLoader.getController();\r\n\r\n            FXMLLoader chooseItemsLoader = new FXMLLoader();\r\n            chooseItemsLoader.setLocation(getClass().getResource(\"/components/PlaceAnOrder/ChooseItems/ChooseItems.fxml\"));\r\n            dynamicOrderRef = chooseItemsLoader.load();\r\n            chooseItemsStaticOrderController = chooseItemsLoader.getController();\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void initialize(){\r\n        System.out.println(\"Inside NewOrderContainerController Initializer()...\");\r\n        chooseCustomerCB.getItems().addAll(customers);\r\n\r\n\r\n        orderTypeGroup.selectedToggleProperty().addListener(\r\n                orderTypeChangeListener = (((observable, oldValue, newValue) -> {\r\n                    System.out.println(\"ToggleGroup change detected:\");\r\n                    if (newValue == radioDynamicOrder) {\r\n                        orderType = eOrderType.DYNAMIC_ORDER;\r\n                    }\r\n                    else if (newValue == radioStaticOrder) {\r\n                        orderType = eOrderType.STATIC_ORDER;\r\n                    }\r\n                }))\r\n        );\r\n\r\n        radioStaticOrder.setSelected(true); //Set default orderType as Static Order\r\n\r\n\r\n        chooseCustomerCB.getSelectionModel().selectedItemProperty().addListener(\r\n                customerChangeListener = (((observable, oldValue, newValue) -> {\r\n                    System.out.println(\"Selected customer is \" + newValue);\r\n                    selectedCustomer = newValue;\r\n                    setCustomerObjectProperty(newValue);\r\n                }))\r\n        );\r\n        chooseCustomerCB.getSelectionModel().selectFirst();\r\n\r\n        chooseDateDP.valueProperty().addListener(\r\n                orderDateChangeListener = (((observable, oldValue, newValue) -> {\r\n                    System.out.println(\"Selected date: \" + newValue);\r\n                    orderDate = newValue;\r\n                    setDateObjectProperty(newValue);\r\n                }))\r\n        );\r\n    }\r\n\r\n    public Customer getCustomerObjectProperty() {\r\n        return customerObjectProperty.get();\r\n    }\r\n\r\n    public ObjectProperty<Customer> customerObjectPropertyProperty() {\r\n        return customerObjectProperty;\r\n    }\r\n\r\n    public void setCustomerObjectProperty(Customer customerObjectProperty) {\r\n        this.customerObjectProperty.set(customerObjectProperty);\r\n    }\r\n\r\n    public DatePicker getChooseDateDP() {\r\n        return chooseDateDP;\r\n    }\r\n\r\n\r\n    public eOrderType getOrderType() {\r\n        return orderType;\r\n    }\r\n\r\n    public void setOrderType(eOrderType orderType) {\r\n        this.orderType = orderType;\r\n    }\r\n\r\n    public LocalDate getOrderDate() {\r\n        return orderDate;\r\n    }\r\n\r\n    public void setOrderDate(LocalDate orderDate) {\r\n        this.orderDate = orderDate;\r\n    }\r\n\r\n    public Customer getSelectedCustomer() {\r\n        return selectedCustomer;\r\n    }\r\n\r\n    public void setSelectedCustomer(Customer selectedCustomer) {\r\n        this.selectedCustomer = selectedCustomer;\r\n    }\r\n\r\n\r\n\r\n    public LocalDate getDateObjectProperty() {\r\n        return dateObjectProperty.get();\r\n    }\r\n\r\n    public ObjectProperty<LocalDate> dateObjectPropertyProperty() {\r\n        return dateObjectProperty;\r\n    }\r\n\r\n    public void setDateObjectProperty(LocalDate dateObjectProperty) {\r\n        this.dateObjectProperty.set(dateObjectProperty);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SDM_Targil2/JavaFX/src/components/PlaceAnOrder/BasicInfo/OrderBasicInfoController.java	(revision bf401695dea75443552afffd974bad57e6fc6f28)
+++ SDM_Targil2/JavaFX/src/components/PlaceAnOrder/BasicInfo/OrderBasicInfoController.java	(date 1601046324077)
@@ -61,60 +61,18 @@
     private ChangeListener<Toggle> orderTypeChangeListener;
     private eOrderType orderType;
 
-    private List<TitledPane> panes;
-    private int openPaneNumber;
-    private int numberOfPanes;
-
-
-    private Store selectedStore;
-    private Set<Store> storesBoughtFrom;
-    private final ObservableList<Store> storeList = FXCollections.observableArrayList(Store.extractor);
-    private ChangeListener<Store> storeChangeListener;
-
-    private ScrollPane entireInventoryRef;
 
-    private Node staticOrderRef, dynamicOrderRef;
-    private ChooseStoreController staticOrderController;
-    private ChooseItemsStaticOrderController chooseItemsStaticOrderController;
-    private BooleanProperty isOrderComplete;
 
-    private ObjectProperty<Customer> customerObjectProperty;
-    private ObjectProperty<LocalDate> dateObjectProperty;
-
-    private Cart currentCart;
-    private int dummyVariable = 0;
 
 
     public OrderBasicInfoController(){
         System.out.println("Inside NewOrderContainerController Constructor...");
-        customerObjectProperty = new SimpleObjectProperty<>();
-        dateObjectProperty = new SimpleObjectProperty<>();
         sdmManager = SDMManager.getInstance();
         customers = FXCollections.observableArrayList(sdmManager.getCustomers().getCustomers());
-        storesBoughtFrom = new HashSet<>();
-        openPaneNumber = 0;
-        //orderDate = LocalDate.now();
-        currentCart = new Cart();
-        isOrderComplete = new SimpleBooleanProperty(this,"isOrderComplete",false);
-
-        try {
-            FXMLLoader staticOrderLoader = new FXMLLoader();
-            staticOrderLoader.setLocation(getClass().getResource("/components/PlaceAnOrder/ChooseStores/ChooseStore.fxml"));
-            staticOrderRef = staticOrderLoader.load();
-            staticOrderController = staticOrderLoader.getController();
-
-            FXMLLoader chooseItemsLoader = new FXMLLoader();
-            chooseItemsLoader.setLocation(getClass().getResource("/components/PlaceAnOrder/ChooseItems/ChooseItems.fxml"));
-            dynamicOrderRef = chooseItemsLoader.load();
-            chooseItemsStaticOrderController = chooseItemsLoader.getController();
-        } catch (IOException e) {
-            e.printStackTrace();
-        }
     }
 
     @FXML
     private void initialize(){
-        System.out.println("Inside NewOrderContainerController Initializer()...");
         chooseCustomerCB.getItems().addAll(customers);
 
 
@@ -132,12 +90,10 @@
 
         radioStaticOrder.setSelected(true); //Set default orderType as Static Order
 
-
         chooseCustomerCB.getSelectionModel().selectedItemProperty().addListener(
                 customerChangeListener = (((observable, oldValue, newValue) -> {
                     System.out.println("Selected customer is " + newValue);
                     selectedCustomer = newValue;
-                    setCustomerObjectProperty(newValue);
                 }))
         );
         chooseCustomerCB.getSelectionModel().selectFirst();
@@ -146,28 +102,15 @@
                 orderDateChangeListener = (((observable, oldValue, newValue) -> {
                     System.out.println("Selected date: " + newValue);
                     orderDate = newValue;
-                    setDateObjectProperty(newValue);
                 }))
         );
     }
 
-    public Customer getCustomerObjectProperty() {
-        return customerObjectProperty.get();
-    }
-
-    public ObjectProperty<Customer> customerObjectPropertyProperty() {
-        return customerObjectProperty;
-    }
-
-    public void setCustomerObjectProperty(Customer customerObjectProperty) {
-        this.customerObjectProperty.set(customerObjectProperty);
-    }
 
     public DatePicker getChooseDateDP() {
         return chooseDateDP;
     }
 
-
     public eOrderType getOrderType() {
         return orderType;
     }
@@ -188,21 +131,19 @@
         return selectedCustomer;
     }
 
-    public void setSelectedCustomer(Customer selectedCustomer) {
-        this.selectedCustomer = selectedCustomer;
-    }
-
-
-
-    public LocalDate getDateObjectProperty() {
-        return dateObjectProperty.get();
-    }
-
-    public ObjectProperty<LocalDate> dateObjectPropertyProperty() {
-        return dateObjectProperty;
+    public boolean hasNecessaryInformation(){
+        if (orderDate == null){
+            System.out.println("Date can't be null!");
+            return false;
+        }
+        if (selectedCustomer == null){
+            System.out.println("Customer can't be null!");
+            return false;
+        }
+        return true;
     }
 
-    public void setDateObjectProperty(LocalDate dateObjectProperty) {
-        this.dateObjectProperty.set(dateObjectProperty);
+    public void resetAllFields(){
+        chooseDateDP.getEditor().clear();
     }
 }
